[
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "radians",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "radians",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "log",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "Timer",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "vec2d",
        "importPath": "vec2d",
        "description": "vec2d",
        "isExtraImport": true,
        "detail": "vec2d",
        "documentation": {}
    },
    {
        "label": "vec2d",
        "importPath": "vec2d",
        "description": "vec2d",
        "isExtraImport": true,
        "detail": "vec2d",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "widgets",
        "description": "widgets",
        "isExtraImport": true,
        "detail": "widgets",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "widgets",
        "description": "widgets",
        "isExtraImport": true,
        "detail": "widgets",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "turtle",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "turtle",
        "description": "turtle",
        "detail": "turtle",
        "documentation": {}
    },
    {
        "label": "GameStateData",
        "importPath": "game",
        "description": "game",
        "isExtraImport": true,
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "game",
        "description": "game",
        "isExtraImport": true,
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "Directions",
        "importPath": "game",
        "description": "game",
        "isExtraImport": true,
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "Actions",
        "importPath": "game",
        "description": "game",
        "isExtraImport": true,
        "detail": "game",
        "documentation": {}
    },
    {
        "label": "nearestPoint",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "manhattanDistance",
        "importPath": "util",
        "description": "util",
        "isExtraImport": true,
        "detail": "util",
        "documentation": {}
    },
    {
        "label": "util,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "util.",
        "description": "util.",
        "detail": "util.",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "source.main",
        "description": "source.main",
        "isExtraImport": true,
        "detail": "source.main",
        "documentation": {}
    },
    {
        "label": "Boltzmann",
        "importPath": "scipy.constants",
        "description": "scipy.constants",
        "isExtraImport": true,
        "detail": "scipy.constants",
        "documentation": {}
    },
    {
        "label": "physical_constants",
        "importPath": "scipy.constants",
        "description": "scipy.constants",
        "isExtraImport": true,
        "detail": "scipy.constants",
        "documentation": {}
    },
    {
        "label": "chatterbot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "chatterbot",
        "description": "chatterbot",
        "detail": "chatterbot",
        "documentation": {}
    },
    {
        "label": "ListTrainer",
        "importPath": "chatterbot.trainers",
        "description": "chatterbot.trainers",
        "isExtraImport": true,
        "detail": "chatterbot.trainers",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "ImageTk",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "pyttsx3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyttsx3",
        "description": "pyttsx3",
        "detail": "pyttsx3",
        "documentation": {}
    },
    {
        "label": "namedtuple",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "make_dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "pyqrcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyqrcode",
        "description": "pyqrcode",
        "detail": "pyqrcode",
        "documentation": {}
    },
    {
        "label": "QRCode",
        "importPath": "pyqrcode",
        "description": "pyqrcode",
        "isExtraImport": true,
        "detail": "pyqrcode",
        "documentation": {}
    },
    {
        "label": "png",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "png",
        "description": "png",
        "detail": "png",
        "documentation": {}
    },
    {
        "label": "tkinterweb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinterweb",
        "description": "tkinterweb",
        "detail": "tkinterweb",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "class Game(object):\n    print \"Setting global Game params.\"\n    # Game parameters\n    BG_TILE_IMG = 'images/wood2.png'\n    BUTTON_BGIMG = 'images/x.png'\n    SCREEN_WIDTH, SCREEN_HEIGHT = 580, 500\n    GRID_SIZE = 20\n    FIELD_SIZE = 400, 400\n    #need to implement resource loading here\n    #global game constants make cheating easy!",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.button_bgimgs",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.button_bgimgs = ['images/x.png']\n\t#self.button_width = self.button_bgimgs[0].get_width()\n\t#self.button_height = self.button_bgimgs[0].get_height()\n\t#hopefully this will draw the button -15 pixels from the right end, +15 from the top \n\t#(hopefully giving us a nice X)\n\t# should be replaced in the future with a method that returns the coords for an x button\n\t# in whatever corner we want.\n\t#self.button_rect = Rect(self.tboard_width, self.tboard_y-15, self.button_width, self.button_height)\n\tself.button = Button(self.screen,\n                                pos=vec2d(self.tboard_width, self.tboard_y-15),",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\t#self.button_width",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\t#self.button_width = self.button_bgimgs[0].get_width()\n\t#self.button_height = self.button_bgimgs[0].get_height()\n\t#hopefully this will draw the button -15 pixels from the right end, +15 from the top \n\t#(hopefully giving us a nice X)\n\t# should be replaced in the future with a method that returns the coords for an x button\n\t# in whatever corner we want.\n\t#self.button_rect = Rect(self.tboard_width, self.tboard_y-15, self.button_width, self.button_height)\n\tself.button = Button(self.screen,\n                                pos=vec2d(self.tboard_width, self.tboard_y-15),\n                                btntype='Close',",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\t#self.button_height",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\t#self.button_height = self.button_bgimgs[0].get_height()\n\t#hopefully this will draw the button -15 pixels from the right end, +15 from the top \n\t#(hopefully giving us a nice X)\n\t# should be replaced in the future with a method that returns the coords for an x button\n\t# in whatever corner we want.\n\t#self.button_rect = Rect(self.tboard_width, self.tboard_y-15, self.button_width, self.button_height)\n\tself.button = Button(self.screen,\n                                pos=vec2d(self.tboard_width, self.tboard_y-15),\n                                btntype='Close',\n                                imgnames=self.button_bgimgs,",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\t#self.button_rect",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\t#self.button_rect = Rect(self.tboard_width, self.tboard_y-15, self.button_width, self.button_height)\n\tself.button = Button(self.screen,\n                                pos=vec2d(self.tboard_width, self.tboard_y-15),\n                                btntype='Close',\n                                imgnames=self.button_bgimgs,\n                                attached=self.tboard)\n\tprint \"Created close button.\"\n\tself.togglebtn_bgimgs = ['images/toggle1.png', 'images/toggle2.png']\n\tself.togglebtn = Button(self.screen,\n                                pos=vec2d(250, 250),",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.button",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.button = Button(self.screen,\n                                pos=vec2d(self.tboard_width, self.tboard_y-15),\n                                btntype='Close',\n                                imgnames=self.button_bgimgs,\n                                attached=self.tboard)\n\tprint \"Created close button.\"\n\tself.togglebtn_bgimgs = ['images/toggle1.png', 'images/toggle2.png']\n\tself.togglebtn = Button(self.screen,\n                                pos=vec2d(250, 250),\n                                btntype='Toggle',",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.togglebtn_bgimgs",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.togglebtn_bgimgs = ['images/toggle1.png', 'images/toggle2.png']\n\tself.togglebtn = Button(self.screen,\n                                pos=vec2d(250, 250),\n                                btntype='Toggle',\n                                imgnames=self.togglebtn_bgimgs,\n                                attached=\"\",\n\t\t\t\t\t\t\t\ttext=\"Toggle\",\n\t\t\t\t\t\t\t\ttextcolor=(255,255,255))\n\tprint \"Created toggle button.\"\n\tself.clockImg = Images(self.screen,",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.togglebtn",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.togglebtn = Button(self.screen,\n                                pos=vec2d(250, 250),\n                                btntype='Toggle',\n                                imgnames=self.togglebtn_bgimgs,\n                                attached=\"\",\n\t\t\t\t\t\t\t\ttext=\"Toggle\",\n\t\t\t\t\t\t\t\ttextcolor=(255,255,255))\n\tprint \"Created toggle button.\"\n\tself.clockImg = Images(self.screen,\n\t\t\t\t\t'images/clock.png',",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.clockImg",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.clockImg = Images(self.screen,\n\t\t\t\t\t'images/clock.png',\n\t\t\t\t\tpos=vec2d(430,0))\n\tself.hand = Images(self.screen,\n\t\t\t\t\t\t'images/secondHand.png',\n\t\t\t\t\t\tpos=vec2d(505,15),\n\t\t\t\t\t\timgtype='Spinner')\n\tself.textTest = textEntry(self.screen, \n\t\t\t\t\t\tpos=vec2d(0, self.SCREEN_HEIGHT-50),\n\t\t\t\t\t\tsize=vec2d(self.SCREEN_WIDTH,50))",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.hand",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.hand = Images(self.screen,\n\t\t\t\t\t\t'images/secondHand.png',\n\t\t\t\t\t\tpos=vec2d(505,15),\n\t\t\t\t\t\timgtype='Spinner')\n\tself.textTest = textEntry(self.screen, \n\t\t\t\t\t\tpos=vec2d(0, self.SCREEN_HEIGHT-50),\n\t\t\t\t\t\tsize=vec2d(self.SCREEN_WIDTH,50))\n\tself.floater = movingRect(self.screen,\n\t\t\t\t\t\tpos=vec2d(self.SCREEN_WIDTH/2, 0),\n\t\t\t\t\t\tspeed=vec2d(0,5))",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.textTest",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.textTest = textEntry(self.screen, \n\t\t\t\t\t\tpos=vec2d(0, self.SCREEN_HEIGHT-50),\n\t\t\t\t\t\tsize=vec2d(self.SCREEN_WIDTH,50))\n\tself.floater = movingRect(self.screen,\n\t\t\t\t\t\tpos=vec2d(self.SCREEN_WIDTH/2, 0),\n\t\t\t\t\t\tspeed=vec2d(0,5))\n\tself.moveImg = movingImg(self.screen,\n\t\t\t\t\t\t\"images/toggle1.png\",\n\t\t\t\t\t\tpos=vec2d(0,self.SCREEN_HEIGHT*3/4),\n\t\t\t\t\t\tspeed=vec2d(5, 0))",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.floater",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.floater = movingRect(self.screen,\n\t\t\t\t\t\tpos=vec2d(self.SCREEN_WIDTH/2, 0),\n\t\t\t\t\t\tspeed=vec2d(0,5))\n\tself.moveImg = movingImg(self.screen,\n\t\t\t\t\t\t\"images/toggle1.png\",\n\t\t\t\t\t\tpos=vec2d(0,self.SCREEN_HEIGHT*3/4),\n\t\t\t\t\t\tspeed=vec2d(5, 0))\n\tself.ball = circles(self.screen,\n\t\t\t\t\t\tpos=vec2d(25,25),\n\t\t\t\t\t\tradius = 25)",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.moveImg",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.moveImg = movingImg(self.screen,\n\t\t\t\t\t\t\"images/toggle1.png\",\n\t\t\t\t\t\tpos=vec2d(0,self.SCREEN_HEIGHT*3/4),\n\t\t\t\t\t\tspeed=vec2d(5, 0))\n\tself.ball = circles(self.screen,\n\t\t\t\t\t\tpos=vec2d(25,25),\n\t\t\t\t\t\tradius = 25)\n\tself.buttons = [self.togglebtn]\n\tself.textEntries = [self.textTest]\n\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.ball",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.ball = circles(self.screen,\n\t\t\t\t\t\tpos=vec2d(25,25),\n\t\t\t\t\t\tradius = 25)\n\tself.buttons = [self.togglebtn]\n\tself.textEntries = [self.textTest]\n\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]\n\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tradius",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\t\t\t\t\t\tradius = 25)\n\tself.buttons = [self.togglebtn]\n\tself.textEntries = [self.textTest]\n\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]\n\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.buttons",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.buttons = [self.togglebtn]\n\tself.textEntries = [self.textTest]\n\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]\n\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.\n\tself.grid_nrows = 30",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.textEntries",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.textEntries = [self.textTest]\n\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]\n\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.\n\tself.grid_nrows = 30\n\tself.grid_ncols = 30",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.world",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]\n\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.\n\tself.grid_nrows = 30\n\tself.grid_ncols = 30\n\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       ",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.clock",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.\n\tself.grid_nrows = 30\n\tself.grid_ncols = 30\n\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       \n\tself.options = dict(debug=True, ",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.paused",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.\n\tself.grid_nrows = 30\n\tself.grid_ncols = 30\n\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       \n\tself.options = dict(debug=True, \n                draw_grid=False)",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.grid_nrows",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.grid_nrows = 30\n\tself.grid_ncols = 30\n\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       \n\tself.options = dict(debug=True, \n                draw_grid=False)\n\tprint \"Done setting game options, exiting Game init.\"\n    def xy2coord(self, pos):\n        \"\"\" Convert a (x, y) pair to a (nrow, ncol) coordinate\n        \"\"\"\n        x, y = (pos[0] - self.field_rect.left, pos[1] - self.field_rect.top)",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.grid_ncols",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.grid_ncols = 30\n\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       \n\tself.options = dict(debug=True, \n                draw_grid=False)\n\tprint \"Done setting game options, exiting Game init.\"\n    def xy2coord(self, pos):\n        \"\"\" Convert a (x, y) pair to a (nrow, ncol) coordinate\n        \"\"\"\n        x, y = (pos[0] - self.field_rect.left, pos[1] - self.field_rect.top)\n        return (int(y) / self.GRID_SIZE, int(x) / self.GRID_SIZE)",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.field_rect",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       \n\tself.options = dict(debug=True, \n                draw_grid=False)\n\tprint \"Done setting game options, exiting Game init.\"\n    def xy2coord(self, pos):\n        \"\"\" Convert a (x, y) pair to a (nrow, ncol) coordinate\n        \"\"\"\n        x, y = (pos[0] - self.field_rect.left, pos[1] - self.field_rect.top)\n        return (int(y) / self.GRID_SIZE, int(x) / self.GRID_SIZE)\n    def coord2xy_mid(self, coord):",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\tself.options",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\tself.options = dict(debug=True, \n                draw_grid=False)\n\tprint \"Done setting game options, exiting Game init.\"\n    def xy2coord(self, pos):\n        \"\"\" Convert a (x, y) pair to a (nrow, ncol) coordinate\n        \"\"\"\n        x, y = (pos[0] - self.field_rect.left, pos[1] - self.field_rect.top)\n        return (int(y) / self.GRID_SIZE, int(x) / self.GRID_SIZE)\n    def coord2xy_mid(self, coord):\n        \"\"\" Convert a (nrow, ncol) coordinate to a (x, y) pair,",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.paused",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\t\t\tself.paused = not self.paused\n\t\t    elif event.key == pygame.K_g:\n\t\t\t#toggle draw grid\n\t\t\tself.options['draw_grid'] = not self.options['draw_grid']\n\t\telif (event.type == pygame.MOUSEBUTTONDOWN and event.button == 1):\n\t\t    for button in self.buttons:\n\t\t\t\tbutton.mouse_click_event(event.pos)\n\t\t    for entry in self.textEntries:\n\t\t\t\tentry.mouse_click_event(event.pos)\n\t    #pass \ttemporarily disabled, don't think it does anything",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.options['draw_grid']",
        "kind": 5,
        "importPath": "all files.c++.Something.other.game",
        "description": "all files.c++.Something.other.game",
        "peekOfCode": "\t\t\tself.options['draw_grid'] = not self.options['draw_grid']\n\t\telif (event.type == pygame.MOUSEBUTTONDOWN and event.button == 1):\n\t\t    for button in self.buttons:\n\t\t\t\tbutton.mouse_click_event(event.pos)\n\t\t    for entry in self.textEntries:\n\t\t\t\tentry.mouse_click_event(event.pos)\n\t    #pass \ttemporarily disabled, don't think it does anything\n\t    #entity events here.\n            #update hud, counters, score, anything like that here\n            if not self.paused:",
        "detail": "all files.c++.Something.other.game",
        "documentation": {}
    },
    {
        "label": "SimpleAnimation",
        "kind": 6,
        "importPath": "all files.c++.Something.other.simpleanimation",
        "description": "all files.c++.Something.other.simpleanimation",
        "peekOfCode": "class SimpleAnimation(object):\n    \"\"\" A simple animation. Scrolls cyclically through a list of\n        images, drawing them onto the screen in the same posision.    \n    \"\"\"\n    def __init__(self, screen, pos, images, scroll_period, duration=-1):\n        \"\"\" Create an animation.        \n            screen: The screen to which the animation will be drawn\n            pos: Position on the screen\n            images: \n                A list of surface objects to cyclically scroll through",
        "detail": "all files.c++.Something.other.simpleanimation",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 6,
        "importPath": "all files.c++.Something.other.simpleanimation",
        "description": "all files.c++.Something.other.simpleanimation",
        "peekOfCode": "class start():\n\tif __name__ == \"__main__\":\n\t    print \"initializing\"\n\t    pygame.init()\n\t    screen = pygame.display.set_mode((300, 300), 0, 32)\n\t    clock = pygame.time.Clock()\n\t    explosion_img = pygame.image.load('images/explosion1.png').convert_alpha()\n\t    images = [explosion_img, pygame.transform.rotate(explosion_img, 90)]\n\t    expl = SimpleAnimation(screen, (100, 100), images, 100, 2120)\n\t    while True:",
        "detail": "all files.c++.Something.other.simpleanimation",
        "documentation": {}
    },
    {
        "label": "\t\ttime_passed",
        "kind": 5,
        "importPath": "all files.c++.Something.other.simpleanimation",
        "description": "all files.c++.Something.other.simpleanimation",
        "peekOfCode": "\t\ttime_passed = clock.tick(50)\n\t\tscreen.fill((0, 0, 0))\n\t\tfor event in pygame.event.get():\n\t\t    if event.type == pygame.QUIT:\n\t\t\tsys.exit()\n\t\texpl.update(time_passed)\n\t\texpl.draw()\n\t\tpygame.display.flip()\ngo = start()",
        "detail": "all files.c++.Something.other.simpleanimation",
        "documentation": {}
    },
    {
        "label": "go",
        "kind": 5,
        "importPath": "all files.c++.Something.other.simpleanimation",
        "description": "all files.c++.Something.other.simpleanimation",
        "peekOfCode": "go = start()",
        "detail": "all files.c++.Something.other.simpleanimation",
        "documentation": {}
    },
    {
        "label": "lists",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.otherweapon",
        "description": "all files.c++.other.javascript.clock.generator.otherweapon",
        "peekOfCode": "lists = ['╾━╤デ╦︻']",
        "detail": "all files.c++.other.javascript.clock.generator.otherweapon",
        "documentation": {}
    },
    {
        "label": "lists",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.passwordgenerator",
        "description": "all files.c++.other.javascript.clock.generator.passwordgenerator",
        "peekOfCode": "lists = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l' 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '!', '@', '#', '$', '%', '^', '&', '*', ';', ':', ',', '.', '>', '<', '/', '?', '|', '-', '_', '=', '+', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'Y', 'Z']\n# Creates a loop for the main part to be in to restart with everytime\nwhile True:\n    # Asks user if they want to generate a password\n    ai = input(\"Generate passord?\\n\")\n    if ai == \"yes\":\n        # Defines a new line for user input\n        def aid():\n            # Asks user how many characters they want in their password\n            # Allows up to 15 characters max",
        "detail": "all files.c++.other.javascript.clock.generator.passwordgenerator",
        "documentation": {}
    },
    {
        "label": "lists",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.randomwordgenerator",
        "description": "all files.c++.other.javascript.clock.generator.randomwordgenerator",
        "peekOfCode": "lists = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nwhile True:\n    print(random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists))\n    time.sleep(1)",
        "detail": "all files.c++.other.javascript.clock.generator.randomwordgenerator",
        "documentation": {}
    },
    {
        "label": "lists",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "lists = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '!', '@', '#', '$', '%', '^', '&', '*', ';', ':', '>', '<', '/', '?', '-', '_', '.', ',', '|', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\nvar1 = random.randint(0,9)\nvar2 = random.randint(0,9)\nvar3 = random.randint(0,9)\nvar4 = random.randint(0,9)\nvar5 = random.randint(0,9)\nvar6 = random.randint(0,9)\nvar7 = random.randint(0,9)\nvar8 = random.randint(0,9)\nvar9 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var1",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var1 = random.randint(0,9)\nvar2 = random.randint(0,9)\nvar3 = random.randint(0,9)\nvar4 = random.randint(0,9)\nvar5 = random.randint(0,9)\nvar6 = random.randint(0,9)\nvar7 = random.randint(0,9)\nvar8 = random.randint(0,9)\nvar9 = random.randint(0,9)\nvar10 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var2",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var2 = random.randint(0,9)\nvar3 = random.randint(0,9)\nvar4 = random.randint(0,9)\nvar5 = random.randint(0,9)\nvar6 = random.randint(0,9)\nvar7 = random.randint(0,9)\nvar8 = random.randint(0,9)\nvar9 = random.randint(0,9)\nvar10 = random.randint(0,9)\nvar11 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var3",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var3 = random.randint(0,9)\nvar4 = random.randint(0,9)\nvar5 = random.randint(0,9)\nvar6 = random.randint(0,9)\nvar7 = random.randint(0,9)\nvar8 = random.randint(0,9)\nvar9 = random.randint(0,9)\nvar10 = random.randint(0,9)\nvar11 = random.randint(0,9)\nvar12 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var4",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var4 = random.randint(0,9)\nvar5 = random.randint(0,9)\nvar6 = random.randint(0,9)\nvar7 = random.randint(0,9)\nvar8 = random.randint(0,9)\nvar9 = random.randint(0,9)\nvar10 = random.randint(0,9)\nvar11 = random.randint(0,9)\nvar12 = random.randint(0,9)\nvar13 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var5",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var5 = random.randint(0,9)\nvar6 = random.randint(0,9)\nvar7 = random.randint(0,9)\nvar8 = random.randint(0,9)\nvar9 = random.randint(0,9)\nvar10 = random.randint(0,9)\nvar11 = random.randint(0,9)\nvar12 = random.randint(0,9)\nvar13 = random.randint(0,9)\nvar14 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var6",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var6 = random.randint(0,9)\nvar7 = random.randint(0,9)\nvar8 = random.randint(0,9)\nvar9 = random.randint(0,9)\nvar10 = random.randint(0,9)\nvar11 = random.randint(0,9)\nvar12 = random.randint(0,9)\nvar13 = random.randint(0,9)\nvar14 = random.randint(0,9)\nvar15 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var7",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var7 = random.randint(0,9)\nvar8 = random.randint(0,9)\nvar9 = random.randint(0,9)\nvar10 = random.randint(0,9)\nvar11 = random.randint(0,9)\nvar12 = random.randint(0,9)\nvar13 = random.randint(0,9)\nvar14 = random.randint(0,9)\nvar15 = random.randint(0,9)\nvar16 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var8",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var8 = random.randint(0,9)\nvar9 = random.randint(0,9)\nvar10 = random.randint(0,9)\nvar11 = random.randint(0,9)\nvar12 = random.randint(0,9)\nvar13 = random.randint(0,9)\nvar14 = random.randint(0,9)\nvar15 = random.randint(0,9)\nvar16 = random.randint(0,9)\nvar17 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var9",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var9 = random.randint(0,9)\nvar10 = random.randint(0,9)\nvar11 = random.randint(0,9)\nvar12 = random.randint(0,9)\nvar13 = random.randint(0,9)\nvar14 = random.randint(0,9)\nvar15 = random.randint(0,9)\nvar16 = random.randint(0,9)\nvar17 = random.randint(0,9)\nvar18 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var10",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var10 = random.randint(0,9)\nvar11 = random.randint(0,9)\nvar12 = random.randint(0,9)\nvar13 = random.randint(0,9)\nvar14 = random.randint(0,9)\nvar15 = random.randint(0,9)\nvar16 = random.randint(0,9)\nvar17 = random.randint(0,9)\nvar18 = random.randint(0,9)\nvar19 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var11",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var11 = random.randint(0,9)\nvar12 = random.randint(0,9)\nvar13 = random.randint(0,9)\nvar14 = random.randint(0,9)\nvar15 = random.randint(0,9)\nvar16 = random.randint(0,9)\nvar17 = random.randint(0,9)\nvar18 = random.randint(0,9)\nvar19 = random.randint(0,9)\nvar20 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var12",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var12 = random.randint(0,9)\nvar13 = random.randint(0,9)\nvar14 = random.randint(0,9)\nvar15 = random.randint(0,9)\nvar16 = random.randint(0,9)\nvar17 = random.randint(0,9)\nvar18 = random.randint(0,9)\nvar19 = random.randint(0,9)\nvar20 = random.randint(0,9)\nvar21 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var13",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var13 = random.randint(0,9)\nvar14 = random.randint(0,9)\nvar15 = random.randint(0,9)\nvar16 = random.randint(0,9)\nvar17 = random.randint(0,9)\nvar18 = random.randint(0,9)\nvar19 = random.randint(0,9)\nvar20 = random.randint(0,9)\nvar21 = random.randint(0,9)\nvar22 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var14",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var14 = random.randint(0,9)\nvar15 = random.randint(0,9)\nvar16 = random.randint(0,9)\nvar17 = random.randint(0,9)\nvar18 = random.randint(0,9)\nvar19 = random.randint(0,9)\nvar20 = random.randint(0,9)\nvar21 = random.randint(0,9)\nvar22 = random.randint(0,9)\nvar23 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var15",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var15 = random.randint(0,9)\nvar16 = random.randint(0,9)\nvar17 = random.randint(0,9)\nvar18 = random.randint(0,9)\nvar19 = random.randint(0,9)\nvar20 = random.randint(0,9)\nvar21 = random.randint(0,9)\nvar22 = random.randint(0,9)\nvar23 = random.randint(0,9)\nvar24 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var16",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var16 = random.randint(0,9)\nvar17 = random.randint(0,9)\nvar18 = random.randint(0,9)\nvar19 = random.randint(0,9)\nvar20 = random.randint(0,9)\nvar21 = random.randint(0,9)\nvar22 = random.randint(0,9)\nvar23 = random.randint(0,9)\nvar24 = random.randint(0,9)\nvar25 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var17",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var17 = random.randint(0,9)\nvar18 = random.randint(0,9)\nvar19 = random.randint(0,9)\nvar20 = random.randint(0,9)\nvar21 = random.randint(0,9)\nvar22 = random.randint(0,9)\nvar23 = random.randint(0,9)\nvar24 = random.randint(0,9)\nvar25 = random.randint(0,9)\nvar26 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var18",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var18 = random.randint(0,9)\nvar19 = random.randint(0,9)\nvar20 = random.randint(0,9)\nvar21 = random.randint(0,9)\nvar22 = random.randint(0,9)\nvar23 = random.randint(0,9)\nvar24 = random.randint(0,9)\nvar25 = random.randint(0,9)\nvar26 = random.randint(0,9)\nvar27 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var19",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var19 = random.randint(0,9)\nvar20 = random.randint(0,9)\nvar21 = random.randint(0,9)\nvar22 = random.randint(0,9)\nvar23 = random.randint(0,9)\nvar24 = random.randint(0,9)\nvar25 = random.randint(0,9)\nvar26 = random.randint(0,9)\nvar27 = random.randint(0,9)\nvar28 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var20",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var20 = random.randint(0,9)\nvar21 = random.randint(0,9)\nvar22 = random.randint(0,9)\nvar23 = random.randint(0,9)\nvar24 = random.randint(0,9)\nvar25 = random.randint(0,9)\nvar26 = random.randint(0,9)\nvar27 = random.randint(0,9)\nvar28 = random.randint(0,9)\nvar29 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var21",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var21 = random.randint(0,9)\nvar22 = random.randint(0,9)\nvar23 = random.randint(0,9)\nvar24 = random.randint(0,9)\nvar25 = random.randint(0,9)\nvar26 = random.randint(0,9)\nvar27 = random.randint(0,9)\nvar28 = random.randint(0,9)\nvar29 = random.randint(0,9)\nvar30 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var22",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var22 = random.randint(0,9)\nvar23 = random.randint(0,9)\nvar24 = random.randint(0,9)\nvar25 = random.randint(0,9)\nvar26 = random.randint(0,9)\nvar27 = random.randint(0,9)\nvar28 = random.randint(0,9)\nvar29 = random.randint(0,9)\nvar30 = random.randint(0,9)\nvar31 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var23",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var23 = random.randint(0,9)\nvar24 = random.randint(0,9)\nvar25 = random.randint(0,9)\nvar26 = random.randint(0,9)\nvar27 = random.randint(0,9)\nvar28 = random.randint(0,9)\nvar29 = random.randint(0,9)\nvar30 = random.randint(0,9)\nvar31 = random.randint(0,9)\nvar32 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var24",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var24 = random.randint(0,9)\nvar25 = random.randint(0,9)\nvar26 = random.randint(0,9)\nvar27 = random.randint(0,9)\nvar28 = random.randint(0,9)\nvar29 = random.randint(0,9)\nvar30 = random.randint(0,9)\nvar31 = random.randint(0,9)\nvar32 = random.randint(0,9)\nvar33 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var25",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var25 = random.randint(0,9)\nvar26 = random.randint(0,9)\nvar27 = random.randint(0,9)\nvar28 = random.randint(0,9)\nvar29 = random.randint(0,9)\nvar30 = random.randint(0,9)\nvar31 = random.randint(0,9)\nvar32 = random.randint(0,9)\nvar33 = random.randint(0,9)\nvar34 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var26",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var26 = random.randint(0,9)\nvar27 = random.randint(0,9)\nvar28 = random.randint(0,9)\nvar29 = random.randint(0,9)\nvar30 = random.randint(0,9)\nvar31 = random.randint(0,9)\nvar32 = random.randint(0,9)\nvar33 = random.randint(0,9)\nvar34 = random.randint(0,9)\nvar35 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var27",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var27 = random.randint(0,9)\nvar28 = random.randint(0,9)\nvar29 = random.randint(0,9)\nvar30 = random.randint(0,9)\nvar31 = random.randint(0,9)\nvar32 = random.randint(0,9)\nvar33 = random.randint(0,9)\nvar34 = random.randint(0,9)\nvar35 = random.randint(0,9)\nvar36 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var28",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var28 = random.randint(0,9)\nvar29 = random.randint(0,9)\nvar30 = random.randint(0,9)\nvar31 = random.randint(0,9)\nvar32 = random.randint(0,9)\nvar33 = random.randint(0,9)\nvar34 = random.randint(0,9)\nvar35 = random.randint(0,9)\nvar36 = random.randint(0,9)\nvar37 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var29",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var29 = random.randint(0,9)\nvar30 = random.randint(0,9)\nvar31 = random.randint(0,9)\nvar32 = random.randint(0,9)\nvar33 = random.randint(0,9)\nvar34 = random.randint(0,9)\nvar35 = random.randint(0,9)\nvar36 = random.randint(0,9)\nvar37 = random.randint(0,9)\nvar38 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var30",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var30 = random.randint(0,9)\nvar31 = random.randint(0,9)\nvar32 = random.randint(0,9)\nvar33 = random.randint(0,9)\nvar34 = random.randint(0,9)\nvar35 = random.randint(0,9)\nvar36 = random.randint(0,9)\nvar37 = random.randint(0,9)\nvar38 = random.randint(0,9)\nvar39 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var31",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var31 = random.randint(0,9)\nvar32 = random.randint(0,9)\nvar33 = random.randint(0,9)\nvar34 = random.randint(0,9)\nvar35 = random.randint(0,9)\nvar36 = random.randint(0,9)\nvar37 = random.randint(0,9)\nvar38 = random.randint(0,9)\nvar39 = random.randint(0,9)\nvar40 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var32",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var32 = random.randint(0,9)\nvar33 = random.randint(0,9)\nvar34 = random.randint(0,9)\nvar35 = random.randint(0,9)\nvar36 = random.randint(0,9)\nvar37 = random.randint(0,9)\nvar38 = random.randint(0,9)\nvar39 = random.randint(0,9)\nvar40 = random.randint(0,9)\nvar41 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var33",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var33 = random.randint(0,9)\nvar34 = random.randint(0,9)\nvar35 = random.randint(0,9)\nvar36 = random.randint(0,9)\nvar37 = random.randint(0,9)\nvar38 = random.randint(0,9)\nvar39 = random.randint(0,9)\nvar40 = random.randint(0,9)\nvar41 = random.randint(0,9)\nvar42 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var34",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var34 = random.randint(0,9)\nvar35 = random.randint(0,9)\nvar36 = random.randint(0,9)\nvar37 = random.randint(0,9)\nvar38 = random.randint(0,9)\nvar39 = random.randint(0,9)\nvar40 = random.randint(0,9)\nvar41 = random.randint(0,9)\nvar42 = random.randint(0,9)\nvar43 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var35",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var35 = random.randint(0,9)\nvar36 = random.randint(0,9)\nvar37 = random.randint(0,9)\nvar38 = random.randint(0,9)\nvar39 = random.randint(0,9)\nvar40 = random.randint(0,9)\nvar41 = random.randint(0,9)\nvar42 = random.randint(0,9)\nvar43 = random.randint(0,9)\nvar44 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var36",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var36 = random.randint(0,9)\nvar37 = random.randint(0,9)\nvar38 = random.randint(0,9)\nvar39 = random.randint(0,9)\nvar40 = random.randint(0,9)\nvar41 = random.randint(0,9)\nvar42 = random.randint(0,9)\nvar43 = random.randint(0,9)\nvar44 = random.randint(0,9)\nvar45 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var37",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var37 = random.randint(0,9)\nvar38 = random.randint(0,9)\nvar39 = random.randint(0,9)\nvar40 = random.randint(0,9)\nvar41 = random.randint(0,9)\nvar42 = random.randint(0,9)\nvar43 = random.randint(0,9)\nvar44 = random.randint(0,9)\nvar45 = random.randint(0,9)\nvar46 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var38",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var38 = random.randint(0,9)\nvar39 = random.randint(0,9)\nvar40 = random.randint(0,9)\nvar41 = random.randint(0,9)\nvar42 = random.randint(0,9)\nvar43 = random.randint(0,9)\nvar44 = random.randint(0,9)\nvar45 = random.randint(0,9)\nvar46 = random.randint(0,9)\nvar47 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var39",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var39 = random.randint(0,9)\nvar40 = random.randint(0,9)\nvar41 = random.randint(0,9)\nvar42 = random.randint(0,9)\nvar43 = random.randint(0,9)\nvar44 = random.randint(0,9)\nvar45 = random.randint(0,9)\nvar46 = random.randint(0,9)\nvar47 = random.randint(0,9)\nvar48 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var40",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var40 = random.randint(0,9)\nvar41 = random.randint(0,9)\nvar42 = random.randint(0,9)\nvar43 = random.randint(0,9)\nvar44 = random.randint(0,9)\nvar45 = random.randint(0,9)\nvar46 = random.randint(0,9)\nvar47 = random.randint(0,9)\nvar48 = random.randint(0,9)\nvar49 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var41",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var41 = random.randint(0,9)\nvar42 = random.randint(0,9)\nvar43 = random.randint(0,9)\nvar44 = random.randint(0,9)\nvar45 = random.randint(0,9)\nvar46 = random.randint(0,9)\nvar47 = random.randint(0,9)\nvar48 = random.randint(0,9)\nvar49 = random.randint(0,9)\nvar50 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var42",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var42 = random.randint(0,9)\nvar43 = random.randint(0,9)\nvar44 = random.randint(0,9)\nvar45 = random.randint(0,9)\nvar46 = random.randint(0,9)\nvar47 = random.randint(0,9)\nvar48 = random.randint(0,9)\nvar49 = random.randint(0,9)\nvar50 = random.randint(0,9)\nvar51 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var43",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var43 = random.randint(0,9)\nvar44 = random.randint(0,9)\nvar45 = random.randint(0,9)\nvar46 = random.randint(0,9)\nvar47 = random.randint(0,9)\nvar48 = random.randint(0,9)\nvar49 = random.randint(0,9)\nvar50 = random.randint(0,9)\nvar51 = random.randint(0,9)\nvar52 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var44",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var44 = random.randint(0,9)\nvar45 = random.randint(0,9)\nvar46 = random.randint(0,9)\nvar47 = random.randint(0,9)\nvar48 = random.randint(0,9)\nvar49 = random.randint(0,9)\nvar50 = random.randint(0,9)\nvar51 = random.randint(0,9)\nvar52 = random.randint(0,9)\nvar53 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var45",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var45 = random.randint(0,9)\nvar46 = random.randint(0,9)\nvar47 = random.randint(0,9)\nvar48 = random.randint(0,9)\nvar49 = random.randint(0,9)\nvar50 = random.randint(0,9)\nvar51 = random.randint(0,9)\nvar52 = random.randint(0,9)\nvar53 = random.randint(0,9)\nvar54 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var46",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var46 = random.randint(0,9)\nvar47 = random.randint(0,9)\nvar48 = random.randint(0,9)\nvar49 = random.randint(0,9)\nvar50 = random.randint(0,9)\nvar51 = random.randint(0,9)\nvar52 = random.randint(0,9)\nvar53 = random.randint(0,9)\nvar54 = random.randint(0,9)\nvar55 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var47",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var47 = random.randint(0,9)\nvar48 = random.randint(0,9)\nvar49 = random.randint(0,9)\nvar50 = random.randint(0,9)\nvar51 = random.randint(0,9)\nvar52 = random.randint(0,9)\nvar53 = random.randint(0,9)\nvar54 = random.randint(0,9)\nvar55 = random.randint(0,9)\nvar56 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var48",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var48 = random.randint(0,9)\nvar49 = random.randint(0,9)\nvar50 = random.randint(0,9)\nvar51 = random.randint(0,9)\nvar52 = random.randint(0,9)\nvar53 = random.randint(0,9)\nvar54 = random.randint(0,9)\nvar55 = random.randint(0,9)\nvar56 = random.randint(0,9)\nvar57 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var49",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var49 = random.randint(0,9)\nvar50 = random.randint(0,9)\nvar51 = random.randint(0,9)\nvar52 = random.randint(0,9)\nvar53 = random.randint(0,9)\nvar54 = random.randint(0,9)\nvar55 = random.randint(0,9)\nvar56 = random.randint(0,9)\nvar57 = random.randint(0,9)\nvar58 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var50",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var50 = random.randint(0,9)\nvar51 = random.randint(0,9)\nvar52 = random.randint(0,9)\nvar53 = random.randint(0,9)\nvar54 = random.randint(0,9)\nvar55 = random.randint(0,9)\nvar56 = random.randint(0,9)\nvar57 = random.randint(0,9)\nvar58 = random.randint(0,9)\nvar59 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var51",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var51 = random.randint(0,9)\nvar52 = random.randint(0,9)\nvar53 = random.randint(0,9)\nvar54 = random.randint(0,9)\nvar55 = random.randint(0,9)\nvar56 = random.randint(0,9)\nvar57 = random.randint(0,9)\nvar58 = random.randint(0,9)\nvar59 = random.randint(0,9)\nvar60 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var52",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var52 = random.randint(0,9)\nvar53 = random.randint(0,9)\nvar54 = random.randint(0,9)\nvar55 = random.randint(0,9)\nvar56 = random.randint(0,9)\nvar57 = random.randint(0,9)\nvar58 = random.randint(0,9)\nvar59 = random.randint(0,9)\nvar60 = random.randint(0,9)\nvar61 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var53",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var53 = random.randint(0,9)\nvar54 = random.randint(0,9)\nvar55 = random.randint(0,9)\nvar56 = random.randint(0,9)\nvar57 = random.randint(0,9)\nvar58 = random.randint(0,9)\nvar59 = random.randint(0,9)\nvar60 = random.randint(0,9)\nvar61 = random.randint(0,9)\nvar62 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var54",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var54 = random.randint(0,9)\nvar55 = random.randint(0,9)\nvar56 = random.randint(0,9)\nvar57 = random.randint(0,9)\nvar58 = random.randint(0,9)\nvar59 = random.randint(0,9)\nvar60 = random.randint(0,9)\nvar61 = random.randint(0,9)\nvar62 = random.randint(0,9)\nvar63 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var55",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var55 = random.randint(0,9)\nvar56 = random.randint(0,9)\nvar57 = random.randint(0,9)\nvar58 = random.randint(0,9)\nvar59 = random.randint(0,9)\nvar60 = random.randint(0,9)\nvar61 = random.randint(0,9)\nvar62 = random.randint(0,9)\nvar63 = random.randint(0,9)\nvar64 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var56",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var56 = random.randint(0,9)\nvar57 = random.randint(0,9)\nvar58 = random.randint(0,9)\nvar59 = random.randint(0,9)\nvar60 = random.randint(0,9)\nvar61 = random.randint(0,9)\nvar62 = random.randint(0,9)\nvar63 = random.randint(0,9)\nvar64 = random.randint(0,9)\nvar65 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var57",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var57 = random.randint(0,9)\nvar58 = random.randint(0,9)\nvar59 = random.randint(0,9)\nvar60 = random.randint(0,9)\nvar61 = random.randint(0,9)\nvar62 = random.randint(0,9)\nvar63 = random.randint(0,9)\nvar64 = random.randint(0,9)\nvar65 = random.randint(0,9)\nvar66 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var58",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var58 = random.randint(0,9)\nvar59 = random.randint(0,9)\nvar60 = random.randint(0,9)\nvar61 = random.randint(0,9)\nvar62 = random.randint(0,9)\nvar63 = random.randint(0,9)\nvar64 = random.randint(0,9)\nvar65 = random.randint(0,9)\nvar66 = random.randint(0,9)\nvar67 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var59",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var59 = random.randint(0,9)\nvar60 = random.randint(0,9)\nvar61 = random.randint(0,9)\nvar62 = random.randint(0,9)\nvar63 = random.randint(0,9)\nvar64 = random.randint(0,9)\nvar65 = random.randint(0,9)\nvar66 = random.randint(0,9)\nvar67 = random.randint(0,9)\nvar68 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var60",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var60 = random.randint(0,9)\nvar61 = random.randint(0,9)\nvar62 = random.randint(0,9)\nvar63 = random.randint(0,9)\nvar64 = random.randint(0,9)\nvar65 = random.randint(0,9)\nvar66 = random.randint(0,9)\nvar67 = random.randint(0,9)\nvar68 = random.randint(0,9)\nvar69 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var61",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var61 = random.randint(0,9)\nvar62 = random.randint(0,9)\nvar63 = random.randint(0,9)\nvar64 = random.randint(0,9)\nvar65 = random.randint(0,9)\nvar66 = random.randint(0,9)\nvar67 = random.randint(0,9)\nvar68 = random.randint(0,9)\nvar69 = random.randint(0,9)\nvar70 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var62",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var62 = random.randint(0,9)\nvar63 = random.randint(0,9)\nvar64 = random.randint(0,9)\nvar65 = random.randint(0,9)\nvar66 = random.randint(0,9)\nvar67 = random.randint(0,9)\nvar68 = random.randint(0,9)\nvar69 = random.randint(0,9)\nvar70 = random.randint(0,9)\nvar71 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var63",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var63 = random.randint(0,9)\nvar64 = random.randint(0,9)\nvar65 = random.randint(0,9)\nvar66 = random.randint(0,9)\nvar67 = random.randint(0,9)\nvar68 = random.randint(0,9)\nvar69 = random.randint(0,9)\nvar70 = random.randint(0,9)\nvar71 = random.randint(0,9)\nvar72 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var64",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var64 = random.randint(0,9)\nvar65 = random.randint(0,9)\nvar66 = random.randint(0,9)\nvar67 = random.randint(0,9)\nvar68 = random.randint(0,9)\nvar69 = random.randint(0,9)\nvar70 = random.randint(0,9)\nvar71 = random.randint(0,9)\nvar72 = random.randint(0,9)\nvar73 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var65",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var65 = random.randint(0,9)\nvar66 = random.randint(0,9)\nvar67 = random.randint(0,9)\nvar68 = random.randint(0,9)\nvar69 = random.randint(0,9)\nvar70 = random.randint(0,9)\nvar71 = random.randint(0,9)\nvar72 = random.randint(0,9)\nvar73 = random.randint(0,9)\nvar74 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var66",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var66 = random.randint(0,9)\nvar67 = random.randint(0,9)\nvar68 = random.randint(0,9)\nvar69 = random.randint(0,9)\nvar70 = random.randint(0,9)\nvar71 = random.randint(0,9)\nvar72 = random.randint(0,9)\nvar73 = random.randint(0,9)\nvar74 = random.randint(0,9)\nvar75 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var67",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var67 = random.randint(0,9)\nvar68 = random.randint(0,9)\nvar69 = random.randint(0,9)\nvar70 = random.randint(0,9)\nvar71 = random.randint(0,9)\nvar72 = random.randint(0,9)\nvar73 = random.randint(0,9)\nvar74 = random.randint(0,9)\nvar75 = random.randint(0,9)\nvar76 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var68",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var68 = random.randint(0,9)\nvar69 = random.randint(0,9)\nvar70 = random.randint(0,9)\nvar71 = random.randint(0,9)\nvar72 = random.randint(0,9)\nvar73 = random.randint(0,9)\nvar74 = random.randint(0,9)\nvar75 = random.randint(0,9)\nvar76 = random.randint(0,9)\nvar77 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var69",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var69 = random.randint(0,9)\nvar70 = random.randint(0,9)\nvar71 = random.randint(0,9)\nvar72 = random.randint(0,9)\nvar73 = random.randint(0,9)\nvar74 = random.randint(0,9)\nvar75 = random.randint(0,9)\nvar76 = random.randint(0,9)\nvar77 = random.randint(0,9)\nvar78 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var70",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var70 = random.randint(0,9)\nvar71 = random.randint(0,9)\nvar72 = random.randint(0,9)\nvar73 = random.randint(0,9)\nvar74 = random.randint(0,9)\nvar75 = random.randint(0,9)\nvar76 = random.randint(0,9)\nvar77 = random.randint(0,9)\nvar78 = random.randint(0,9)\nvar79 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var71",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var71 = random.randint(0,9)\nvar72 = random.randint(0,9)\nvar73 = random.randint(0,9)\nvar74 = random.randint(0,9)\nvar75 = random.randint(0,9)\nvar76 = random.randint(0,9)\nvar77 = random.randint(0,9)\nvar78 = random.randint(0,9)\nvar79 = random.randint(0,9)\nvar80 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var72",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var72 = random.randint(0,9)\nvar73 = random.randint(0,9)\nvar74 = random.randint(0,9)\nvar75 = random.randint(0,9)\nvar76 = random.randint(0,9)\nvar77 = random.randint(0,9)\nvar78 = random.randint(0,9)\nvar79 = random.randint(0,9)\nvar80 = random.randint(0,9)\nvar81 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var73",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var73 = random.randint(0,9)\nvar74 = random.randint(0,9)\nvar75 = random.randint(0,9)\nvar76 = random.randint(0,9)\nvar77 = random.randint(0,9)\nvar78 = random.randint(0,9)\nvar79 = random.randint(0,9)\nvar80 = random.randint(0,9)\nvar81 = random.randint(0,9)\nvar82 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var74",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var74 = random.randint(0,9)\nvar75 = random.randint(0,9)\nvar76 = random.randint(0,9)\nvar77 = random.randint(0,9)\nvar78 = random.randint(0,9)\nvar79 = random.randint(0,9)\nvar80 = random.randint(0,9)\nvar81 = random.randint(0,9)\nvar82 = random.randint(0,9)\nvar83 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var75",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var75 = random.randint(0,9)\nvar76 = random.randint(0,9)\nvar77 = random.randint(0,9)\nvar78 = random.randint(0,9)\nvar79 = random.randint(0,9)\nvar80 = random.randint(0,9)\nvar81 = random.randint(0,9)\nvar82 = random.randint(0,9)\nvar83 = random.randint(0,9)\nvar84 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var76",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var76 = random.randint(0,9)\nvar77 = random.randint(0,9)\nvar78 = random.randint(0,9)\nvar79 = random.randint(0,9)\nvar80 = random.randint(0,9)\nvar81 = random.randint(0,9)\nvar82 = random.randint(0,9)\nvar83 = random.randint(0,9)\nvar84 = random.randint(0,9)\nvar85 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var77",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var77 = random.randint(0,9)\nvar78 = random.randint(0,9)\nvar79 = random.randint(0,9)\nvar80 = random.randint(0,9)\nvar81 = random.randint(0,9)\nvar82 = random.randint(0,9)\nvar83 = random.randint(0,9)\nvar84 = random.randint(0,9)\nvar85 = random.randint(0,9)\nvar86 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var78",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var78 = random.randint(0,9)\nvar79 = random.randint(0,9)\nvar80 = random.randint(0,9)\nvar81 = random.randint(0,9)\nvar82 = random.randint(0,9)\nvar83 = random.randint(0,9)\nvar84 = random.randint(0,9)\nvar85 = random.randint(0,9)\nvar86 = random.randint(0,9)\nvar87 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var79",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var79 = random.randint(0,9)\nvar80 = random.randint(0,9)\nvar81 = random.randint(0,9)\nvar82 = random.randint(0,9)\nvar83 = random.randint(0,9)\nvar84 = random.randint(0,9)\nvar85 = random.randint(0,9)\nvar86 = random.randint(0,9)\nvar87 = random.randint(0,9)\nvar88 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var80",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var80 = random.randint(0,9)\nvar81 = random.randint(0,9)\nvar82 = random.randint(0,9)\nvar83 = random.randint(0,9)\nvar84 = random.randint(0,9)\nvar85 = random.randint(0,9)\nvar86 = random.randint(0,9)\nvar87 = random.randint(0,9)\nvar88 = random.randint(0,9)\nvar89 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var81",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var81 = random.randint(0,9)\nvar82 = random.randint(0,9)\nvar83 = random.randint(0,9)\nvar84 = random.randint(0,9)\nvar85 = random.randint(0,9)\nvar86 = random.randint(0,9)\nvar87 = random.randint(0,9)\nvar88 = random.randint(0,9)\nvar89 = random.randint(0,9)\nvar90 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var82",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var82 = random.randint(0,9)\nvar83 = random.randint(0,9)\nvar84 = random.randint(0,9)\nvar85 = random.randint(0,9)\nvar86 = random.randint(0,9)\nvar87 = random.randint(0,9)\nvar88 = random.randint(0,9)\nvar89 = random.randint(0,9)\nvar90 = random.randint(0,9)\nvar91 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var83",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var83 = random.randint(0,9)\nvar84 = random.randint(0,9)\nvar85 = random.randint(0,9)\nvar86 = random.randint(0,9)\nvar87 = random.randint(0,9)\nvar88 = random.randint(0,9)\nvar89 = random.randint(0,9)\nvar90 = random.randint(0,9)\nvar91 = random.randint(0,9)\nvar92 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var84",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var84 = random.randint(0,9)\nvar85 = random.randint(0,9)\nvar86 = random.randint(0,9)\nvar87 = random.randint(0,9)\nvar88 = random.randint(0,9)\nvar89 = random.randint(0,9)\nvar90 = random.randint(0,9)\nvar91 = random.randint(0,9)\nvar92 = random.randint(0,9)\nvar93 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var85",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var85 = random.randint(0,9)\nvar86 = random.randint(0,9)\nvar87 = random.randint(0,9)\nvar88 = random.randint(0,9)\nvar89 = random.randint(0,9)\nvar90 = random.randint(0,9)\nvar91 = random.randint(0,9)\nvar92 = random.randint(0,9)\nvar93 = random.randint(0,9)\nvar94 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var86",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var86 = random.randint(0,9)\nvar87 = random.randint(0,9)\nvar88 = random.randint(0,9)\nvar89 = random.randint(0,9)\nvar90 = random.randint(0,9)\nvar91 = random.randint(0,9)\nvar92 = random.randint(0,9)\nvar93 = random.randint(0,9)\nvar94 = random.randint(0,9)\nvar95 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var87",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var87 = random.randint(0,9)\nvar88 = random.randint(0,9)\nvar89 = random.randint(0,9)\nvar90 = random.randint(0,9)\nvar91 = random.randint(0,9)\nvar92 = random.randint(0,9)\nvar93 = random.randint(0,9)\nvar94 = random.randint(0,9)\nvar95 = random.randint(0,9)\nvar96 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var88",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var88 = random.randint(0,9)\nvar89 = random.randint(0,9)\nvar90 = random.randint(0,9)\nvar91 = random.randint(0,9)\nvar92 = random.randint(0,9)\nvar93 = random.randint(0,9)\nvar94 = random.randint(0,9)\nvar95 = random.randint(0,9)\nvar96 = random.randint(0,9)\nvar97 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var89",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var89 = random.randint(0,9)\nvar90 = random.randint(0,9)\nvar91 = random.randint(0,9)\nvar92 = random.randint(0,9)\nvar93 = random.randint(0,9)\nvar94 = random.randint(0,9)\nvar95 = random.randint(0,9)\nvar96 = random.randint(0,9)\nvar97 = random.randint(0,9)\nvar98 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var90",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var90 = random.randint(0,9)\nvar91 = random.randint(0,9)\nvar92 = random.randint(0,9)\nvar93 = random.randint(0,9)\nvar94 = random.randint(0,9)\nvar95 = random.randint(0,9)\nvar96 = random.randint(0,9)\nvar97 = random.randint(0,9)\nvar98 = random.randint(0,9)\nvar99 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var91",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var91 = random.randint(0,9)\nvar92 = random.randint(0,9)\nvar93 = random.randint(0,9)\nvar94 = random.randint(0,9)\nvar95 = random.randint(0,9)\nvar96 = random.randint(0,9)\nvar97 = random.randint(0,9)\nvar98 = random.randint(0,9)\nvar99 = random.randint(0,9)\nvar100 = random.randint(0,9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var92",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var92 = random.randint(0,9)\nvar93 = random.randint(0,9)\nvar94 = random.randint(0,9)\nvar95 = random.randint(0,9)\nvar96 = random.randint(0,9)\nvar97 = random.randint(0,9)\nvar98 = random.randint(0,9)\nvar99 = random.randint(0,9)\nvar100 = random.randint(0,9)\nv1 = random.choice(lists)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var93",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var93 = random.randint(0,9)\nvar94 = random.randint(0,9)\nvar95 = random.randint(0,9)\nvar96 = random.randint(0,9)\nvar97 = random.randint(0,9)\nvar98 = random.randint(0,9)\nvar99 = random.randint(0,9)\nvar100 = random.randint(0,9)\nv1 = random.choice(lists)\nv2 = random.choice(lists)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var94",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var94 = random.randint(0,9)\nvar95 = random.randint(0,9)\nvar96 = random.randint(0,9)\nvar97 = random.randint(0,9)\nvar98 = random.randint(0,9)\nvar99 = random.randint(0,9)\nvar100 = random.randint(0,9)\nv1 = random.choice(lists)\nv2 = random.choice(lists)\nv3 = random.choice(lists)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var95",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var95 = random.randint(0,9)\nvar96 = random.randint(0,9)\nvar97 = random.randint(0,9)\nvar98 = random.randint(0,9)\nvar99 = random.randint(0,9)\nvar100 = random.randint(0,9)\nv1 = random.choice(lists)\nv2 = random.choice(lists)\nv3 = random.choice(lists)\nv4 = random.choice(lists)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var96",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var96 = random.randint(0,9)\nvar97 = random.randint(0,9)\nvar98 = random.randint(0,9)\nvar99 = random.randint(0,9)\nvar100 = random.randint(0,9)\nv1 = random.choice(lists)\nv2 = random.choice(lists)\nv3 = random.choice(lists)\nv4 = random.choice(lists)\nv5 = random.choice(lists)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var97",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var97 = random.randint(0,9)\nvar98 = random.randint(0,9)\nvar99 = random.randint(0,9)\nvar100 = random.randint(0,9)\nv1 = random.choice(lists)\nv2 = random.choice(lists)\nv3 = random.choice(lists)\nv4 = random.choice(lists)\nv5 = random.choice(lists)\nv6 = random.choice(lists)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var98",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var98 = random.randint(0,9)\nvar99 = random.randint(0,9)\nvar100 = random.randint(0,9)\nv1 = random.choice(lists)\nv2 = random.choice(lists)\nv3 = random.choice(lists)\nv4 = random.choice(lists)\nv5 = random.choice(lists)\nv6 = random.choice(lists)\nv7 = random.choice(lists)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var99",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var99 = random.randint(0,9)\nvar100 = random.randint(0,9)\nv1 = random.choice(lists)\nv2 = random.choice(lists)\nv3 = random.choice(lists)\nv4 = random.choice(lists)\nv5 = random.choice(lists)\nv6 = random.choice(lists)\nv7 = random.choice(lists)\nv8 = random.choice(lists)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "var100",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "var100 = random.randint(0,9)\nv1 = random.choice(lists)\nv2 = random.choice(lists)\nv3 = random.choice(lists)\nv4 = random.choice(lists)\nv5 = random.choice(lists)\nv6 = random.choice(lists)\nv7 = random.choice(lists)\nv8 = random.choice(lists)\nv9 = random.choice(lists)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "v1",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "v1 = random.choice(lists)\nv2 = random.choice(lists)\nv3 = random.choice(lists)\nv4 = random.choice(lists)\nv5 = random.choice(lists)\nv6 = random.choice(lists)\nv7 = random.choice(lists)\nv8 = random.choice(lists)\nv9 = random.choice(lists)\nprint(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var29, var30, var31, var32, var33, var34, var35, var36, var37, var38, var39, var40, var41, var42, var43, var44, var45, var46, var47, var48, var49, var50, var51, var52, var53, var54, var55, var56, var57, var58, var59, var60, var61, var62, var63, var64, var65, var66, var67, var68, var69, var70, var71, var72 ,var73, var74, var75, var76, var77, var78, var79, var80, var81, var82, var83, var84, var85, var86, var87, var88, var89, var90, var91, var92, var93, var94, var95, var96, var97, var98, var99, var100)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "v2",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "v2 = random.choice(lists)\nv3 = random.choice(lists)\nv4 = random.choice(lists)\nv5 = random.choice(lists)\nv6 = random.choice(lists)\nv7 = random.choice(lists)\nv8 = random.choice(lists)\nv9 = random.choice(lists)\nprint(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var29, var30, var31, var32, var33, var34, var35, var36, var37, var38, var39, var40, var41, var42, var43, var44, var45, var46, var47, var48, var49, var50, var51, var52, var53, var54, var55, var56, var57, var58, var59, var60, var61, var62, var63, var64, var65, var66, var67, var68, var69, var70, var71, var72 ,var73, var74, var75, var76, var77, var78, var79, var80, var81, var82, var83, var84, var85, var86, var87, var88, var89, var90, var91, var92, var93, var94, var95, var96, var97, var98, var99, var100)\ntime.sleep(1)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "v3",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "v3 = random.choice(lists)\nv4 = random.choice(lists)\nv5 = random.choice(lists)\nv6 = random.choice(lists)\nv7 = random.choice(lists)\nv8 = random.choice(lists)\nv9 = random.choice(lists)\nprint(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var29, var30, var31, var32, var33, var34, var35, var36, var37, var38, var39, var40, var41, var42, var43, var44, var45, var46, var47, var48, var49, var50, var51, var52, var53, var54, var55, var56, var57, var58, var59, var60, var61, var62, var63, var64, var65, var66, var67, var68, var69, var70, var71, var72 ,var73, var74, var75, var76, var77, var78, var79, var80, var81, var82, var83, var84, var85, var86, var87, var88, var89, var90, var91, var92, var93, var94, var95, var96, var97, var98, var99, var100)\ntime.sleep(1)\nprint(random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists))",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "v4",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "v4 = random.choice(lists)\nv5 = random.choice(lists)\nv6 = random.choice(lists)\nv7 = random.choice(lists)\nv8 = random.choice(lists)\nv9 = random.choice(lists)\nprint(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var29, var30, var31, var32, var33, var34, var35, var36, var37, var38, var39, var40, var41, var42, var43, var44, var45, var46, var47, var48, var49, var50, var51, var52, var53, var54, var55, var56, var57, var58, var59, var60, var61, var62, var63, var64, var65, var66, var67, var68, var69, var70, var71, var72 ,var73, var74, var75, var76, var77, var78, var79, var80, var81, var82, var83, var84, var85, var86, var87, var88, var89, var90, var91, var92, var93, var94, var95, var96, var97, var98, var99, var100)\ntime.sleep(1)\nprint(random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists))\ntime.sleep(1)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "v5",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "v5 = random.choice(lists)\nv6 = random.choice(lists)\nv7 = random.choice(lists)\nv8 = random.choice(lists)\nv9 = random.choice(lists)\nprint(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var29, var30, var31, var32, var33, var34, var35, var36, var37, var38, var39, var40, var41, var42, var43, var44, var45, var46, var47, var48, var49, var50, var51, var52, var53, var54, var55, var56, var57, var58, var59, var60, var61, var62, var63, var64, var65, var66, var67, var68, var69, var70, var71, var72 ,var73, var74, var75, var76, var77, var78, var79, var80, var81, var82, var83, var84, var85, var86, var87, var88, var89, var90, var91, var92, var93, var94, var95, var96, var97, var98, var99, var100)\ntime.sleep(1)\nprint(random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists))\ntime.sleep(1)\nprint(v1, v2, v3, v4, v5, v6, v7, v8, v9)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "v6",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "v6 = random.choice(lists)\nv7 = random.choice(lists)\nv8 = random.choice(lists)\nv9 = random.choice(lists)\nprint(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var29, var30, var31, var32, var33, var34, var35, var36, var37, var38, var39, var40, var41, var42, var43, var44, var45, var46, var47, var48, var49, var50, var51, var52, var53, var54, var55, var56, var57, var58, var59, var60, var61, var62, var63, var64, var65, var66, var67, var68, var69, var70, var71, var72 ,var73, var74, var75, var76, var77, var78, var79, var80, var81, var82, var83, var84, var85, var86, var87, var88, var89, var90, var91, var92, var93, var94, var95, var96, var97, var98, var99, var100)\ntime.sleep(1)\nprint(random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists))\ntime.sleep(1)\nprint(v1, v2, v3, v4, v5, v6, v7, v8, v9)\ntime.sleep(1)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "v7",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "v7 = random.choice(lists)\nv8 = random.choice(lists)\nv9 = random.choice(lists)\nprint(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var29, var30, var31, var32, var33, var34, var35, var36, var37, var38, var39, var40, var41, var42, var43, var44, var45, var46, var47, var48, var49, var50, var51, var52, var53, var54, var55, var56, var57, var58, var59, var60, var61, var62, var63, var64, var65, var66, var67, var68, var69, var70, var71, var72 ,var73, var74, var75, var76, var77, var78, var79, var80, var81, var82, var83, var84, var85, var86, var87, var88, var89, var90, var91, var92, var93, var94, var95, var96, var97, var98, var99, var100)\ntime.sleep(1)\nprint(random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists))\ntime.sleep(1)\nprint(v1, v2, v3, v4, v5, v6, v7, v8, v9)\ntime.sleep(1)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "v8",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "v8 = random.choice(lists)\nv9 = random.choice(lists)\nprint(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var29, var30, var31, var32, var33, var34, var35, var36, var37, var38, var39, var40, var41, var42, var43, var44, var45, var46, var47, var48, var49, var50, var51, var52, var53, var54, var55, var56, var57, var58, var59, var60, var61, var62, var63, var64, var65, var66, var67, var68, var69, var70, var71, var72 ,var73, var74, var75, var76, var77, var78, var79, var80, var81, var82, var83, var84, var85, var86, var87, var88, var89, var90, var91, var92, var93, var94, var95, var96, var97, var98, var99, var100)\ntime.sleep(1)\nprint(random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists))\ntime.sleep(1)\nprint(v1, v2, v3, v4, v5, v6, v7, v8, v9)\ntime.sleep(1)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "v9",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "description": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "peekOfCode": "v9 = random.choice(lists)\nprint(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var29, var30, var31, var32, var33, var34, var35, var36, var37, var38, var39, var40, var41, var42, var43, var44, var45, var46, var47, var48, var49, var50, var51, var52, var53, var54, var55, var56, var57, var58, var59, var60, var61, var62, var63, var64, var65, var66, var67, var68, var69, var70, var71, var72 ,var73, var74, var75, var76, var77, var78, var79, var80, var81, var82, var83, var84, var85, var86, var87, var88, var89, var90, var91, var92, var93, var94, var95, var96, var97, var98, var99, var100)\ntime.sleep(1)\nprint(random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists), random.choice(lists))\ntime.sleep(1)\nprint(v1, v2, v3, v4, v5, v6, v7, v8, v9)\ntime.sleep(1)",
        "detail": "all files.c++.other.javascript.clock.generator.rannumandranchar",
        "documentation": {}
    },
    {
        "label": "procedure",
        "kind": 2,
        "importPath": "all files.c++.other.javascript.clock.test",
        "description": "all files.c++.other.javascript.clock.test",
        "peekOfCode": "def procedure():\n   time.sleep(1)\nwhile True:\n    # measure process time\n    t0 = time.ctime()\n    procedure()\n    print(time.ctime(), \"seconds process time\")\n    # # measure wall time\n    t0 = time.time()\n    procedure()",
        "detail": "all files.c++.other.javascript.clock.test",
        "documentation": {}
    },
    {
        "label": "milliseconds",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.timer.timer",
        "description": "all files.c++.other.javascript.timer.timer",
        "peekOfCode": "milliseconds = time.ctime()\nseconds = time.time()\nwhile True:\n    local_time = time.ctime(seconds)\n    print(\"Local time:\", local_time)\n    time.sleep(1.5)\n    print(milliseconds, \" since start\")",
        "detail": "all files.c++.other.javascript.timer.timer",
        "documentation": {}
    },
    {
        "label": "seconds",
        "kind": 5,
        "importPath": "all files.c++.other.javascript.timer.timer",
        "description": "all files.c++.other.javascript.timer.timer",
        "peekOfCode": "seconds = time.time()\nwhile True:\n    local_time = time.ctime(seconds)\n    print(\"Local time:\", local_time)\n    time.sleep(1.5)\n    print(milliseconds, \" since start\")",
        "detail": "all files.c++.other.javascript.timer.timer",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "class Vertex:\n\tdef __init__(self, n):\n\t\tself.name = n\n\t\tself.neighbors = list()\n\t\tself.distance = 9999\n\t\tself.color = 'black'\n\tdef add_neighbor(self, v):\n\t\tif v not in self.neighbors:\n\t\t\tself.neighbors.append(v)\n\t\t\tself.neighbors.sort()",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "class Graph:\n\tvertices = {}\n\tdef add_vertex(self, vertex):\n\t\tif isinstance(vertex, Vertex) and vertex.name not in self.vertices:\n\t\t\tself.vertices[vertex.name] = vertex\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\tdef add_edge(self, u, v):\n\t\tif u in self.vertices and v in self.vertices:",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\tself.name",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\tself.name = n\n\t\tself.neighbors = list()\n\t\tself.distance = 9999\n\t\tself.color = 'black'\n\tdef add_neighbor(self, v):\n\t\tif v not in self.neighbors:\n\t\t\tself.neighbors.append(v)\n\t\t\tself.neighbors.sort()\nclass Graph:\n\tvertices = {}",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\tself.neighbors",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\tself.neighbors = list()\n\t\tself.distance = 9999\n\t\tself.color = 'black'\n\tdef add_neighbor(self, v):\n\t\tif v not in self.neighbors:\n\t\t\tself.neighbors.append(v)\n\t\t\tself.neighbors.sort()\nclass Graph:\n\tvertices = {}\n\tdef add_vertex(self, vertex):",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\tself.distance",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\tself.distance = 9999\n\t\tself.color = 'black'\n\tdef add_neighbor(self, v):\n\t\tif v not in self.neighbors:\n\t\t\tself.neighbors.append(v)\n\t\t\tself.neighbors.sort()\nclass Graph:\n\tvertices = {}\n\tdef add_vertex(self, vertex):\n\t\tif isinstance(vertex, Vertex) and vertex.name not in self.vertices:",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\tself.color",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\tself.color = 'black'\n\tdef add_neighbor(self, v):\n\t\tif v not in self.neighbors:\n\t\t\tself.neighbors.append(v)\n\t\t\tself.neighbors.sort()\nclass Graph:\n\tvertices = {}\n\tdef add_vertex(self, vertex):\n\t\tif isinstance(vertex, Vertex) and vertex.name not in self.vertices:\n\t\t\tself.vertices[vertex.name] = vertex",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\tvertices",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\tvertices = {}\n\tdef add_vertex(self, vertex):\n\t\tif isinstance(vertex, Vertex) and vertex.name not in self.vertices:\n\t\t\tself.vertices[vertex.name] = vertex\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\tdef add_edge(self, u, v):\n\t\tif u in self.vertices and v in self.vertices:\n\t\t\tfor key, value in self.vertices.items():",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.vertices[vertex.name]",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\t\tself.vertices[vertex.name] = vertex\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\tdef add_edge(self, u, v):\n\t\tif u in self.vertices and v in self.vertices:\n\t\t\tfor key, value in self.vertices.items():\n\t\t\t\tif key == u:\n\t\t\t\t\tvalue.add_neighbor(v)\n\t\t\t\tif key == v:",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\tq",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\tq = list()\n\t\tvert.distance = 0\n\t\tvert.color = 'red'\n\t\tfor v in vert.neighbors:\n\t\t\tself.vertices[v].distance = vert.distance + 1\n\t\t\tq.append(v)\n\t\twhile len(q) > 0:\n\t\t\tu = q.pop(0)\n\t\t\tnode_u = self.vertices[u]\n\t\t\tnode_u.color = 'red'",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\tvert.distance",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\tvert.distance = 0\n\t\tvert.color = 'red'\n\t\tfor v in vert.neighbors:\n\t\t\tself.vertices[v].distance = vert.distance + 1\n\t\t\tq.append(v)\n\t\twhile len(q) > 0:\n\t\t\tu = q.pop(0)\n\t\t\tnode_u = self.vertices[u]\n\t\t\tnode_u.color = 'red'\n\t\t\tfor v in node_u.neighbors:",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\tvert.color",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\tvert.color = 'red'\n\t\tfor v in vert.neighbors:\n\t\t\tself.vertices[v].distance = vert.distance + 1\n\t\t\tq.append(v)\n\t\twhile len(q) > 0:\n\t\t\tu = q.pop(0)\n\t\t\tnode_u = self.vertices[u]\n\t\t\tnode_u.color = 'red'\n\t\t\tfor v in node_u.neighbors:\n\t\t\t\tnode_v = self.vertices[v]",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.vertices[v].distance",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\t\tself.vertices[v].distance = vert.distance + 1\n\t\t\tq.append(v)\n\t\twhile len(q) > 0:\n\t\t\tu = q.pop(0)\n\t\t\tnode_u = self.vertices[u]\n\t\t\tnode_u.color = 'red'\n\t\t\tfor v in node_u.neighbors:\n\t\t\t\tnode_v = self.vertices[v]\n\t\t\t\tif node_v.color == 'black':\n\t\t\t\t\tq.append(v)",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\t\tu",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\t\tu = q.pop(0)\n\t\t\tnode_u = self.vertices[u]\n\t\t\tnode_u.color = 'red'\n\t\t\tfor v in node_u.neighbors:\n\t\t\t\tnode_v = self.vertices[v]\n\t\t\t\tif node_v.color == 'black':\n\t\t\t\t\tq.append(v)\n\t\t\t\t\tif node_v.distance > node_u.distance + 1:\n\t\t\t\t\t\tnode_v.distance = node_u.distance + 1\ng = Graph()",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\t\tnode_u",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\t\tnode_u = self.vertices[u]\n\t\t\tnode_u.color = 'red'\n\t\t\tfor v in node_u.neighbors:\n\t\t\t\tnode_v = self.vertices[v]\n\t\t\t\tif node_v.color == 'black':\n\t\t\t\t\tq.append(v)\n\t\t\t\t\tif node_v.distance > node_u.distance + 1:\n\t\t\t\t\t\tnode_v.distance = node_u.distance + 1\ng = Graph()\na = Vertex('A')",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\t\tnode_u.color",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\t\tnode_u.color = 'red'\n\t\t\tfor v in node_u.neighbors:\n\t\t\t\tnode_v = self.vertices[v]\n\t\t\t\tif node_v.color == 'black':\n\t\t\t\t\tq.append(v)\n\t\t\t\t\tif node_v.distance > node_u.distance + 1:\n\t\t\t\t\t\tnode_v.distance = node_u.distance + 1\ng = Graph()\na = Vertex('A')\ng.add_vertex(a)",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tnode_v",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\t\t\tnode_v = self.vertices[v]\n\t\t\t\tif node_v.color == 'black':\n\t\t\t\t\tq.append(v)\n\t\t\t\t\tif node_v.distance > node_u.distance + 1:\n\t\t\t\t\t\tnode_v.distance = node_u.distance + 1\ng = Graph()\na = Vertex('A')\ng.add_vertex(a)\ng.add_vertex(Vertex('B'))\nfor i in range(ord('A'), ord('K')):",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tnode_v.distance",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "\t\t\t\t\t\tnode_v.distance = node_u.distance + 1\ng = Graph()\na = Vertex('A')\ng.add_vertex(a)\ng.add_vertex(Vertex('B'))\nfor i in range(ord('A'), ord('K')):\n\tg.add_vertex(Vertex(chr(i)))\nedges = ['AB', 'AE', 'BF', 'CG', 'DE', 'DH', 'EH', 'FG', 'FI', 'FJ', 'GJ', 'HI']\nfor edge in edges:\n\tg.add_edge(edge[:1], edge[1:])",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "g = Graph()\na = Vertex('A')\ng.add_vertex(a)\ng.add_vertex(Vertex('B'))\nfor i in range(ord('A'), ord('K')):\n\tg.add_vertex(Vertex(chr(i)))\nedges = ['AB', 'AE', 'BF', 'CG', 'DE', 'DH', 'EH', 'FG', 'FI', 'FJ', 'GJ', 'HI']\nfor edge in edges:\n\tg.add_edge(edge[:1], edge[1:])\ng.bfs(a)",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "a = Vertex('A')\ng.add_vertex(a)\ng.add_vertex(Vertex('B'))\nfor i in range(ord('A'), ord('K')):\n\tg.add_vertex(Vertex(chr(i)))\nedges = ['AB', 'AE', 'BF', 'CG', 'DE', 'DH', 'EH', 'FG', 'FI', 'FJ', 'GJ', 'HI']\nfor edge in edges:\n\tg.add_edge(edge[:1], edge[1:])\ng.bfs(a)\ng.print_graph()",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "all files.c++.other.bfs",
        "description": "all files.c++.other.bfs",
        "peekOfCode": "edges = ['AB', 'AE', 'BF', 'CG', 'DE', 'DH', 'EH', 'FG', 'FI', 'FJ', 'GJ', 'HI']\nfor edge in edges:\n\tg.add_edge(edge[:1], edge[1:])\ng.bfs(a)\ng.print_graph()",
        "detail": "all files.c++.other.bfs",
        "documentation": {}
    },
    {
        "label": "binToDec",
        "kind": 2,
        "importPath": "all files.c++.other.binarytodecimal",
        "description": "all files.c++.other.binarytodecimal",
        "peekOfCode": "def binToDec(binNum): #function created to convert binary to decimal with parametere binNum\n\tdecNum = 0\n\tpower = 0\n\twhile binNum > 0: #loop will run till binNum is greater than 0\n\t\tdecNum += 2 ** power * (binNum % 10) \n\t\tbinNum //= 10 # reducing binNum everytime by 1 digit\t\n\t\tpower += 1 # increasing power by 1 each loop\n\treturn decNum\ndef decToBin(decNum): #function created to convert decimal to binary with parametere decNum\n\tbinNum = 0",
        "detail": "all files.c++.other.binarytodecimal",
        "documentation": {}
    },
    {
        "label": "decToBin",
        "kind": 2,
        "importPath": "all files.c++.other.binarytodecimal",
        "description": "all files.c++.other.binarytodecimal",
        "peekOfCode": "def decToBin(decNum): #function created to convert decimal to binary with parametere decNum\n\tbinNum = 0\n\tpower = 0\n\twhile decNum > 0:#loop will run till decNum is greater than 0\n\t\tbinNum += 10 ** power * (decNum % 2)\n\t\tdecNum //= 2 # reducing decNum everytime by 1 digit\n\t\tpower += 1 # increasing power by 1 each loop\n\treturn binNum\ndef convert(fromNum, fromBase, toBase): #function for converting from any base to any other base\n\ttoNum = 0",
        "detail": "all files.c++.other.binarytodecimal",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "all files.c++.other.binarytodecimal",
        "description": "all files.c++.other.binarytodecimal",
        "peekOfCode": "def convert(fromNum, fromBase, toBase): #function for converting from any base to any other base\n\ttoNum = 0\n\tpower = 0\n\twhile fromNum > 0:\n\t\ttoNum += fromBase ** power * (fromNum % toBase)\n\t\tfromNum //= toBase\n\t\tpower += 1\n\treturn toNum\n# print (str(binToDec(101011)))\n# print (str(decToBin(128)))",
        "detail": "all files.c++.other.binarytodecimal",
        "documentation": {}
    },
    {
        "label": "\tdecNum",
        "kind": 5,
        "importPath": "all files.c++.other.binarytodecimal",
        "description": "all files.c++.other.binarytodecimal",
        "peekOfCode": "\tdecNum = 0\n\tpower = 0\n\twhile binNum > 0: #loop will run till binNum is greater than 0\n\t\tdecNum += 2 ** power * (binNum % 10) \n\t\tbinNum //= 10 # reducing binNum everytime by 1 digit\t\n\t\tpower += 1 # increasing power by 1 each loop\n\treturn decNum\ndef decToBin(decNum): #function created to convert decimal to binary with parametere decNum\n\tbinNum = 0\n\tpower = 0",
        "detail": "all files.c++.other.binarytodecimal",
        "documentation": {}
    },
    {
        "label": "\tpower",
        "kind": 5,
        "importPath": "all files.c++.other.binarytodecimal",
        "description": "all files.c++.other.binarytodecimal",
        "peekOfCode": "\tpower = 0\n\twhile binNum > 0: #loop will run till binNum is greater than 0\n\t\tdecNum += 2 ** power * (binNum % 10) \n\t\tbinNum //= 10 # reducing binNum everytime by 1 digit\t\n\t\tpower += 1 # increasing power by 1 each loop\n\treturn decNum\ndef decToBin(decNum): #function created to convert decimal to binary with parametere decNum\n\tbinNum = 0\n\tpower = 0\n\twhile decNum > 0:#loop will run till decNum is greater than 0",
        "detail": "all files.c++.other.binarytodecimal",
        "documentation": {}
    },
    {
        "label": "\tbinNum",
        "kind": 5,
        "importPath": "all files.c++.other.binarytodecimal",
        "description": "all files.c++.other.binarytodecimal",
        "peekOfCode": "\tbinNum = 0\n\tpower = 0\n\twhile decNum > 0:#loop will run till decNum is greater than 0\n\t\tbinNum += 10 ** power * (decNum % 2)\n\t\tdecNum //= 2 # reducing decNum everytime by 1 digit\n\t\tpower += 1 # increasing power by 1 each loop\n\treturn binNum\ndef convert(fromNum, fromBase, toBase): #function for converting from any base to any other base\n\ttoNum = 0\n\tpower = 0",
        "detail": "all files.c++.other.binarytodecimal",
        "documentation": {}
    },
    {
        "label": "\tpower",
        "kind": 5,
        "importPath": "all files.c++.other.binarytodecimal",
        "description": "all files.c++.other.binarytodecimal",
        "peekOfCode": "\tpower = 0\n\twhile decNum > 0:#loop will run till decNum is greater than 0\n\t\tbinNum += 10 ** power * (decNum % 2)\n\t\tdecNum //= 2 # reducing decNum everytime by 1 digit\n\t\tpower += 1 # increasing power by 1 each loop\n\treturn binNum\ndef convert(fromNum, fromBase, toBase): #function for converting from any base to any other base\n\ttoNum = 0\n\tpower = 0\n\twhile fromNum > 0:",
        "detail": "all files.c++.other.binarytodecimal",
        "documentation": {}
    },
    {
        "label": "\ttoNum",
        "kind": 5,
        "importPath": "all files.c++.other.binarytodecimal",
        "description": "all files.c++.other.binarytodecimal",
        "peekOfCode": "\ttoNum = 0\n\tpower = 0\n\twhile fromNum > 0:\n\t\ttoNum += fromBase ** power * (fromNum % toBase)\n\t\tfromNum //= toBase\n\t\tpower += 1\n\treturn toNum\n# print (str(binToDec(101011)))\n# print (str(decToBin(128)))\nprint (str(convert(127, 10, 8)))\t# converts 127 in  base 10 to base 8",
        "detail": "all files.c++.other.binarytodecimal",
        "documentation": {}
    },
    {
        "label": "\tpower",
        "kind": 5,
        "importPath": "all files.c++.other.binarytodecimal",
        "description": "all files.c++.other.binarytodecimal",
        "peekOfCode": "\tpower = 0\n\twhile fromNum > 0:\n\t\ttoNum += fromBase ** power * (fromNum % toBase)\n\t\tfromNum //= toBase\n\t\tpower += 1\n\treturn toNum\n# print (str(binToDec(101011)))\n# print (str(decToBin(128)))\nprint (str(convert(127, 10, 8)))\t# converts 127 in  base 10 to base 8\nprint (str(convert(101001, 2, 2)))",
        "detail": "all files.c++.other.binarytodecimal",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "class Node:\n\tdef __init__(self, val):\n\t\tself.value = val\n\t\tself.leftChild = None\n\t\tself.rightChild = None\n\tdef insert(self, data):\n\t\tif self.value == data:\n\t\t\treturn False\n\t\telif self.value > data:\n\t\t\tif self.leftChild:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "Tree",
        "kind": 6,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "class Tree:\n\tdef __init__(self):\n\t\tself.root = None\n\tdef insert(self, data):\n\t\tif self.root:\n\t\t\treturn self.root.insert(data)\n\t\telse:\n\t\t\tself.root = Node(data)\n\t\t\treturn True\n\tdef find(self, data):",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "def main():\n\tbst = Tree()\n\tprint(bst.insert(10))\n\tprint(bst.insert(5))\n\tbst.insert(2)\n\tbst.insert(7)\n\tbst.preorder()\n\tprint('Height = ', bst.getHeight())\n\tprint('Size = ', bst.getSize())\n\t#bst.postorder()",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\tself.value",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\tself.value = val\n\t\tself.leftChild = None\n\t\tself.rightChild = None\n\tdef insert(self, data):\n\t\tif self.value == data:\n\t\t\treturn False\n\t\telif self.value > data:\n\t\t\tif self.leftChild:\n\t\t\t\treturn self.leftChild.insert(data)\n\t\t\telse:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\tself.leftChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\tself.leftChild = None\n\t\tself.rightChild = None\n\tdef insert(self, data):\n\t\tif self.value == data:\n\t\t\treturn False\n\t\telif self.value > data:\n\t\t\tif self.leftChild:\n\t\t\t\treturn self.leftChild.insert(data)\n\t\t\telse:\n\t\t\t\tself.leftChild = Node(data)",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\tself.rightChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\tself.rightChild = None\n\tdef insert(self, data):\n\t\tif self.value == data:\n\t\t\treturn False\n\t\telif self.value > data:\n\t\t\tif self.leftChild:\n\t\t\t\treturn self.leftChild.insert(data)\n\t\t\telse:\n\t\t\t\tself.leftChild = Node(data)\n\t\t\t\treturn True",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.leftChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tself.leftChild = Node(data)\n\t\t\t\treturn True\n\t\telse:\n\t\t\tif self.rightChild:\n\t\t\t\treturn self.rightChild.insert(data)\n\t\t\telse:\n\t\t\t\tself.rightChild = Node(data)\n\t\t\t\treturn True\n\tdef find(self, data):\n\t\tif(self.value == data):",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.rightChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tself.rightChild = Node(data)\n\t\t\t\treturn True\n\tdef find(self, data):\n\t\tif(self.value == data):\n\t\t\treturn True\n\t\telif self.value > data:\n\t\t\tif self.leftChild:\n\t\t\t\treturn self.leftChild.find(data)\n\t\t\telse:\n\t\t\t\treturn False",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\tself.root",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\tself.root = None\n\tdef insert(self, data):\n\t\tif self.root:\n\t\t\treturn self.root.insert(data)\n\t\telse:\n\t\t\tself.root = Node(data)\n\t\t\treturn True\n\tdef find(self, data):\n\t\tif self.root:\n\t\t\treturn self.root.find(data)",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.root",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\tself.root = Node(data)\n\t\t\treturn True\n\tdef find(self, data):\n\t\tif self.root:\n\t\t\treturn self.root.find(data)\n\t\telse:\n\t\t\treturn False\n\tdef getHeight(self):\n\t\tif self.root:\n\t\t\treturn self.root.getHeight()",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.root",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tself.root = None\n\t\t\telif self.root.leftChild and self.root.rightChild is None:\n\t\t\t\tself.root = self.root.leftChild\n\t\t\telif self.root.leftChild is None and self.root.rightChild:\n\t\t\t\tself.root = self.root.rightChild\n\t\t\telif self.root.leftChild and self.root.rightChild:\n\t\t\t\tdelNodeParent = self.root\n\t\t\t\tdelNode = self.root.rightChild\n\t\t\t\twhile delNode.leftChild:\n\t\t\t\t\tdelNodeParent = delNode",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.root",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tself.root = self.root.leftChild\n\t\t\telif self.root.leftChild is None and self.root.rightChild:\n\t\t\t\tself.root = self.root.rightChild\n\t\t\telif self.root.leftChild and self.root.rightChild:\n\t\t\t\tdelNodeParent = self.root\n\t\t\t\tdelNode = self.root.rightChild\n\t\t\t\twhile delNode.leftChild:\n\t\t\t\t\tdelNodeParent = delNode\n\t\t\t\t\tdelNode = delNode.leftChild\n\t\t\t\tif delNode.rightChild:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.root",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tself.root = self.root.rightChild\n\t\t\telif self.root.leftChild and self.root.rightChild:\n\t\t\t\tdelNodeParent = self.root\n\t\t\t\tdelNode = self.root.rightChild\n\t\t\t\twhile delNode.leftChild:\n\t\t\t\t\tdelNodeParent = delNode\n\t\t\t\t\tdelNode = delNode.leftChild\n\t\t\t\tif delNode.rightChild:\n\t\t\t\t\tif delNodeParent.value > delNode.value:\n\t\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdelNodeParent",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tdelNodeParent = self.root\n\t\t\t\tdelNode = self.root.rightChild\n\t\t\t\twhile delNode.leftChild:\n\t\t\t\t\tdelNodeParent = delNode\n\t\t\t\t\tdelNode = delNode.leftChild\n\t\t\t\tif delNode.rightChild:\n\t\t\t\t\tif delNodeParent.value > delNode.value:\n\t\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild\n\t\t\t\t\telif delNodeParent.value < delNode.value:\n\t\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdelNode",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tdelNode = self.root.rightChild\n\t\t\t\twhile delNode.leftChild:\n\t\t\t\t\tdelNodeParent = delNode\n\t\t\t\t\tdelNode = delNode.leftChild\n\t\t\t\tif delNode.rightChild:\n\t\t\t\t\tif delNodeParent.value > delNode.value:\n\t\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild\n\t\t\t\t\telif delNodeParent.value < delNode.value:\n\t\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild\n\t\t\t\telse:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tdelNodeParent",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\t\tdelNodeParent = delNode\n\t\t\t\t\tdelNode = delNode.leftChild\n\t\t\t\tif delNode.rightChild:\n\t\t\t\t\tif delNodeParent.value > delNode.value:\n\t\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild\n\t\t\t\t\telif delNodeParent.value < delNode.value:\n\t\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild\n\t\t\t\telse:\n\t\t\t\t\tif delNode.value < delNodeParent.value:\n\t\t\t\t\t\tdelNodeParent.leftChild = None",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tdelNode",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\t\tdelNode = delNode.leftChild\n\t\t\t\tif delNode.rightChild:\n\t\t\t\t\tif delNodeParent.value > delNode.value:\n\t\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild\n\t\t\t\t\telif delNodeParent.value < delNode.value:\n\t\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild\n\t\t\t\telse:\n\t\t\t\t\tif delNode.value < delNodeParent.value:\n\t\t\t\t\t\tdelNodeParent.leftChild = None\n\t\t\t\t\telse:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tdelNodeParent.leftChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild\n\t\t\t\t\telif delNodeParent.value < delNode.value:\n\t\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild\n\t\t\t\telse:\n\t\t\t\t\tif delNode.value < delNodeParent.value:\n\t\t\t\t\t\tdelNodeParent.leftChild = None\n\t\t\t\t\telse:\n\t\t\t\t\t\tdelNodeParent.rightChild = None\n\t\t\t\tself.root.value = delNode.value\n\t\t\treturn True",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tdelNodeParent.rightChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild\n\t\t\t\telse:\n\t\t\t\t\tif delNode.value < delNodeParent.value:\n\t\t\t\t\t\tdelNodeParent.leftChild = None\n\t\t\t\t\telse:\n\t\t\t\t\t\tdelNodeParent.rightChild = None\n\t\t\t\tself.root.value = delNode.value\n\t\t\treturn True\n\t\tparent = None\n\t\tnode = self.root",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tdelNodeParent.leftChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\t\t\tdelNodeParent.leftChild = None\n\t\t\t\t\telse:\n\t\t\t\t\t\tdelNodeParent.rightChild = None\n\t\t\t\tself.root.value = delNode.value\n\t\t\treturn True\n\t\tparent = None\n\t\tnode = self.root\n\t\t# find node to remove\n\t\twhile node and node.value != data:\n\t\t\tparent = node",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tdelNodeParent.rightChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\t\t\tdelNodeParent.rightChild = None\n\t\t\t\tself.root.value = delNode.value\n\t\t\treturn True\n\t\tparent = None\n\t\tnode = self.root\n\t\t# find node to remove\n\t\twhile node and node.value != data:\n\t\t\tparent = node\n\t\t\tif data < node.value:\n\t\t\t\tnode = node.leftChild",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.root.value",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tself.root.value = delNode.value\n\t\t\treturn True\n\t\tparent = None\n\t\tnode = self.root\n\t\t# find node to remove\n\t\twhile node and node.value != data:\n\t\t\tparent = node\n\t\t\tif data < node.value:\n\t\t\t\tnode = node.leftChild\n\t\t\telif data > node.value:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\tparent",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\tparent = None\n\t\tnode = self.root\n\t\t# find node to remove\n\t\twhile node and node.value != data:\n\t\t\tparent = node\n\t\t\tif data < node.value:\n\t\t\t\tnode = node.leftChild\n\t\t\telif data > node.value:\n\t\t\t\tnode = node.rightChild\n\t\t# case 1: data not found",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\tnode",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\tnode = self.root\n\t\t# find node to remove\n\t\twhile node and node.value != data:\n\t\t\tparent = node\n\t\t\tif data < node.value:\n\t\t\t\tnode = node.leftChild\n\t\t\telif data > node.value:\n\t\t\t\tnode = node.rightChild\n\t\t# case 1: data not found\n\t\tif node is None or node.value != data:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\tparent",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\tparent = node\n\t\t\tif data < node.value:\n\t\t\t\tnode = node.leftChild\n\t\t\telif data > node.value:\n\t\t\t\tnode = node.rightChild\n\t\t# case 1: data not found\n\t\tif node is None or node.value != data:\n\t\t\treturn False\n\t\t# case 2: remove-node has no children\n\t\telif node.leftChild is None and node.rightChild is None:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tnode",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tnode = node.leftChild\n\t\t\telif data > node.value:\n\t\t\t\tnode = node.rightChild\n\t\t# case 1: data not found\n\t\tif node is None or node.value != data:\n\t\t\treturn False\n\t\t# case 2: remove-node has no children\n\t\telif node.leftChild is None and node.rightChild is None:\n\t\t\tif data < parent.value:\n\t\t\t\tparent.leftChild = None",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tnode",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tnode = node.rightChild\n\t\t# case 1: data not found\n\t\tif node is None or node.value != data:\n\t\t\treturn False\n\t\t# case 2: remove-node has no children\n\t\telif node.leftChild is None and node.rightChild is None:\n\t\t\tif data < parent.value:\n\t\t\t\tparent.leftChild = None\n\t\t\telse:\n\t\t\t\tparent.rightChild = None",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tparent.leftChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tparent.leftChild = None\n\t\t\telse:\n\t\t\t\tparent.rightChild = None\n\t\t\treturn True\n\t\t# case 3: remove-node has left child only\n\t\telif node.leftChild and node.rightChild is None:\n\t\t\tif data < parent.value:\n\t\t\t\tparent.leftChild = node.leftChild\n\t\t\telse:\n\t\t\t\tparent.rightChild = node.leftChild",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tparent.rightChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tparent.rightChild = None\n\t\t\treturn True\n\t\t# case 3: remove-node has left child only\n\t\telif node.leftChild and node.rightChild is None:\n\t\t\tif data < parent.value:\n\t\t\t\tparent.leftChild = node.leftChild\n\t\t\telse:\n\t\t\t\tparent.rightChild = node.leftChild\n\t\t\treturn True\n\t\t# case 4: remove-node has right child only",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tparent.leftChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tparent.leftChild = node.leftChild\n\t\t\telse:\n\t\t\t\tparent.rightChild = node.leftChild\n\t\t\treturn True\n\t\t# case 4: remove-node has right child only\n\t\telif node.leftChild is None and node.rightChild:\n\t\t\tif data < parent.value:\n\t\t\t\tparent.leftChild = node.rightChild\n\t\t\telse:\n\t\t\t\tparent.rightChild = node.rightChild",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tparent.rightChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tparent.rightChild = node.leftChild\n\t\t\treturn True\n\t\t# case 4: remove-node has right child only\n\t\telif node.leftChild is None and node.rightChild:\n\t\t\tif data < parent.value:\n\t\t\t\tparent.leftChild = node.rightChild\n\t\t\telse:\n\t\t\t\tparent.rightChild = node.rightChild\n\t\t\treturn True\n\t\t# case 5: remove-node has left and right children",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tparent.leftChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tparent.leftChild = node.rightChild\n\t\t\telse:\n\t\t\t\tparent.rightChild = node.rightChild\n\t\t\treturn True\n\t\t# case 5: remove-node has left and right children\n\t\telse:\n\t\t\tdelNodeParent = node\n\t\t\tdelNode = node.rightChild\n\t\t\twhile delNode.leftChild:\n\t\t\t\tdelNodeParent = delNode",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tparent.rightChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tparent.rightChild = node.rightChild\n\t\t\treturn True\n\t\t# case 5: remove-node has left and right children\n\t\telse:\n\t\t\tdelNodeParent = node\n\t\t\tdelNode = node.rightChild\n\t\t\twhile delNode.leftChild:\n\t\t\t\tdelNodeParent = delNode\n\t\t\t\tdelNode = delNode.leftChild\n\t\t\tnode.value = delNode.value",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\tdelNodeParent",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\tdelNodeParent = node\n\t\t\tdelNode = node.rightChild\n\t\t\twhile delNode.leftChild:\n\t\t\t\tdelNodeParent = delNode\n\t\t\t\tdelNode = delNode.leftChild\n\t\t\tnode.value = delNode.value\n\t\t\tif delNode.rightChild:\n\t\t\t\tif delNodeParent.value > delNode.value:\n\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild\n\t\t\t\telif delNodeParent.value < delNode.value:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\tdelNode",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\tdelNode = node.rightChild\n\t\t\twhile delNode.leftChild:\n\t\t\t\tdelNodeParent = delNode\n\t\t\t\tdelNode = delNode.leftChild\n\t\t\tnode.value = delNode.value\n\t\t\tif delNode.rightChild:\n\t\t\t\tif delNodeParent.value > delNode.value:\n\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild\n\t\t\t\telif delNodeParent.value < delNode.value:\n\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdelNodeParent",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tdelNodeParent = delNode\n\t\t\t\tdelNode = delNode.leftChild\n\t\t\tnode.value = delNode.value\n\t\t\tif delNode.rightChild:\n\t\t\t\tif delNodeParent.value > delNode.value:\n\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild\n\t\t\t\telif delNodeParent.value < delNode.value:\n\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild\n\t\t\telse:\n\t\t\t\tif delNode.value < delNodeParent.value:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdelNode",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\tdelNode = delNode.leftChild\n\t\t\tnode.value = delNode.value\n\t\t\tif delNode.rightChild:\n\t\t\t\tif delNodeParent.value > delNode.value:\n\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild\n\t\t\t\telif delNodeParent.value < delNode.value:\n\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild\n\t\t\telse:\n\t\t\t\tif delNode.value < delNodeParent.value:\n\t\t\t\t\tdelNodeParent.leftChild = None",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\tnode.value",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\tnode.value = delNode.value\n\t\t\tif delNode.rightChild:\n\t\t\t\tif delNodeParent.value > delNode.value:\n\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild\n\t\t\t\telif delNodeParent.value < delNode.value:\n\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild\n\t\t\telse:\n\t\t\t\tif delNode.value < delNodeParent.value:\n\t\t\t\t\tdelNodeParent.leftChild = None\n\t\t\t\telse:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tdelNodeParent.leftChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\t\tdelNodeParent.leftChild = delNode.rightChild\n\t\t\t\telif delNodeParent.value < delNode.value:\n\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild\n\t\t\telse:\n\t\t\t\tif delNode.value < delNodeParent.value:\n\t\t\t\t\tdelNodeParent.leftChild = None\n\t\t\t\telse:\n\t\t\t\t\tdelNodeParent.rightChild = None\n\tdef preorder(self):\n\t\tif self.root is not None:",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tdelNodeParent.rightChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\t\tdelNodeParent.rightChild = delNode.rightChild\n\t\t\telse:\n\t\t\t\tif delNode.value < delNodeParent.value:\n\t\t\t\t\tdelNodeParent.leftChild = None\n\t\t\t\telse:\n\t\t\t\t\tdelNodeParent.rightChild = None\n\tdef preorder(self):\n\t\tif self.root is not None:\n\t\t\tprint(\"PreOrder\")\n\t\t\tself.root.preorder()",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tdelNodeParent.leftChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\t\tdelNodeParent.leftChild = None\n\t\t\t\telse:\n\t\t\t\t\tdelNodeParent.rightChild = None\n\tdef preorder(self):\n\t\tif self.root is not None:\n\t\t\tprint(\"PreOrder\")\n\t\t\tself.root.preorder()\n\tdef postorder(self):\n\t\tif self.root is not None:\n\t\t\tprint(\"PostOrder\")",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tdelNodeParent.rightChild",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\t\t\t\t\tdelNodeParent.rightChild = None\n\tdef preorder(self):\n\t\tif self.root is not None:\n\t\t\tprint(\"PreOrder\")\n\t\t\tself.root.preorder()\n\tdef postorder(self):\n\t\tif self.root is not None:\n\t\t\tprint(\"PostOrder\")\n\t\t\tself.root.postorder()\n\tdef inorder(self):",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\tbst",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\tbst = Tree()\n\tprint(bst.insert(10))\n\tprint(bst.insert(5))\n\tbst.insert(2)\n\tbst.insert(7)\n\tbst.preorder()\n\tprint('Height = ', bst.getHeight())\n\tprint('Size = ', bst.getSize())\n\t#bst.postorder()\n\t#bst.inorder()",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\tprint('Height",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\tprint('Height = ', bst.getHeight())\n\tprint('Size = ', bst.getSize())\n\t#bst.postorder()\n\t#bst.inorder()\n\tprint(bst.remove(10))\n\tbst.preorder()\nmain()",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "\tprint('Size",
        "kind": 5,
        "importPath": "all files.c++.other.bst",
        "description": "all files.c++.other.bst",
        "peekOfCode": "\tprint('Size = ', bst.getSize())\n\t#bst.postorder()\n\t#bst.inorder()\n\tprint(bst.remove(10))\n\tbst.preorder()\nmain()",
        "detail": "all files.c++.other.bst",
        "documentation": {}
    },
    {
        "label": "Vertex",
        "kind": 6,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "class Vertex:\n    def __init__(self, n):\n        self.name = n\n        self.neighbors = list()\n        self.discovery = 0\n        self.finish = 0\n        self.color = 'black'\n\tdef add_neighbor(self, v):\n        if v not in self.neighbors:\n            self.neighbors.append(v)",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "class Graph:\n\tvertices = {}\n\ttime = 0\n\tdef add_vertex(self, vertex):\n\t\tif isinstance(vertex, Vertex) and vertex.name not in self.vertices:\n\t\t\tself.vertices[vertex.name] = vertex\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\tdef add_edge(self, u, v):",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "\tvertices",
        "kind": 5,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "\tvertices = {}\n\ttime = 0\n\tdef add_vertex(self, vertex):\n\t\tif isinstance(vertex, Vertex) and vertex.name not in self.vertices:\n\t\t\tself.vertices[vertex.name] = vertex\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\tdef add_edge(self, u, v):\n\t\tif u in self.vertices and v in self.vertices:",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "\ttime",
        "kind": 5,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "\ttime = 0\n\tdef add_vertex(self, vertex):\n\t\tif isinstance(vertex, Vertex) and vertex.name not in self.vertices:\n\t\t\tself.vertices[vertex.name] = vertex\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\tdef add_edge(self, u, v):\n\t\tif u in self.vertices and v in self.vertices:\n\t\t\tfor key, value in self.vertices.items():",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.vertices[vertex.name]",
        "kind": 5,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "\t\t\tself.vertices[vertex.name] = vertex\n\t\t\treturn True\n\t\telse:\n\t\t\treturn False\n\tdef add_edge(self, u, v):\n\t\tif u in self.vertices and v in self.vertices:\n\t\t\tfor key, value in self.vertices.items():\n\t\t\t\tif key == u:\n\t\t\t\t\tvalue.add_neighbor(v)\n\t\t\t\tif key == v:",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "\t\tvertex.color",
        "kind": 5,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "\t\tvertex.color = 'red'\n\t\tvertex.discovery = time\n\t\ttime += 1\n\t\tfor v in vertex.neighbors:\n\t\t\tif self.vertices[v].color == 'black':\n\t\t\t\tself._dfs(self.vertices[v])\n\t\tvertex.color = 'blue'\n\t\tvertex.finish = time\n\t\ttime += 1\n\tdef dfs(self, vertex):",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "\t\tvertex.discovery",
        "kind": 5,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "\t\tvertex.discovery = time\n\t\ttime += 1\n\t\tfor v in vertex.neighbors:\n\t\t\tif self.vertices[v].color == 'black':\n\t\t\t\tself._dfs(self.vertices[v])\n\t\tvertex.color = 'blue'\n\t\tvertex.finish = time\n\t\ttime += 1\n\tdef dfs(self, vertex):\n\t\tglobal time",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "\t\tvertex.color",
        "kind": 5,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "\t\tvertex.color = 'blue'\n\t\tvertex.finish = time\n\t\ttime += 1\n\tdef dfs(self, vertex):\n\t\tglobal time\n\t\ttime = 1\n\t\tself._dfs(vertex)\ng = Graph()\n# print(str(len(g.vertices)))\na = Vertex('A')",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "\t\tvertex.finish",
        "kind": 5,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "\t\tvertex.finish = time\n\t\ttime += 1\n\tdef dfs(self, vertex):\n\t\tglobal time\n\t\ttime = 1\n\t\tself._dfs(vertex)\ng = Graph()\n# print(str(len(g.vertices)))\na = Vertex('A')\ng.add_vertex(a)",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "\t\ttime",
        "kind": 5,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "\t\ttime = 1\n\t\tself._dfs(vertex)\ng = Graph()\n# print(str(len(g.vertices)))\na = Vertex('A')\ng.add_vertex(a)\ng.add_vertex(Vertex('B'))\nfor i in range(ord('A'), ord('K')):\n\tg.add_vertex(Vertex(chr(i)))\nedges = ['AB', 'AE', 'BF', 'CG', 'DE', 'DH', 'EH', 'FG', 'FI', 'FJ', 'GJ', 'HI']",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "g",
        "kind": 5,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "g = Graph()\n# print(str(len(g.vertices)))\na = Vertex('A')\ng.add_vertex(a)\ng.add_vertex(Vertex('B'))\nfor i in range(ord('A'), ord('K')):\n\tg.add_vertex(Vertex(chr(i)))\nedges = ['AB', 'AE', 'BF', 'CG', 'DE', 'DH', 'EH', 'FG', 'FI', 'FJ', 'GJ', 'HI']\nfor edge in edges:\n\tg.add_edge(edge[:1], edge[1:])",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "a = Vertex('A')\ng.add_vertex(a)\ng.add_vertex(Vertex('B'))\nfor i in range(ord('A'), ord('K')):\n\tg.add_vertex(Vertex(chr(i)))\nedges = ['AB', 'AE', 'BF', 'CG', 'DE', 'DH', 'EH', 'FG', 'FI', 'FJ', 'GJ', 'HI']\nfor edge in edges:\n\tg.add_edge(edge[:1], edge[1:])\ng.dfs(a)\ng.print_graph()",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": "all files.c++.other.depthfirstsearch",
        "description": "all files.c++.other.depthfirstsearch",
        "peekOfCode": "edges = ['AB', 'AE', 'BF', 'CG', 'DE', 'DH', 'EH', 'FG', 'FI', 'FJ', 'GJ', 'HI']\nfor edge in edges:\n\tg.add_edge(edge[:1], edge[1:])\ng.dfs(a)\ng.print_graph()",
        "detail": "all files.c++.other.depthfirstsearch",
        "documentation": {}
    },
    {
        "label": "this_fails",
        "kind": 2,
        "importPath": "all files.c++.other.exceptionhandiling",
        "description": "all files.c++.other.exceptionhandiling",
        "peekOfCode": "def this_fails():\n\tx = 1/0\ntry:\n\tthis_fails()\nexcept ZeroDivisionError as err:\n\tprint('Handling run-time error:', err)\ndef divide_me(n):\n\tx = 1/n\ni = int(input('enter a number '))\ntry:",
        "detail": "all files.c++.other.exceptionhandiling",
        "documentation": {}
    },
    {
        "label": "divide_me",
        "kind": 2,
        "importPath": "all files.c++.other.exceptionhandiling",
        "description": "all files.c++.other.exceptionhandiling",
        "peekOfCode": "def divide_me(n):\n\tx = 1/n\ni = int(input('enter a number '))\ntry:\n\tdivide_me(i)\nexcept Exception as e:\n\tprint(e)  # this will print the error msg but don't kill the execution of program\nelse:\n\tprint('Your Code Run Successfully') # this will execute if divide_me(i) run sucessfully without an error\nfinally:",
        "detail": "all files.c++.other.exceptionhandiling",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "all files.c++.other.exceptionhandiling",
        "description": "all files.c++.other.exceptionhandiling",
        "peekOfCode": "filename = 'exception_data.txt'\n# Outer try block catches file name or file doesn't exist errors.\ntry:\n\twith open(filename) as fin:\n\t\tfor line in fin:\n\t\t\t# print(line)\n\t\t\titems = line.split(',')\n\t\t\ttotal = 0\n\t\t\t# Inner try bock catches integer conversion errors.\n\t\t\ttry:",
        "detail": "all files.c++.other.exceptionhandiling",
        "documentation": {}
    },
    {
        "label": "\t\t\titems",
        "kind": 5,
        "importPath": "all files.c++.other.exceptionhandiling",
        "description": "all files.c++.other.exceptionhandiling",
        "peekOfCode": "\t\t\titems = line.split(',')\n\t\t\ttotal = 0\n\t\t\t# Inner try bock catches integer conversion errors.\n\t\t\ttry:\n\t\t\t\tfor item in items:\n\t\t\t\t\tnum = int(item)\n\t\t\t\t\ttotal += num\n\t\t\t\tprint('Total = ' + str(total))\n\t\t\texcept:\n\t\t\t\tprint('Error converting to integer. ', items)",
        "detail": "all files.c++.other.exceptionhandiling",
        "documentation": {}
    },
    {
        "label": "\t\t\ttotal",
        "kind": 5,
        "importPath": "all files.c++.other.exceptionhandiling",
        "description": "all files.c++.other.exceptionhandiling",
        "peekOfCode": "\t\t\ttotal = 0\n\t\t\t# Inner try bock catches integer conversion errors.\n\t\t\ttry:\n\t\t\t\tfor item in items:\n\t\t\t\t\tnum = int(item)\n\t\t\t\t\ttotal += num\n\t\t\t\tprint('Total = ' + str(total))\n\t\t\texcept:\n\t\t\t\tprint('Error converting to integer. ', items)\nexcept:",
        "detail": "all files.c++.other.exceptionhandiling",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tnum",
        "kind": 5,
        "importPath": "all files.c++.other.exceptionhandiling",
        "description": "all files.c++.other.exceptionhandiling",
        "peekOfCode": "\t\t\t\t\tnum = int(item)\n\t\t\t\t\ttotal += num\n\t\t\t\tprint('Total = ' + str(total))\n\t\t\texcept:\n\t\t\t\tprint('Error converting to integer. ', items)\nexcept:\n    print('Error opening file. ' + filename)\nfinally:\n\tprint('This is our optional finally block. Code here will execute no matter what.')\n# Second example: name Error type in except block; call function from try block.",
        "detail": "all files.c++.other.exceptionhandiling",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tprint('Total",
        "kind": 5,
        "importPath": "all files.c++.other.exceptionhandiling",
        "description": "all files.c++.other.exceptionhandiling",
        "peekOfCode": "\t\t\t\tprint('Total = ' + str(total))\n\t\t\texcept:\n\t\t\t\tprint('Error converting to integer. ', items)\nexcept:\n    print('Error opening file. ' + filename)\nfinally:\n\tprint('This is our optional finally block. Code here will execute no matter what.')\n# Second example: name Error type in except block; call function from try block.\ndef this_fails():\n\tx = 1/0",
        "detail": "all files.c++.other.exceptionhandiling",
        "documentation": {}
    },
    {
        "label": "\tx",
        "kind": 5,
        "importPath": "all files.c++.other.exceptionhandiling",
        "description": "all files.c++.other.exceptionhandiling",
        "peekOfCode": "\tx = 1/0\ntry:\n\tthis_fails()\nexcept ZeroDivisionError as err:\n\tprint('Handling run-time error:', err)\ndef divide_me(n):\n\tx = 1/n\ni = int(input('enter a number '))\ntry:\n\tdivide_me(i)",
        "detail": "all files.c++.other.exceptionhandiling",
        "documentation": {}
    },
    {
        "label": "\tx",
        "kind": 5,
        "importPath": "all files.c++.other.exceptionhandiling",
        "description": "all files.c++.other.exceptionhandiling",
        "peekOfCode": "\tx = 1/n\ni = int(input('enter a number '))\ntry:\n\tdivide_me(i)\nexcept Exception as e:\n\tprint(e)  # this will print the error msg but don't kill the execution of program\nelse:\n\tprint('Your Code Run Successfully') # this will execute if divide_me(i) run sucessfully without an error\nfinally:\n\tprint('thanks') # this will execute in every condition",
        "detail": "all files.c++.other.exceptionhandiling",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "all files.c++.other.exceptionhandiling",
        "description": "all files.c++.other.exceptionhandiling",
        "peekOfCode": "i = int(input('enter a number '))\ntry:\n\tdivide_me(i)\nexcept Exception as e:\n\tprint(e)  # this will print the error msg but don't kill the execution of program\nelse:\n\tprint('Your Code Run Successfully') # this will execute if divide_me(i) run sucessfully without an error\nfinally:\n\tprint('thanks') # this will execute in every condition",
        "detail": "all files.c++.other.exceptionhandiling",
        "documentation": {}
    },
    {
        "label": "get_recursive_factorial",
        "kind": 2,
        "importPath": "all files.c++.other.factoral",
        "description": "all files.c++.other.factoral",
        "peekOfCode": "def get_recursive_factorial(n):\n    if n < 0:\n        return -1\n    elif n < 2:\n        return 1\n    else:\n        return n * get_recursive_factorial(n-1)\ndef get_iterative_factorial(n):\n\tif n < 0:\n\t\treturn -1",
        "detail": "all files.c++.other.factoral",
        "documentation": {}
    },
    {
        "label": "get_iterative_factorial",
        "kind": 2,
        "importPath": "all files.c++.other.factoral",
        "description": "all files.c++.other.factoral",
        "peekOfCode": "def get_iterative_factorial(n):\n\tif n < 0:\n\t\treturn -1\n\telse:\n\t\tfact = 1\n\t\tfor i in range(1, n+1):\n\t\t\tfact *= i\n\t\treturn fact\nprint(\"input should be an integer\")\t\t\nprint(get_recursive_factorial(6))",
        "detail": "all files.c++.other.factoral",
        "documentation": {}
    },
    {
        "label": "\t\tfact",
        "kind": 5,
        "importPath": "all files.c++.other.factoral",
        "description": "all files.c++.other.factoral",
        "peekOfCode": "\t\tfact = 1\n\t\tfor i in range(1, n+1):\n\t\t\tfact *= i\n\t\treturn fact\nprint(\"input should be an integer\")\t\t\nprint(get_recursive_factorial(6))\nprint(get_iterative_factorial(6))",
        "detail": "all files.c++.other.factoral",
        "documentation": {}
    },
    {
        "label": "infile",
        "kind": 5,
        "importPath": "all files.c++.other.file_ops",
        "description": "all files.c++.other.file_ops",
        "peekOfCode": "infile = \"inputFile.txt\"\noutfile = \"outputFile.txt\"\n# print each line, as read in\nwith open(infile) as f1:\n\tfor line in f1:\n\t\tprint (line)\nprint (\"\\n*******************\")\n# print each line, stripping last newline character\nwith open(infile) as f1:\n\tfor line in f1:",
        "detail": "all files.c++.other.file_ops",
        "documentation": {}
    },
    {
        "label": "outfile",
        "kind": 5,
        "importPath": "all files.c++.other.file_ops",
        "description": "all files.c++.other.file_ops",
        "peekOfCode": "outfile = \"outputFile.txt\"\n# print each line, as read in\nwith open(infile) as f1:\n\tfor line in f1:\n\t\tprint (line)\nprint (\"\\n*******************\")\n# print each line, stripping last newline character\nwith open(infile) as f1:\n\tfor line in f1:\n\t\tprint (line[:-1])",
        "detail": "all files.c++.other.file_ops",
        "documentation": {}
    },
    {
        "label": "\t\trow",
        "kind": 5,
        "importPath": "all files.c++.other.file_ops",
        "description": "all files.c++.other.file_ops",
        "peekOfCode": "\t\trow = line.split(\",\")\n\t\tprint(row[0])\nprint (\"\\n*******************\")\n# print each line as a formatted list\nwith open(infile) as f1:\n\tfor line in f1:\n\t\trow = line.split(\",\")\n\t\tprint(row[0] + \"\\n-----------------\")\n\t\tfor i in range(1, len(row)):\n\t\t\tprint(row[i])",
        "detail": "all files.c++.other.file_ops",
        "documentation": {}
    },
    {
        "label": "\t\trow",
        "kind": 5,
        "importPath": "all files.c++.other.file_ops",
        "description": "all files.c++.other.file_ops",
        "peekOfCode": "\t\trow = line.split(\",\")\n\t\tprint(row[0] + \"\\n-----------------\")\n\t\tfor i in range(1, len(row)):\n\t\t\tprint(row[i])\nprint (\"\\n*******************\")\n# add each line to a list\ncars = list()\nwith open(infile) as f1:\n\tfor line in f1:\n\t\trow = line.split(\",\")",
        "detail": "all files.c++.other.file_ops",
        "documentation": {}
    },
    {
        "label": "cars",
        "kind": 5,
        "importPath": "all files.c++.other.file_ops",
        "description": "all files.c++.other.file_ops",
        "peekOfCode": "cars = list()\nwith open(infile) as f1:\n\tfor line in f1:\n\t\trow = line.split(\",\")\n\t\tcars.append(row)\n\tprint(cars[0][0])\n# write Makes only to outputFile\nwith open(outfile, 'a') as f2:\n\tfor car in cars:\n\t\tf2.write(car[0] + \"\\n\")",
        "detail": "all files.c++.other.file_ops",
        "documentation": {}
    },
    {
        "label": "\t\trow",
        "kind": 5,
        "importPath": "all files.c++.other.file_ops",
        "description": "all files.c++.other.file_ops",
        "peekOfCode": "\t\trow = line.split(\",\")\n\t\tcars.append(row)\n\tprint(cars[0][0])\n# write Makes only to outputFile\nwith open(outfile, 'a') as f2:\n\tfor car in cars:\n\t\tf2.write(car[0] + \"\\n\")\n# write list of row-lists to outputFile\nwith open(outfile, 'a') as f2:\n\tfor car in cars:",
        "detail": "all files.c++.other.file_ops",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 2,
        "importPath": "all files.c++.other.gcf",
        "description": "all files.c++.other.gcf",
        "peekOfCode": "def gcf (num1, num2):\n\tif num1 > num2:\n\t\tnum1, num2 = num2, num1\n\tfor x in range (num1, 0, -1):\n\t\tif num1 % x == 0 and num2 % x == 0:\n\t\t\treturn x\nnum1 = (random.randint(0,9))\nnum2 = (random.randint(0,9))\nprint (str(gcf(num1, num2)))",
        "detail": "all files.c++.other.gcf",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "all files.c++.other.gcf",
        "description": "all files.c++.other.gcf",
        "peekOfCode": "num1 = (random.randint(0,9))\nnum2 = (random.randint(0,9))\nprint (str(gcf(num1, num2)))",
        "detail": "all files.c++.other.gcf",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "all files.c++.other.gcf",
        "description": "all files.c++.other.gcf",
        "peekOfCode": "num2 = (random.randint(0,9))\nprint (str(gcf(num1, num2)))",
        "detail": "all files.c++.other.gcf",
        "documentation": {}
    },
    {
        "label": "hexToDec",
        "kind": 2,
        "importPath": "all files.c++.other.hextodec",
        "description": "all files.c++.other.hextodec",
        "peekOfCode": "def hexToDec(hexNum):\n\tdecNum = 0\n\tpower = 0\n\tfor digit in range(len(hexNum), 0, -1):\n\t\tdecNum = decNum + 16 ** power * __getDecDigit(hexNum[digit-1])\n\t\tpower += 1\n\tprint(str(decNum))\nhexToDec(\"A5\")",
        "detail": "all files.c++.other.hextodec",
        "documentation": {}
    },
    {
        "label": "\tdigits",
        "kind": 5,
        "importPath": "all files.c++.other.hextodec",
        "description": "all files.c++.other.hextodec",
        "peekOfCode": "\tdigits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', \n\t\t'A', 'B', 'C', 'D', 'E', 'F']\n\tfor x in range(len(digits)):\n\t\tif digit == digits[x]:\n\t\t\treturn x\ndef hexToDec(hexNum):\n\tdecNum = 0\n\tpower = 0\n\tfor digit in range(len(hexNum), 0, -1):\n\t\tdecNum = decNum + 16 ** power * __getDecDigit(hexNum[digit-1])",
        "detail": "all files.c++.other.hextodec",
        "documentation": {}
    },
    {
        "label": "\tdecNum",
        "kind": 5,
        "importPath": "all files.c++.other.hextodec",
        "description": "all files.c++.other.hextodec",
        "peekOfCode": "\tdecNum = 0\n\tpower = 0\n\tfor digit in range(len(hexNum), 0, -1):\n\t\tdecNum = decNum + 16 ** power * __getDecDigit(hexNum[digit-1])\n\t\tpower += 1\n\tprint(str(decNum))\nhexToDec(\"A5\")",
        "detail": "all files.c++.other.hextodec",
        "documentation": {}
    },
    {
        "label": "\tpower",
        "kind": 5,
        "importPath": "all files.c++.other.hextodec",
        "description": "all files.c++.other.hextodec",
        "peekOfCode": "\tpower = 0\n\tfor digit in range(len(hexNum), 0, -1):\n\t\tdecNum = decNum + 16 ** power * __getDecDigit(hexNum[digit-1])\n\t\tpower += 1\n\tprint(str(decNum))\nhexToDec(\"A5\")",
        "detail": "all files.c++.other.hextodec",
        "documentation": {}
    },
    {
        "label": "\t\tdecNum",
        "kind": 5,
        "importPath": "all files.c++.other.hextodec",
        "description": "all files.c++.other.hextodec",
        "peekOfCode": "\t\tdecNum = decNum + 16 ** power * __getDecDigit(hexNum[digit-1])\n\t\tpower += 1\n\tprint(str(decNum))\nhexToDec(\"A5\")",
        "detail": "all files.c++.other.hextodec",
        "documentation": {}
    },
    {
        "label": "lcm",
        "kind": 2,
        "importPath": "all files.c++.other.lcm",
        "description": "all files.c++.other.lcm",
        "peekOfCode": "def lcm(num1, num2):\n\tif num1 > num2:\n\t\tnum1, num2 = num2, num1\n\tfor x in range (num2, num1 * num2 + 1, num2):\n\t\tif x % num1 == 0:\n\t\t\treturn x\n# list of 3 numbers\ndef lcm3(nums):\n\tnums.sort()\n\tworst = nums[0]*nums[1]*nums[2]",
        "detail": "all files.c++.other.lcm",
        "documentation": {}
    },
    {
        "label": "lcm3",
        "kind": 2,
        "importPath": "all files.c++.other.lcm",
        "description": "all files.c++.other.lcm",
        "peekOfCode": "def lcm3(nums):\n\tnums.sort()\n\tworst = nums[0]*nums[1]*nums[2]\n\tfor x in range(nums[2], worst + 1, nums[2]):\n\t\tif x % nums[0] == 0 and x % nums[1] == 0:\n\t\t\treturn x\nprint(str(lcm(7, 12)))\nnums = [3, 2, 16]\nprint(str(lcm3(nums)))",
        "detail": "all files.c++.other.lcm",
        "documentation": {}
    },
    {
        "label": "\tworst",
        "kind": 5,
        "importPath": "all files.c++.other.lcm",
        "description": "all files.c++.other.lcm",
        "peekOfCode": "\tworst = nums[0]*nums[1]*nums[2]\n\tfor x in range(nums[2], worst + 1, nums[2]):\n\t\tif x % nums[0] == 0 and x % nums[1] == 0:\n\t\t\treturn x\nprint(str(lcm(7, 12)))\nnums = [3, 2, 16]\nprint(str(lcm3(nums)))",
        "detail": "all files.c++.other.lcm",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "all files.c++.other.lcm",
        "description": "all files.c++.other.lcm",
        "peekOfCode": "nums = [3, 2, 16]\nprint(str(lcm3(nums)))",
        "detail": "all files.c++.other.lcm",
        "documentation": {}
    },
    {
        "label": "under_10",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "under_10 = [x for x in range(10)]\nprint('under_10: ' + str(under_10))\nsquares = [x**2 for x in under_10]\nprint('squares: ' + str(squares))\nodds =  [x for x in range(10) if x%2 == 1]\nprint('odds: ' + str(odds))\nten_x = [x * 10 for x in range(10)]\nprint('ten_x: ' + str(ten_x))\n# get all numbers from a string\ns = 'I love 2 go t0 the store 7 times a w3ek.'",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "squares",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "squares = [x**2 for x in under_10]\nprint('squares: ' + str(squares))\nodds =  [x for x in range(10) if x%2 == 1]\nprint('odds: ' + str(odds))\nten_x = [x * 10 for x in range(10)]\nprint('ten_x: ' + str(ten_x))\n# get all numbers from a string\ns = 'I love 2 go t0 the store 7 times a w3ek.'\nnums = [x for x in s if x.isnumeric()]\nprint('nums: ' + ''.join(nums))",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "odds",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "odds =  [x for x in range(10) if x%2 == 1]\nprint('odds: ' + str(odds))\nten_x = [x * 10 for x in range(10)]\nprint('ten_x: ' + str(ten_x))\n# get all numbers from a string\ns = 'I love 2 go t0 the store 7 times a w3ek.'\nnums = [x for x in s if x.isnumeric()]\nprint('nums: ' + ''.join(nums))\n# get index of a list item\nnames = ['Cosmo', 'Pedro', 'Anu', 'Ray']",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "ten_x",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "ten_x = [x * 10 for x in range(10)]\nprint('ten_x: ' + str(ten_x))\n# get all numbers from a string\ns = 'I love 2 go t0 the store 7 times a w3ek.'\nnums = [x for x in s if x.isnumeric()]\nprint('nums: ' + ''.join(nums))\n# get index of a list item\nnames = ['Cosmo', 'Pedro', 'Anu', 'Ray']\nidx = [k for k, v in enumerate(names) if v == 'Anu']\nprint('index = ' + str(idx[0]))",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "s = 'I love 2 go t0 the store 7 times a w3ek.'\nnums = [x for x in s if x.isnumeric()]\nprint('nums: ' + ''.join(nums))\n# get index of a list item\nnames = ['Cosmo', 'Pedro', 'Anu', 'Ray']\nidx = [k for k, v in enumerate(names) if v == 'Anu']\nprint('index = ' + str(idx[0]))\n# delete an item from a list\nletters = [x for x in 'ABCDEF']\nrandom.shuffle(letters)",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "nums = [x for x in s if x.isnumeric()]\nprint('nums: ' + ''.join(nums))\n# get index of a list item\nnames = ['Cosmo', 'Pedro', 'Anu', 'Ray']\nidx = [k for k, v in enumerate(names) if v == 'Anu']\nprint('index = ' + str(idx[0]))\n# delete an item from a list\nletters = [x for x in 'ABCDEF']\nrandom.shuffle(letters)\nletrs = [a for a in letters if a != 'C']",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "names = ['Cosmo', 'Pedro', 'Anu', 'Ray']\nidx = [k for k, v in enumerate(names) if v == 'Anu']\nprint('index = ' + str(idx[0]))\n# delete an item from a list\nletters = [x for x in 'ABCDEF']\nrandom.shuffle(letters)\nletrs = [a for a in letters if a != 'C']\nprint(letters, letrs)\n# if-else condition in a comprehension (must come before iteration)\nnums = [5, 3, 10, 18, 6, 7]",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "idx",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "idx = [k for k, v in enumerate(names) if v == 'Anu']\nprint('index = ' + str(idx[0]))\n# delete an item from a list\nletters = [x for x in 'ABCDEF']\nrandom.shuffle(letters)\nletrs = [a for a in letters if a != 'C']\nprint(letters, letrs)\n# if-else condition in a comprehension (must come before iteration)\nnums = [5, 3, 10, 18, 6, 7]\nnew_list = [x if x%2 == 0 else 10*x for x in nums]",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "print('index",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "print('index = ' + str(idx[0]))\n# delete an item from a list\nletters = [x for x in 'ABCDEF']\nrandom.shuffle(letters)\nletrs = [a for a in letters if a != 'C']\nprint(letters, letrs)\n# if-else condition in a comprehension (must come before iteration)\nnums = [5, 3, 10, 18, 6, 7]\nnew_list = [x if x%2 == 0 else 10*x for x in nums]\nprint('new list: ' + str(new_list))",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "letters = [x for x in 'ABCDEF']\nrandom.shuffle(letters)\nletrs = [a for a in letters if a != 'C']\nprint(letters, letrs)\n# if-else condition in a comprehension (must come before iteration)\nnums = [5, 3, 10, 18, 6, 7]\nnew_list = [x if x%2 == 0 else 10*x for x in nums]\nprint('new list: ' + str(new_list))\n# nested loop iteration for 2D list\na = [[1,2],[3,4]]",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "letrs",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "letrs = [a for a in letters if a != 'C']\nprint(letters, letrs)\n# if-else condition in a comprehension (must come before iteration)\nnums = [5, 3, 10, 18, 6, 7]\nnew_list = [x if x%2 == 0 else 10*x for x in nums]\nprint('new list: ' + str(new_list))\n# nested loop iteration for 2D list\na = [[1,2],[3,4]]\nnew_list = [x for b in a for x in b]\nprint(new_list)",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "nums = [5, 3, 10, 18, 6, 7]\nnew_list = [x if x%2 == 0 else 10*x for x in nums]\nprint('new list: ' + str(new_list))\n# nested loop iteration for 2D list\na = [[1,2],[3,4]]\nnew_list = [x for b in a for x in b]\nprint(new_list)",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "new_list = [x if x%2 == 0 else 10*x for x in nums]\nprint('new list: ' + str(new_list))\n# nested loop iteration for 2D list\na = [[1,2],[3,4]]\nnew_list = [x for b in a for x in b]\nprint(new_list)",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "a = [[1,2],[3,4]]\nnew_list = [x for b in a for x in b]\nprint(new_list)",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "new_list",
        "kind": 5,
        "importPath": "all files.c++.other.listcomprehentions",
        "description": "all files.c++.other.listcomprehentions",
        "peekOfCode": "new_list = [x for b in a for x in b]\nprint(new_list)",
        "detail": "all files.c++.other.listcomprehentions",
        "documentation": {}
    },
    {
        "label": "MaxHeap",
        "kind": 6,
        "importPath": "all files.c++.other.maxheap",
        "description": "all files.c++.other.maxheap",
        "peekOfCode": "class MaxHeap:\n    def __init__(self, items=[]):\n        super().__init__()\n        self.heap = [0]\n        for item in items:\n            self.heap.append(item)\n            self.__floatUp(len(self.heap) - 1)\n    def push(self, data):\n        self.heap.append(data)\n        self.__floatUp(len(self.heap) - 1)",
        "detail": "all files.c++.other.maxheap",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "all files.c++.other.maxheap",
        "description": "all files.c++.other.maxheap",
        "peekOfCode": "m = MaxHeap([95, 3, 21])\nm.push(10)\nprint(m)\nprint(m.pop())\nprint(m.peek())",
        "detail": "all files.c++.other.maxheap",
        "documentation": {}
    },
    {
        "label": "in_square",
        "kind": 5,
        "importPath": "all files.c++.other.pi",
        "description": "all files.c++.other.pi",
        "peekOfCode": "in_square = in_circle = pi = 0\nfor i in range(10000000):\n    x = random.random()\n    y = random.random()\n    dist = (x*x + y*y) ** 0.5\n    in_square += 1\n    if dist <= 1.0:\n        in_circle += 1\npi = 4 * in_circle / in_square\nprint(pi)",
        "detail": "all files.c++.other.pi",
        "documentation": {}
    },
    {
        "label": "pi",
        "kind": 5,
        "importPath": "all files.c++.other.pi",
        "description": "all files.c++.other.pi",
        "peekOfCode": "pi = 4 * in_circle / in_square\nprint(pi)",
        "detail": "all files.c++.other.pi",
        "documentation": {}
    },
    {
        "label": "max",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "max = int(input(\"Find primes up to what number? : \"))\nprimeList = []\n#for loop for checking each number\nfor x in range(2, max + 1):\n\tisPrime = True\n\tindex = 0\n\troot = int(x ** 0.5) + 1\n\twhile index < len(primeList) and primeList[index] <= root:\n\t\tif x % primeList[index] == 0:\n\t\t\tisPrime = False",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "primeList",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "primeList = []\n#for loop for checking each number\nfor x in range(2, max + 1):\n\tisPrime = True\n\tindex = 0\n\troot = int(x ** 0.5) + 1\n\twhile index < len(primeList) and primeList[index] <= root:\n\t\tif x % primeList[index] == 0:\n\t\t\tisPrime = False\n\t\t\tbreak",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "\tisPrime",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "\tisPrime = True\n\tindex = 0\n\troot = int(x ** 0.5) + 1\n\twhile index < len(primeList) and primeList[index] <= root:\n\t\tif x % primeList[index] == 0:\n\t\t\tisPrime = False\n\t\t\tbreak\n\t\tindex += 1\n\tif isPrime:\n\t\tprimeList.append(x)",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "\tindex",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "\tindex = 0\n\troot = int(x ** 0.5) + 1\n\twhile index < len(primeList) and primeList[index] <= root:\n\t\tif x % primeList[index] == 0:\n\t\t\tisPrime = False\n\t\t\tbreak\n\t\tindex += 1\n\tif isPrime:\n\t\tprimeList.append(x)\nprint(primeList)",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "\troot",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "\troot = int(x ** 0.5) + 1\n\twhile index < len(primeList) and primeList[index] <= root:\n\t\tif x % primeList[index] == 0:\n\t\t\tisPrime = False\n\t\t\tbreak\n\t\tindex += 1\n\tif isPrime:\n\t\tprimeList.append(x)\nprint(primeList)\n#-------------------------------------------------------------",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "\t\t\tisPrime",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "\t\t\tisPrime = False\n\t\t\tbreak\n\t\tindex += 1\n\tif isPrime:\n\t\tprimeList.append(x)\nprint(primeList)\n#-------------------------------------------------------------\n# prime number calculator: find the first n primes\ncount = int(input(\"Find how many primes?: \"))\nprimeList = []",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "count = int(input(\"Find how many primes?: \"))\nprimeList = []\nx = 2\nwhile len(primeList) < count:\n\tisPrime = True\n\tindex = 0\n\troot = int(x ** 0.5) + 1\n\twhile index < len(primeList) and primeList[index] <= root:\n\t\tif x % primeList[index] == 0:\n\t\t\tisPrime = False",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "primeList",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "primeList = []\nx = 2\nwhile len(primeList) < count:\n\tisPrime = True\n\tindex = 0\n\troot = int(x ** 0.5) + 1\n\twhile index < len(primeList) and primeList[index] <= root:\n\t\tif x % primeList[index] == 0:\n\t\t\tisPrime = False\n\t\t\tbreak",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "x = 2\nwhile len(primeList) < count:\n\tisPrime = True\n\tindex = 0\n\troot = int(x ** 0.5) + 1\n\twhile index < len(primeList) and primeList[index] <= root:\n\t\tif x % primeList[index] == 0:\n\t\t\tisPrime = False\n\t\t\tbreak\n\t\tindex += 1",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "\tisPrime",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "\tisPrime = True\n\tindex = 0\n\troot = int(x ** 0.5) + 1\n\twhile index < len(primeList) and primeList[index] <= root:\n\t\tif x % primeList[index] == 0:\n\t\t\tisPrime = False\n\t\t\tbreak\n\t\tindex += 1\n\tif isPrime:\n\t\tprimeList.append(x)",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "\tindex",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "\tindex = 0\n\troot = int(x ** 0.5) + 1\n\twhile index < len(primeList) and primeList[index] <= root:\n\t\tif x % primeList[index] == 0:\n\t\t\tisPrime = False\n\t\t\tbreak\n\t\tindex += 1\n\tif isPrime:\n\t\tprimeList.append(x)\n\tx += 1",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "\troot",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "\troot = int(x ** 0.5) + 1\n\twhile index < len(primeList) and primeList[index] <= root:\n\t\tif x % primeList[index] == 0:\n\t\t\tisPrime = False\n\t\t\tbreak\n\t\tindex += 1\n\tif isPrime:\n\t\tprimeList.append(x)\n\tx += 1\nprint(primeList)",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "\t\t\tisPrime",
        "kind": 5,
        "importPath": "all files.c++.other.prime",
        "description": "all files.c++.other.prime",
        "peekOfCode": "\t\t\tisPrime = False\n\t\t\tbreak\n\t\tindex += 1\n\tif isPrime:\n\t\tprimeList.append(x)\n\tx += 1\nprint(primeList)",
        "detail": "all files.c++.other.prime",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "all files.c++.other.qeuesimplementation",
        "description": "all files.c++.other.qeuesimplementation",
        "peekOfCode": "class Node(object):\n  def __init__(self, item = None):\n    self.item = item\n    self.next = None\n    self.previous = None\nclass Queue(object):\n  def __init__(self):\n    self.length = 0\n    self.head = None\n    self.tail = None",
        "detail": "all files.c++.other.qeuesimplementation",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "all files.c++.other.qeuesimplementation",
        "description": "all files.c++.other.qeuesimplementation",
        "peekOfCode": "class Queue(object):\n  def __init__(self):\n    self.length = 0\n    self.head = None\n    self.tail = None\n  def enqueue(self, x):\n    newNode = Node(x)\n    if self.head == None:\n      self.head = self.tail = newNode\n    else:",
        "detail": "all files.c++.other.qeuesimplementation",
        "documentation": {}
    },
    {
        "label": "Queues",
        "kind": 6,
        "importPath": "all files.c++.other.qeuesimplementation",
        "description": "all files.c++.other.qeuesimplementation",
        "peekOfCode": "class Queues:\n    def __init__(self):\n        self.items = []\n    def is_empty(self):\n        return self.items == []\n    def enqueue(self, data):\n        self.items.append(data)\n    def dequeue(self):\n        return self.items.pop(0)\n    def display(self):",
        "detail": "all files.c++.other.qeuesimplementation",
        "documentation": {}
    },
    {
        "label": "que",
        "kind": 5,
        "importPath": "all files.c++.other.qeuesimplementation",
        "description": "all files.c++.other.qeuesimplementation",
        "peekOfCode": "que = Queues()\nque.enqueue('google')\nque.enqueue('youtube')\nque.enqueue('udemy')\nque.enqueue('udacity')\nque.dequeue()\nque.dequeue()\nprint(que.display())",
        "detail": "all files.c++.other.qeuesimplementation",
        "documentation": {}
    },
    {
        "label": "Stack",
        "kind": 6,
        "importPath": "all files.c++.other.stack",
        "description": "all files.c++.other.stack",
        "peekOfCode": "class Stack():\n    def __init__(self):\n        self.stack = list()\n    def push(self, item):\n        self.stack.append(item)\n    def pop(self):\n        if len(self.stack) > 0:\n            return self.stack.pop()\n        else:\n            return None",
        "detail": "all files.c++.other.stack",
        "documentation": {}
    },
    {
        "label": "my_stack",
        "kind": 5,
        "importPath": "all files.c++.other.stack",
        "description": "all files.c++.other.stack",
        "peekOfCode": "my_stack = Stack()\nmy_stack.push(1)\nmy_stack.push(3)\nprint(my_stack)\nprint(my_stack.pop())\nprint(my_stack.peek())\nprint(my_stack.pop())\nprint(my_stack.pop())",
        "detail": "all files.c++.other.stack",
        "documentation": {}
    },
    {
        "label": "my_stack",
        "kind": 5,
        "importPath": "all files.c++.other.stacksqueusheaps",
        "description": "all files.c++.other.stacksqueusheaps",
        "peekOfCode": "my_stack = list()\nmy_stack.append(random.randint(0,100000))\nmy_stack.append(random.randint(0,100000))\nmy_stack.append(random.randint(0,100000))\nmy_stack.append(random.randint(0,100000))\nprint(my_stack)\nprint(my_stack.pop())\nprint(my_stack.pop())\nprint(my_stack)",
        "detail": "all files.c++.other.stacksqueusheaps",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "all files.c++.other.tempconversion",
        "description": "all files.c++.other.tempconversion",
        "peekOfCode": "def menu():\n\tprint(\"\\n1. Celsius to Fahrenheit\")\n\tprint(\"2. Fahrenheit to Celsius\")\n\tprint(\"3. Exit\")\n\tchoice = int(input(\"Enter a choice: \"))\n\treturn choice\ndef toCelsius(f):\n\treturn int((f - 32) / 1.8)\ndef toFahrenheit(c):\n\treturn int(c * 1.8 + 32)",
        "detail": "all files.c++.other.tempconversion",
        "documentation": {}
    },
    {
        "label": "toCelsius",
        "kind": 2,
        "importPath": "all files.c++.other.tempconversion",
        "description": "all files.c++.other.tempconversion",
        "peekOfCode": "def toCelsius(f):\n\treturn int((f - 32) / 1.8)\ndef toFahrenheit(c):\n\treturn int(c * 1.8 + 32)\ndef main():\n\tchoice = menu()\n\twhile choice != 3:\n\t\tif choice == 1:\n\t\t\tc = eval(input(\"Enter degrees Celsius: \"))\n\t\t\tprint(str(c) + \"C = \" + str(toFahrenheit(c)) + \"F\")",
        "detail": "all files.c++.other.tempconversion",
        "documentation": {}
    },
    {
        "label": "toFahrenheit",
        "kind": 2,
        "importPath": "all files.c++.other.tempconversion",
        "description": "all files.c++.other.tempconversion",
        "peekOfCode": "def toFahrenheit(c):\n\treturn int(c * 1.8 + 32)\ndef main():\n\tchoice = menu()\n\twhile choice != 3:\n\t\tif choice == 1:\n\t\t\tc = eval(input(\"Enter degrees Celsius: \"))\n\t\t\tprint(str(c) + \"C = \" + str(toFahrenheit(c)) + \"F\")\n\t\telif choice == 2:\n\t\t\tf = eval(input(\"Enter degrees Fahrenheit: \"))",
        "detail": "all files.c++.other.tempconversion",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "all files.c++.other.tempconversion",
        "description": "all files.c++.other.tempconversion",
        "peekOfCode": "def main():\n\tchoice = menu()\n\twhile choice != 3:\n\t\tif choice == 1:\n\t\t\tc = eval(input(\"Enter degrees Celsius: \"))\n\t\t\tprint(str(c) + \"C = \" + str(toFahrenheit(c)) + \"F\")\n\t\telif choice == 2:\n\t\t\tf = eval(input(\"Enter degrees Fahrenheit: \"))\n\t\t\tprint(str(f) + \"F = \" + str(toCelsius(f)) + \"C\")\n\t\telse:",
        "detail": "all files.c++.other.tempconversion",
        "documentation": {}
    },
    {
        "label": "\tchoice",
        "kind": 5,
        "importPath": "all files.c++.other.tempconversion",
        "description": "all files.c++.other.tempconversion",
        "peekOfCode": "\tchoice = int(input(\"Enter a choice: \"))\n\treturn choice\ndef toCelsius(f):\n\treturn int((f - 32) / 1.8)\ndef toFahrenheit(c):\n\treturn int(c * 1.8 + 32)\ndef main():\n\tchoice = menu()\n\twhile choice != 3:\n\t\tif choice == 1:",
        "detail": "all files.c++.other.tempconversion",
        "documentation": {}
    },
    {
        "label": "\tchoice",
        "kind": 5,
        "importPath": "all files.c++.other.tempconversion",
        "description": "all files.c++.other.tempconversion",
        "peekOfCode": "\tchoice = menu()\n\twhile choice != 3:\n\t\tif choice == 1:\n\t\t\tc = eval(input(\"Enter degrees Celsius: \"))\n\t\t\tprint(str(c) + \"C = \" + str(toFahrenheit(c)) + \"F\")\n\t\telif choice == 2:\n\t\t\tf = eval(input(\"Enter degrees Fahrenheit: \"))\n\t\t\tprint(str(f) + \"F = \" + str(toCelsius(f)) + \"C\")\n\t\telse:\n\t\t\tprint(\"Invalid choice.\")",
        "detail": "all files.c++.other.tempconversion",
        "documentation": {}
    },
    {
        "label": "\t\t\tc",
        "kind": 5,
        "importPath": "all files.c++.other.tempconversion",
        "description": "all files.c++.other.tempconversion",
        "peekOfCode": "\t\t\tc = eval(input(\"Enter degrees Celsius: \"))\n\t\t\tprint(str(c) + \"C = \" + str(toFahrenheit(c)) + \"F\")\n\t\telif choice == 2:\n\t\t\tf = eval(input(\"Enter degrees Fahrenheit: \"))\n\t\t\tprint(str(f) + \"F = \" + str(toCelsius(f)) + \"C\")\n\t\telse:\n\t\t\tprint(\"Invalid choice.\")\n\t\tchoice = menu()\nmain()",
        "detail": "all files.c++.other.tempconversion",
        "documentation": {}
    },
    {
        "label": "\t\t\tf",
        "kind": 5,
        "importPath": "all files.c++.other.tempconversion",
        "description": "all files.c++.other.tempconversion",
        "peekOfCode": "\t\t\tf = eval(input(\"Enter degrees Fahrenheit: \"))\n\t\t\tprint(str(f) + \"F = \" + str(toCelsius(f)) + \"C\")\n\t\telse:\n\t\t\tprint(\"Invalid choice.\")\n\t\tchoice = menu()\nmain()",
        "detail": "all files.c++.other.tempconversion",
        "documentation": {}
    },
    {
        "label": "\t\tchoice",
        "kind": 5,
        "importPath": "all files.c++.other.tempconversion",
        "description": "all files.c++.other.tempconversion",
        "peekOfCode": "\t\tchoice = menu()\nmain()",
        "detail": "all files.c++.other.tempconversion",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "all files.c++.other.turtlegraphics",
        "description": "all files.c++.other.turtlegraphics",
        "peekOfCode": "def draw():\n    size = randint(40, 300)\n    angles = (144, 150, 157.5, 160, 165)\n\tangle = sample(angles, 1)[0]\n\tcolors = [\n\t\t('#922B21', '#E6B0AA'), ('#76448A', '#D2B4DE'), ('#1F618D', '#AED6F1'), ('#515A5A', '#EAEDED'),\n\t\t('#148F77', '#D1F2EB'), ('#B7950B', '#F7DC6F'), ('#F39C12', '#FDEBD0'), ('#BA4A00', '#F6DDCC')]\n\tcolor = sample(colors, 1)[0]\n\ttt.color(color[0], color[1])\n\tx_pos = randint(-200,200)",
        "detail": "all files.c++.other.turtlegraphics",
        "documentation": {}
    },
    {
        "label": "\tangle",
        "kind": 5,
        "importPath": "all files.c++.other.turtlegraphics",
        "description": "all files.c++.other.turtlegraphics",
        "peekOfCode": "\tangle = sample(angles, 1)[0]\n\tcolors = [\n\t\t('#922B21', '#E6B0AA'), ('#76448A', '#D2B4DE'), ('#1F618D', '#AED6F1'), ('#515A5A', '#EAEDED'),\n\t\t('#148F77', '#D1F2EB'), ('#B7950B', '#F7DC6F'), ('#F39C12', '#FDEBD0'), ('#BA4A00', '#F6DDCC')]\n\tcolor = sample(colors, 1)[0]\n\ttt.color(color[0], color[1])\n\tx_pos = randint(-200,200)\n\ty_pos = randint(-200,200)\n\ttt.pu()\n\ttt.setpos(x_pos, y_pos)",
        "detail": "all files.c++.other.turtlegraphics",
        "documentation": {}
    },
    {
        "label": "\tcolors",
        "kind": 5,
        "importPath": "all files.c++.other.turtlegraphics",
        "description": "all files.c++.other.turtlegraphics",
        "peekOfCode": "\tcolors = [\n\t\t('#922B21', '#E6B0AA'), ('#76448A', '#D2B4DE'), ('#1F618D', '#AED6F1'), ('#515A5A', '#EAEDED'),\n\t\t('#148F77', '#D1F2EB'), ('#B7950B', '#F7DC6F'), ('#F39C12', '#FDEBD0'), ('#BA4A00', '#F6DDCC')]\n\tcolor = sample(colors, 1)[0]\n\ttt.color(color[0], color[1])\n\tx_pos = randint(-200,200)\n\ty_pos = randint(-200,200)\n\ttt.pu()\n\ttt.setpos(x_pos, y_pos)\n\tstart_position = tt.pos()",
        "detail": "all files.c++.other.turtlegraphics",
        "documentation": {}
    },
    {
        "label": "\tcolor",
        "kind": 5,
        "importPath": "all files.c++.other.turtlegraphics",
        "description": "all files.c++.other.turtlegraphics",
        "peekOfCode": "\tcolor = sample(colors, 1)[0]\n\ttt.color(color[0], color[1])\n\tx_pos = randint(-200,200)\n\ty_pos = randint(-200,200)\n\ttt.pu()\n\ttt.setpos(x_pos, y_pos)\n\tstart_position = tt.pos()\n\ttt.pd()\n\ttt.begin_fill()\n\twhile True:",
        "detail": "all files.c++.other.turtlegraphics",
        "documentation": {}
    },
    {
        "label": "\tx_pos",
        "kind": 5,
        "importPath": "all files.c++.other.turtlegraphics",
        "description": "all files.c++.other.turtlegraphics",
        "peekOfCode": "\tx_pos = randint(-200,200)\n\ty_pos = randint(-200,200)\n\ttt.pu()\n\ttt.setpos(x_pos, y_pos)\n\tstart_position = tt.pos()\n\ttt.pd()\n\ttt.begin_fill()\n\twhile True:\n\t\ttt.forward(size)\n\t\ttt.left(angle)",
        "detail": "all files.c++.other.turtlegraphics",
        "documentation": {}
    },
    {
        "label": "\ty_pos",
        "kind": 5,
        "importPath": "all files.c++.other.turtlegraphics",
        "description": "all files.c++.other.turtlegraphics",
        "peekOfCode": "\ty_pos = randint(-200,200)\n\ttt.pu()\n\ttt.setpos(x_pos, y_pos)\n\tstart_position = tt.pos()\n\ttt.pd()\n\ttt.begin_fill()\n\twhile True:\n\t\ttt.forward(size)\n\t\ttt.left(angle)\n\t\tif abs(tt.pos() - start_position) < 1:",
        "detail": "all files.c++.other.turtlegraphics",
        "documentation": {}
    },
    {
        "label": "\tstart_position",
        "kind": 5,
        "importPath": "all files.c++.other.turtlegraphics",
        "description": "all files.c++.other.turtlegraphics",
        "peekOfCode": "\tstart_position = tt.pos()\n\ttt.pd()\n\ttt.begin_fill()\n\twhile True:\n\t\ttt.forward(size)\n\t\ttt.left(angle)\n\t\tif abs(tt.pos() - start_position) < 1:\n\t\t\tbreak\n\ttt.end_fill()\ntt.circle(100)",
        "detail": "all files.c++.other.turtlegraphics",
        "documentation": {}
    },
    {
        "label": "GameState",
        "kind": 6,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "class GameState:\n    \"\"\"\n    A GameState specifies the full game state, including the food, capsules,\n    agent configurations and score changes.\n    GameStates are used by the Game object to capture the actual state of the game and\n    can be used by agents to reason about the game.\n    Much of the information in a GameState is stored in a GameStateData object.  We\n    strongly suggest that you access that data via the accessor methods below rather\n    than referring to the GameStateData object directly.\n    Note that in classic Pacman, Pacman is always agent 0.",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "ClassicGameRules",
        "kind": 6,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "class ClassicGameRules:\n    \"\"\"\n    These game rules manage the control flow of a game, deciding when\n    and how the game starts and ends.\n    \"\"\"\n    def __init__(self, timeout=30):\n        self.timeout = timeout\n    def newGame( self, layout, pacmanAgent, ghostAgents, display, quiet = False, catchExceptions=False):\n        agents = [pacmanAgent] + ghostAgents[:layout.getNumGhosts()]\n        initState = GameState()",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "PacmanRules",
        "kind": 6,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "class PacmanRules:\n    \"\"\"\n    These functions govern how pacman interacts with his environment under\n    the classic game rules.\n    \"\"\"\n    PACMAN_SPEED=1\n    def getLegalActions( state ):\n        \"\"\"\n        Returns a list of possible actions.\n        \"\"\"",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "GhostRules",
        "kind": 6,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "class GhostRules:\n    \"\"\"\n    These functions dictate how ghosts interact with their environment.\n    \"\"\"\n    GHOST_SPEED=1.0\n    def getLegalActions( state, ghostIndex ):\n        \"\"\"\n        Ghosts cannot stop, and cannot turn around unless they\n        reach a dead end, but can turn 90 degrees at intersections.\n        \"\"\"",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "default",
        "kind": 2,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "def default(str):\n    return str + ' [Default: %default]'\ndef parseAgentArgs(str):\n    if str == None: return {}\n    pieces = str.split(',')\n    opts = {}\n    for p in pieces:\n        if '=' in p:\n            key, val = p.split('=')\n        else:",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "parseAgentArgs",
        "kind": 2,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "def parseAgentArgs(str):\n    if str == None: return {}\n    pieces = str.split(',')\n    opts = {}\n    for p in pieces:\n        if '=' in p:\n            key, val = p.split('=')\n        else:\n            key,val = p, 1\n        opts[key] = val",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "readCommand",
        "kind": 2,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "def readCommand( argv ):\n    \"\"\"\n    Processes the command used to run pacman from the command line.\n    \"\"\"\n    from optparse import OptionParser\n    usageStr = \"\"\"\n    USAGE:      python pacman.py <options>\n    EXAMPLES:   (1) python pacman.py\n                    - starts an interactive game\n                (2) python pacman.py --layout smallClassic --zoom 2",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "loadAgent",
        "kind": 2,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "def loadAgent(pacman, nographics):\n    # Looks through all pythonPath Directories for the right module,\n    pythonPathStr = os.path.expandvars(\"$PYTHONPATH\")\n    if pythonPathStr.find(';') == -1:\n        pythonPathDirs = pythonPathStr.split(':')\n    else:\n        pythonPathDirs = pythonPathStr.split(';')\n    pythonPathDirs.append('.')\n    for moduleDir in pythonPathDirs:\n        if not os.path.isdir(moduleDir): continue",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "replayGame",
        "kind": 2,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "def replayGame( layout, actions, display ):\n    import pacmanAgents, ghostAgents\n    rules = ClassicGameRules()\n    agents = [pacmanAgents.GreedyAgent()] + [ghostAgents.RandomGhost(i+1) for i in range(layout.getNumGhosts())]\n    game = rules.newGame( layout, agents[0], agents[1:], display )\n    state = game.state\n    display.initialize(state.data)\n    for action in actions:\n            # Execute the action\n        state = state.generateSuccessor( *action )",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "runGames",
        "kind": 2,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "def runGames( layout, pacman, ghosts, display, numGames, record, numTraining = 0, catchExceptions=False, timeout=30 ):\n    import __main__\n    __main__.__dict__['_display'] = display\n    rules = ClassicGameRules(timeout)\n    games = []\n    for i in range( numGames ):\n        beQuiet = i < numTraining\n        if beQuiet:\n                # Suppress output and graphics\n            import textDisplay",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "SCARED_TIME",
        "kind": 5,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "SCARED_TIME = 40    # Moves ghosts are scared\nCOLLISION_TOLERANCE = 0.7 # How close ghosts must be to Pacman to kill\nTIME_PENALTY = 1 # Number of points lost each round\nclass ClassicGameRules:\n    \"\"\"\n    These game rules manage the control flow of a game, deciding when\n    and how the game starts and ends.\n    \"\"\"\n    def __init__(self, timeout=30):\n        self.timeout = timeout",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "COLLISION_TOLERANCE",
        "kind": 5,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "COLLISION_TOLERANCE = 0.7 # How close ghosts must be to Pacman to kill\nTIME_PENALTY = 1 # Number of points lost each round\nclass ClassicGameRules:\n    \"\"\"\n    These game rules manage the control flow of a game, deciding when\n    and how the game starts and ends.\n    \"\"\"\n    def __init__(self, timeout=30):\n        self.timeout = timeout\n    def newGame( self, layout, pacmanAgent, ghostAgents, display, quiet = False, catchExceptions=False):",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "TIME_PENALTY",
        "kind": 5,
        "importPath": "all files.c++.pacman.pacman",
        "description": "all files.c++.pacman.pacman",
        "peekOfCode": "TIME_PENALTY = 1 # Number of points lost each round\nclass ClassicGameRules:\n    \"\"\"\n    These game rules manage the control flow of a game, deciding when\n    and how the game starts and ends.\n    \"\"\"\n    def __init__(self, timeout=30):\n        self.timeout = timeout\n    def newGame( self, layout, pacmanAgent, ghostAgents, display, quiet = False, catchExceptions=False):\n        agents = [pacmanAgent] + ghostAgents[:layout.getNumGhosts()]",
        "detail": "all files.c++.pacman.pacman",
        "documentation": {}
    },
    {
        "label": "Map",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.map",
        "description": "all files.c++.pvz.constants.map",
        "peekOfCode": "class Map():\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        self.map = [[0 for x in range(self.width)] for y in range(self.height)]\n    def isValid(self, map_x, map_y):\n        if (map_x < 0 or map_x >= self.width or\n            map_y < 0 or map_y >= self.height):\n            return False\n        return True",
        "detail": "all files.c++.pvz.constants.map",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.map",
        "description": "all files.c++.pvz.constants.map",
        "peekOfCode": "__author__ = 'marble_xu'\nimport random\nimport pygame as pg\nfrom .. import tool\nfrom .. import constants as c\nclass Map():\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        self.map = [[0 for x in range(self.width)] for y in range(self.height)]",
        "detail": "all files.c++.pvz.constants.map",
        "documentation": {}
    },
    {
        "label": "Card",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "class Card():\n    def __init__(self, x, y, name_index, scale=0.78):\n        self.loadFrame(card_name_list[name_index], scale)\n        self.rect = self.orig_image.get_rect()\n        self.rect.x = x\n        self.rect.y = y\n        self.name_index = name_index\n        self.sun_cost = plant_sun_list[name_index]\n        self.frozen_time = plant_frozen_time_list[name_index]\n        self.frozen_timer = -self.frozen_time",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "MenuBar",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "class MenuBar():\n    def __init__(self, card_list, sun_value):\n        self.loadFrame(c.MENUBAR_BACKGROUND)\n        self.rect = self.image.get_rect()\n        self.rect.x = 10\n        self.rect.y = 0\n        self.sun_value = sun_value\n        self.card_offset_x = 32\n        self.setupCards(card_list)\n    def loadFrame(self, name):",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "Panel",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "class Panel():\n    def __init__(self, card_list, sun_value):\n        self.loadImages(sun_value)\n        self.selected_cards = []\n        self.selected_num = 0\n        self.setupCards(card_list)\n    def loadFrame(self, name):\n        frame = tool.GFX[name]\n        rect = frame.get_rect()\n        frame_rect = (rect.x, rect.y, rect.w, rect.h)",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "MoveCard",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "class MoveCard():\n    def __init__(self, x, y, card_name, plant_name, scale=0.78):\n        self.loadFrame(card_name, scale)\n        self.rect = self.orig_image.get_rect()\n        self.rect.x = x\n        self.rect.y = y\n        self.rect.w = 1\n        self.image = self.createShowImage()\n        self.card_name = card_name\n        self.plant_name = plant_name",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "MoveBar",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "class MoveBar():\n    def __init__(self, card_pool):\n        self.loadFrame(c.MOVEBAR_BACKGROUND)\n        self.rect = self.image.get_rect()\n        self.rect.x = 90\n        self.rect.y = 0\n        self.card_start_x = self.rect.x + 8\n        self.card_end_x = self.rect.right - 5\n        self.card_pool = card_pool\n        self.card_list = []",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "getSunValueImage",
        "kind": 2,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "def getSunValueImage(sun_value):\n    font = pg.font.SysFont(None, 22)\n    width = 32\n    msg_image = font.render(str(sun_value), True, c.NAVYBLUE, c.LIGHTYELLOW)\n    msg_rect = msg_image.get_rect()\n    msg_w = msg_rect.width\n    image = pg.Surface([width, 17])\n    x = width - msg_w\n    image.fill(c.LIGHTYELLOW)\n    image.blit(msg_image, (x, 0), (0, 0, msg_rect.w, msg_rect.h))",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "getCardPool",
        "kind": 2,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "def getCardPool(data):\n    card_pool = []\n    for card in data:\n        tmp = card['name']\n        for i,name in enumerate(plant_name_list):\n            if name == tmp:\n                card_pool.append(i)\n                break\n    return card_pool\nclass Card():",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "__author__ = 'marble_xu'\nimport random\nimport pygame as pg\nfrom .. import tool\nfrom .. import constants as c\nPANEL_Y_START = 87\nPANEL_X_START = 22\nPANEL_Y_INTERNAL = 74\nPANEL_X_INTERNAL = 53\nCARD_LIST_NUM = 8",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "PANEL_Y_START",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "PANEL_Y_START = 87\nPANEL_X_START = 22\nPANEL_Y_INTERNAL = 74\nPANEL_X_INTERNAL = 53\nCARD_LIST_NUM = 8\ncard_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "PANEL_X_START",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "PANEL_X_START = 22\nPANEL_Y_INTERNAL = 74\nPANEL_X_INTERNAL = 53\nCARD_LIST_NUM = 8\ncard_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]\nplant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "PANEL_Y_INTERNAL",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "PANEL_Y_INTERNAL = 74\nPANEL_X_INTERNAL = 53\nCARD_LIST_NUM = 8\ncard_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]\nplant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,\n                   c.CHERRYBOMB, c.THREEPEASHOOTER, c.REPEATERPEA, c.CHOMPER,",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "PANEL_X_INTERNAL",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "PANEL_X_INTERNAL = 53\nCARD_LIST_NUM = 8\ncard_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]\nplant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,\n                   c.CHERRYBOMB, c.THREEPEASHOOTER, c.REPEATERPEA, c.CHOMPER,\n                   c.PUFFSHROOM, c.POTATOMINE, c.SQUASH, c.SPIKEWEED,",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "CARD_LIST_NUM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "CARD_LIST_NUM = 8\ncard_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]\nplant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,\n                   c.CHERRYBOMB, c.THREEPEASHOOTER, c.REPEATERPEA, c.CHOMPER,\n                   c.PUFFSHROOM, c.POTATOMINE, c.SQUASH, c.SPIKEWEED,\n                   c.JALAPENO, c.SCAREDYSHROOM, c.SUNSHROOM, c.ICESHROOM,",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "card_name_list",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "card_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]\nplant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,\n                   c.CHERRYBOMB, c.THREEPEASHOOTER, c.REPEATERPEA, c.CHOMPER,\n                   c.PUFFSHROOM, c.POTATOMINE, c.SQUASH, c.SPIKEWEED,\n                   c.JALAPENO, c.SCAREDYSHROOM, c.SUNSHROOM, c.ICESHROOM,\n                   c.HYPNOSHROOM, c.WALLNUTBOWLING, c.REDWALLNUTBOWLING]",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "plant_name_list",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "plant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,\n                   c.CHERRYBOMB, c.THREEPEASHOOTER, c.REPEATERPEA, c.CHOMPER,\n                   c.PUFFSHROOM, c.POTATOMINE, c.SQUASH, c.SPIKEWEED,\n                   c.JALAPENO, c.SCAREDYSHROOM, c.SUNSHROOM, c.ICESHROOM,\n                   c.HYPNOSHROOM, c.WALLNUTBOWLING, c.REDWALLNUTBOWLING]\nplant_sun_list = [50, 100, 175, 50, 150, 325, 200, 150, 0, 25, 50, 100, 125, 25, 25, 75, 75, 0, 0]\nplant_frozen_time_list = [7500, 7500, 7500, 30000, 50000, 7500, 7500, 7500, 7500, 30000,\n                          30000, 7500, 50000, 7500, 7500, 50000, 30000, 0, 0]\nall_card_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ndef getSunValueImage(sun_value):",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "plant_sun_list",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "plant_sun_list = [50, 100, 175, 50, 150, 325, 200, 150, 0, 25, 50, 100, 125, 25, 25, 75, 75, 0, 0]\nplant_frozen_time_list = [7500, 7500, 7500, 30000, 50000, 7500, 7500, 7500, 7500, 30000,\n                          30000, 7500, 50000, 7500, 7500, 50000, 30000, 0, 0]\nall_card_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ndef getSunValueImage(sun_value):\n    font = pg.font.SysFont(None, 22)\n    width = 32\n    msg_image = font.render(str(sun_value), True, c.NAVYBLUE, c.LIGHTYELLOW)\n    msg_rect = msg_image.get_rect()\n    msg_w = msg_rect.width",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "plant_frozen_time_list",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "plant_frozen_time_list = [7500, 7500, 7500, 30000, 50000, 7500, 7500, 7500, 7500, 30000,\n                          30000, 7500, 50000, 7500, 7500, 50000, 30000, 0, 0]\nall_card_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ndef getSunValueImage(sun_value):\n    font = pg.font.SysFont(None, 22)\n    width = 32\n    msg_image = font.render(str(sun_value), True, c.NAVYBLUE, c.LIGHTYELLOW)\n    msg_rect = msg_image.get_rect()\n    msg_w = msg_rect.width\n    image = pg.Surface([width, 17])",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "all_card_list",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.menubar",
        "description": "all files.c++.pvz.constants.menubar",
        "peekOfCode": "all_card_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ndef getSunValueImage(sun_value):\n    font = pg.font.SysFont(None, 22)\n    width = 32\n    msg_image = font.render(str(sun_value), True, c.NAVYBLUE, c.LIGHTYELLOW)\n    msg_rect = msg_image.get_rect()\n    msg_w = msg_rect.width\n    image = pg.Surface([width, 17])\n    x = width - msg_w\n    image.fill(c.LIGHTYELLOW)",
        "detail": "all files.c++.pvz.constants.menubar",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class Car(pg.sprite.Sprite):\n    def __init__(self, x, y, map_y):\n        pg.sprite.Sprite.__init__(self)\n        rect = tool.GFX[c.CAR].get_rect()\n        width, height = rect.w, rect.h\n        self.image = tool.get_image(tool.GFX[c.CAR], 0, 0, width, height)\n        self.rect = self.image.get_rect()\n        self.rect.x = x\n        self.rect.bottom = y\n        self.map_y = map_y",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "Bullet",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class Bullet(pg.sprite.Sprite):\n    def __init__(self, x, start_y, dest_y, name, damage, ice):\n        pg.sprite.Sprite.__init__(self)\n        self.name = name\n        self.frames = []\n        self.frame_index = 0\n        self.load_images()\n        self.image = self.frames[self.frame_index]\n        self.rect = self.image.get_rect()\n        self.rect.x = x",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "Plant",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class Plant(pg.sprite.Sprite):\n    def __init__(self, x, y, name, health, bullet_group, scale=1):\n        pg.sprite.Sprite.__init__(self)\n        self.frames = []\n        self.frame_index = 0\n        self.loadImages(name, scale)\n        self.frame_num = len(self.frames)\n        self.image = self.frames[self.frame_index]\n        self.rect = self.image.get_rect()\n        self.rect.centerx = x",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "Sun",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class Sun(Plant):\n    def __init__(self, x, y, dest_x, dest_y, is_big=True):\n        if is_big:\n            scale = 0.9\n            self.sun_value = c.SUN_VALUE\n        else:\n            scale = 0.6\n            self.sun_value = 12\n        Plant.__init__(self, x, y, c.SUN, 0, None, scale)\n        self.move_speed = 1",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "SunFlower",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class SunFlower(Plant):\n    def __init__(self, x, y, sun_group):\n        Plant.__init__(self, x, y, c.SUNFLOWER, c.PLANT_HEALTH, None)\n        self.sun_timer = 0\n        self.sun_group = sun_group\n    def idling(self):\n        if self.sun_timer == 0:\n            self.sun_timer = self.current_time - (c.FLOWER_SUN_INTERVAL - 6000)\n        elif (self.current_time - self.sun_timer) > c.FLOWER_SUN_INTERVAL:\n            self.sun_group.add(Sun(self.rect.centerx, self.rect.bottom, self.rect.right, self.rect.bottom + self.rect.h // 2))",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "PeaShooter",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class PeaShooter(Plant):\n    def __init__(self, x, y, bullet_group):\n        Plant.__init__(self, x, y, c.PEASHOOTER, c.PLANT_HEALTH, bullet_group)\n        self.shoot_timer = 0\n    def attacking(self):\n        if (self.current_time - self.shoot_timer) > 2000:\n            self.bullet_group.add(Bullet(self.rect.right, self.rect.y, self.rect.y,\n                                    c.BULLET_PEA, c.BULLET_DAMAGE_NORMAL, False))\n            self.shoot_timer = self.current_time\nclass RepeaterPea(Plant):",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "RepeaterPea",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class RepeaterPea(Plant):\n    def __init__(self, x, y, bullet_group):\n        Plant.__init__(self, x, y, c.REPEATERPEA, c.PLANT_HEALTH, bullet_group)\n        self.shoot_timer = 0\n    def attacking(self):\n        if (self.current_time - self.shoot_timer) > 2000:\n            self.bullet_group.add(Bullet(self.rect.right, self.rect.y, self.rect.y,\n                                    c.BULLET_PEA, c.BULLET_DAMAGE_NORMAL, False))\n            self.bullet_group.add(Bullet(self.rect.right + 40, self.rect.y, self.rect.y,\n                                    c.BULLET_PEA, c.BULLET_DAMAGE_NORMAL, False))",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "ThreePeaShooter",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class ThreePeaShooter(Plant):\n    def __init__(self, x, y, bullet_groups, map_y):\n        Plant.__init__(self, x, y, c.THREEPEASHOOTER, c.PLANT_HEALTH, None)\n        self.shoot_timer = 0\n        self.map_y = map_y\n        self.bullet_groups = bullet_groups\n    def attacking(self):\n        if (self.current_time - self.shoot_timer) > 2000:\n            offset_y = 9 # modify bullet in the same y position with bullets of other plants\n            for i in range(3):",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "SnowPeaShooter",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class SnowPeaShooter(Plant):\n    def __init__(self, x, y, bullet_group):\n        Plant.__init__(self, x, y, c.SNOWPEASHOOTER, c.PLANT_HEALTH, bullet_group)\n        self.shoot_timer = 0\n    def attacking(self):\n        if (self.current_time - self.shoot_timer) > 2000:\n            self.bullet_group.add(Bullet(self.rect.right, self.rect.y, self.rect.y,\n                                    c.BULLET_PEA_ICE, c.BULLET_DAMAGE_NORMAL, True))\n            self.shoot_timer = self.current_time\nclass WallNut(Plant):",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "WallNut",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class WallNut(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.WALLNUT, c.WALLNUT_HEALTH, None)\n        self.load_images()\n        self.cracked1 = False\n        self.cracked2 = False\n    def load_images(self):\n        self.cracked1_frames = []\n        self.cracked2_frames = []\n        cracked1_frames_name = self.name + '_cracked1'",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "CherryBomb",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class CherryBomb(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.CHERRYBOMB, c.WALLNUT_HEALTH, None)\n        self.state = c.ATTACK\n        self.start_boom = False\n        self.bomb_timer = 0\n        self.explode_y_range = 1\n        self.explode_x_range = c.GRID_X_SIZE\n    def setBoom(self):\n        frame = tool.GFX[c.CHERRY_BOOM_IMAGE]",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "Chomper",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class Chomper(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.CHOMPER, c.PLANT_HEALTH, None)\n        self.animate_interval = 250\n        self.digest_timer = 0\n        self.digest_interval = 15000\n        self.attack_zombie = None\n        self.zombie_group = None\n    def loadImages(self, name, scale):\n        self.idle_frames = []",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "PuffShroom",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class PuffShroom(Plant):\n    def __init__(self, x, y, bullet_group):\n        Plant.__init__(self, x, y, c.PUFFSHROOM, c.PLANT_HEALTH, bullet_group)\n        self.can_sleep = True\n        self.shoot_timer = 0\n    def loadImages(self, name, scale):\n        self.idle_frames = []\n        self.sleep_frames = []\n        idle_name = name\n        sleep_name = name + 'Sleep'",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "PotatoMine",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class PotatoMine(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.POTATOMINE, c.PLANT_HEALTH, None)\n        self.animate_interval = 300\n        self.is_init = True\n        self.init_timer = 0\n        self.bomb_timer = 0\n        self.explode_y_range = 0\n        self.explode_x_range = c.GRID_X_SIZE//3 * 2\n    def loadImages(self, name, scale):",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "Squash",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class Squash(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.SQUASH, c.PLANT_HEALTH, None)\n        self.orig_pos = (x, y)\n        self.aim_timer = 0\n        self.squashing = False\n    def loadImages(self, name, scale):\n        self.idle_frames = []\n        self.aim_frames = []\n        self.attack_frames = []",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "Spikeweed",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class Spikeweed(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.SPIKEWEED, c.PLANT_HEALTH, None)\n        self.animate_interval = 200\n        self.attack_timer = 0\n    def loadImages(self, name, scale):\n        self.loadFrames(self.frames, name, 0.9, c.WHITE)\n    def setIdle(self):\n        print('spikeweed idle')\n        self.animate_interval = 200",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "Jalapeno",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class Jalapeno(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.JALAPENO, c.PLANT_HEALTH, None)\n        self.orig_pos = (x, y)\n        self.state = c.ATTACK\n        self.start_explode = False\n        self.explode_y_range = 0\n        self.explode_x_range = 377\n    def loadImages(self, name, scale):\n        self.explode_frames = []",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "ScaredyShroom",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class ScaredyShroom(Plant):\n    def __init__(self, x, y, bullet_group):\n        Plant.__init__(self, x, y, c.SCAREDYSHROOM, c.PLANT_HEALTH, bullet_group)\n        self.can_sleep = True\n        self.shoot_timer = 0\n        self.cry_x_range = c.GRID_X_SIZE * 2\n    def loadImages(self, name, scale):\n        self.idle_frames = []\n        self.cry_frames = []\n        self.sleep_frames = []",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "SunShroom",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class SunShroom(Plant):\n    def __init__(self, x, y, sun_group):\n        Plant.__init__(self, x, y, c.SUNSHROOM, c.PLANT_HEALTH, None)\n        self.can_sleep = True\n        self.animate_interval = 200\n        self.sun_timer = 0\n        self.sun_group = sun_group\n        self.is_big = False\n        self.change_timer = 0\n    def loadImages(self, name, scale):",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "IceShroom",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class IceShroom(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.ICESHROOM, c.PLANT_HEALTH, None)\n        self.can_sleep = True\n        self.orig_pos = (x, y)\n        self.start_freeze = False\n    def loadImages(self, name, scale):\n        self.idle_frames = []\n        self.snow_frames = []\n        self.sleep_frames = []",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "HypnoShroom",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class HypnoShroom(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.HYPNOSHROOM, 1, None)\n        self.can_sleep = True\n        self.animate_interval = 200\n    def loadImages(self, name, scale):\n        self.idle_frames = []\n        self.sleep_frames = []\n        idle_name = name\n        sleep_name = name + 'Sleep'",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "WallNutBowling",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class WallNutBowling(Plant):\n    def __init__(self, x, y, map_y, level):\n        Plant.__init__(self, x, y, c.WALLNUTBOWLING, 1, None)\n        self.map_y = map_y\n        self.level = level\n        self.init_rect = self.rect.copy()\n        self.rotate_degree = 0\n        self.animate_interval = 200\n        self.move_timer = 0\n        self.move_interval = 70",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "RedWallNutBowling",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "class RedWallNutBowling(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.REDWALLNUTBOWLING, 1, None)\n        self.orig_y = y\n        self.explode_timer = 0\n        self.explode_y_range = 1\n        self.explode_x_range = c.GRID_X_SIZE\n        self.init_rect = self.rect.copy()\n        self.rotate_degree = 0\n        self.animate_interval = 200",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.plant",
        "description": "all files.c++.pvz.constants.plant",
        "peekOfCode": "__author__ = 'marble_xu'\nimport random\nimport pygame as pg\nfrom .. import tool\nfrom .. import constants as c\nclass Car(pg.sprite.Sprite):\n    def __init__(self, x, y, map_y):\n        pg.sprite.Sprite.__init__(self)\n        rect = tool.GFX[c.CAR].get_rect()\n        width, height = rect.w, rect.h",
        "detail": "all files.c++.pvz.constants.plant",
        "documentation": {}
    },
    {
        "label": "Zombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.zombie",
        "description": "all files.c++.pvz.constants.zombie",
        "peekOfCode": "class Zombie(pg.sprite.Sprite):\n    def __init__(self, x, y, name, health, head_group=None, damage=1):\n        pg.sprite.Sprite.__init__(self)\n        self.name = name\n        self.frames = []\n        self.frame_index = 0\n        self.loadImages()\n        self.frame_num = len(self.frames)\n        self.image = self.frames[self.frame_index]\n        self.rect = self.image.get_rect()",
        "detail": "all files.c++.pvz.constants.zombie",
        "documentation": {}
    },
    {
        "label": "ZombieHead",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.zombie",
        "description": "all files.c++.pvz.constants.zombie",
        "peekOfCode": "class ZombieHead(Zombie):\n    def __init__(self, x, y):\n        Zombie.__init__(self, x, y, c.ZOMBIE_HEAD, 0)\n        self.state = c.DIE\n    def loadImages(self):\n        self.die_frames = []\n        die_name =  self.name\n        self.loadFrames(self.die_frames, die_name, 0)\n        self.frames = self.die_frames\n    def setWalk(self):",
        "detail": "all files.c++.pvz.constants.zombie",
        "documentation": {}
    },
    {
        "label": "NormalZombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.zombie",
        "description": "all files.c++.pvz.constants.zombie",
        "peekOfCode": "class NormalZombie(Zombie):\n    def __init__(self, x, y, head_group):\n        Zombie.__init__(self, x, y, c.NORMAL_ZOMBIE, c.NORMAL_HEALTH, head_group)\n    def loadImages(self):\n        self.walk_frames = []\n        self.attack_frames = []\n        self.losthead_walk_frames = []\n        self.losthead_attack_frames = []\n        self.die_frames = []\n        self.boomdie_frames = []",
        "detail": "all files.c++.pvz.constants.zombie",
        "documentation": {}
    },
    {
        "label": "ConeHeadZombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.zombie",
        "description": "all files.c++.pvz.constants.zombie",
        "peekOfCode": "class ConeHeadZombie(Zombie):\n    def __init__(self, x, y, head_group):\n        Zombie.__init__(self, x, y, c.CONEHEAD_ZOMBIE, c.CONEHEAD_HEALTH, head_group)\n        self.helmet = True\n    def loadImages(self):\n        self.helmet_walk_frames = []\n        self.helmet_attack_frames = []\n        self.walk_frames = []\n        self.attack_frames = []\n        self.losthead_walk_frames = []",
        "detail": "all files.c++.pvz.constants.zombie",
        "documentation": {}
    },
    {
        "label": "BucketHeadZombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.zombie",
        "description": "all files.c++.pvz.constants.zombie",
        "peekOfCode": "class BucketHeadZombie(Zombie):\n    def __init__(self, x, y, head_group):\n        Zombie.__init__(self, x, y, c.BUCKETHEAD_ZOMBIE, c.BUCKETHEAD_HEALTH, head_group)\n        self.helmet = True\n    def loadImages(self):\n        self.helmet_walk_frames = []\n        self.helmet_attack_frames = []\n        self.walk_frames = []\n        self.attack_frames = []\n        self.losthead_walk_frames = []",
        "detail": "all files.c++.pvz.constants.zombie",
        "documentation": {}
    },
    {
        "label": "FlagZombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.zombie",
        "description": "all files.c++.pvz.constants.zombie",
        "peekOfCode": "class FlagZombie(Zombie):\n    def __init__(self, x, y, head_group):\n        Zombie.__init__(self, x, y, c.FLAG_ZOMBIE, c.FLAG_HEALTH, head_group)\n    def loadImages(self):\n        self.walk_frames = []\n        self.attack_frames = []\n        self.losthead_walk_frames = []\n        self.losthead_attack_frames = []\n        self.die_frames = []\n        self.boomdie_frames = []",
        "detail": "all files.c++.pvz.constants.zombie",
        "documentation": {}
    },
    {
        "label": "NewspaperZombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.constants.zombie",
        "description": "all files.c++.pvz.constants.zombie",
        "peekOfCode": "class NewspaperZombie(Zombie):\n    def __init__(self, x, y, head_group):\n        Zombie.__init__(self, x, y, c.NEWSPAPER_ZOMBIE, c.NEWSPAPER_HEALTH, head_group)\n        self.helmet = True\n    def loadImages(self):\n        self.helmet_walk_frames = []\n        self.helmet_attack_frames = []\n        self.walk_frames = []\n        self.attack_frames = []\n        self.losthead_walk_frames = []",
        "detail": "all files.c++.pvz.constants.zombie",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants.zombie",
        "description": "all files.c++.pvz.constants.zombie",
        "peekOfCode": "__author__ = 'marble_xu'\nimport pygame as pg\nfrom .. import tool\nfrom .. import constants as c\nclass Zombie(pg.sprite.Sprite):\n    def __init__(self, x, y, name, health, head_group=None, damage=1):\n        pg.sprite.Sprite.__init__(self)\n        self.name = name\n        self.frames = []\n        self.frame_index = 0",
        "detail": "all files.c++.pvz.constants.zombie",
        "documentation": {}
    },
    {
        "label": "Level",
        "kind": 6,
        "importPath": "all files.c++.pvz.state.level",
        "description": "all files.c++.pvz.state.level",
        "peekOfCode": "class Level(tool.State):\n    def __init__(self):\n        tool.State.__init__(self)\n    def startup(self, current_time, persist):\n        self.game_info = persist\n        self.persist = self.game_info\n        self.game_info[c.CURRENT_TIME] = current_time\n        self.map_y_len = c.GRID_Y_LEN\n        self.map = map.Map(c.GRID_X_LEN, self.map_y_len)\n        self.loadMap()",
        "detail": "all files.c++.pvz.state.level",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.state.level",
        "description": "all files.c++.pvz.state.level",
        "peekOfCode": "__author__ = 'marble_xu'\nimport os\nimport json\nimport pygame as pg\nfrom .. import tool\nfrom .. import constants as c\nfrom ..component import map, plant, zombie, menubar\nclass Level(tool.State):\n    def __init__(self):\n        tool.State.__init__(self)",
        "detail": "all files.c++.pvz.state.level",
        "documentation": {}
    },
    {
        "label": "Menu",
        "kind": 6,
        "importPath": "all files.c++.pvz.state.mainmenu",
        "description": "all files.c++.pvz.state.mainmenu",
        "peekOfCode": "class Menu(tool.State):\n    def __init__(self):\n        tool.State.__init__(self)\n    def startup(self, current_time, persist):\n        self.next = c.LEVEL\n        self.persist = persist\n        self.game_info = persist\n        self.setupBackground()\n        self.setupOption()\n    def setupBackground(self):",
        "detail": "all files.c++.pvz.state.mainmenu",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.state.mainmenu",
        "description": "all files.c++.pvz.state.mainmenu",
        "peekOfCode": "__author__ = 'marble_xu'\nimport pygame as pg\nfrom .. import tool\nfrom .. import constants as c\nclass Menu(tool.State):\n    def __init__(self):\n        tool.State.__init__(self)\n    def startup(self, current_time, persist):\n        self.next = c.LEVEL\n        self.persist = persist",
        "detail": "all files.c++.pvz.state.mainmenu",
        "documentation": {}
    },
    {
        "label": "Screen",
        "kind": 6,
        "importPath": "all files.c++.pvz.state.screen",
        "description": "all files.c++.pvz.state.screen",
        "peekOfCode": "class Screen(tool.State):\n    def __init__(self):\n        tool.State.__init__(self)\n        self.end_time = 3000\n    def startup(self, current_time, persist):\n        self.start_time = current_time\n        self.next = c.LEVEL\n        self.persist = persist\n        self.game_info = persist\n        name = self.getImageName()",
        "detail": "all files.c++.pvz.state.screen",
        "documentation": {}
    },
    {
        "label": "GameVictoryScreen",
        "kind": 6,
        "importPath": "all files.c++.pvz.state.screen",
        "description": "all files.c++.pvz.state.screen",
        "peekOfCode": "class GameVictoryScreen(Screen):\n    def __init__(self):\n        Screen.__init__(self)\n    def getImageName(self):\n        return c.GAME_VICTORY_IMAGE\n    def set_next_state(self):\n        return c.LEVEL\nclass GameLoseScreen(Screen):\n    def __init__(self):\n        Screen.__init__(self)",
        "detail": "all files.c++.pvz.state.screen",
        "documentation": {}
    },
    {
        "label": "GameLoseScreen",
        "kind": 6,
        "importPath": "all files.c++.pvz.state.screen",
        "description": "all files.c++.pvz.state.screen",
        "peekOfCode": "class GameLoseScreen(Screen):\n    def __init__(self):\n        Screen.__init__(self)\n    def getImageName(self):\n        return c.GAME_LOOSE_IMAGE\n    def set_next_state(self):\n        return c.MAIN_MENU",
        "detail": "all files.c++.pvz.state.screen",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.state.screen",
        "description": "all files.c++.pvz.state.screen",
        "peekOfCode": "__author__ = 'marble_xu'\nimport pygame as pg\nfrom .. import tool\nfrom .. import constants as c\nclass Screen(tool.State):\n    def __init__(self):\n        tool.State.__init__(self)\n        self.end_time = 3000\n    def startup(self, current_time, persist):\n        self.start_time = current_time",
        "detail": "all files.c++.pvz.state.screen",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "class State():\n    def __init__(self):\n        self.start_time = 0.0\n        self.current_time = 0.0\n        self.done = False\n        self.next = None\n        self.persist = {}\n    @abstractmethod\n    def startup(self, current_time, persist):\n        '''abstract method'''",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "Control",
        "kind": 6,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "class Control():\n    def __init__(self):\n        self.screen = pg.display.get_surface()\n        self.done = False\n        self.clock = pg.time.Clock()\n        self.fps = 60\n        self.keys = pg.key.get_pressed()\n        self.mouse_pos = None\n        self.mouse_click = [False, False]  # value:[left mouse click, right mouse click]\n        self.current_time = 0.0",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "get_image",
        "kind": 2,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "def get_image(sheet, x, y, width, height, colorkey=c.BLACK, scale=1):\n        image = pg.Surface([width, height])\n        rect = image.get_rect()\n        image.blit(sheet, (0, 0), (x, y, width, height))\n        image.set_colorkey(colorkey)\n        image = pg.transform.scale(image,\n                                   (int(rect.width*scale),\n                                    int(rect.height*scale)))\n        return image\ndef load_image_frames(directory, image_name, colorkey, accept):",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "load_image_frames",
        "kind": 2,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "def load_image_frames(directory, image_name, colorkey, accept):\n    frame_list = []\n    tmp = {}\n    # image_name is \"Peashooter\", pic name is 'Peashooter_1', get the index 1\n    index_start = len(image_name) + 1 \n    frame_num = 0;\n    for pic in os.listdir(directory):\n        name, ext = os.path.splitext(pic)\n        if ext.lower() in accept:\n            index = int(name[index_start:])",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "load_all_gfx",
        "kind": 2,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "def load_all_gfx(directory, colorkey=c.WHITE, accept=('.png', '.jpg', '.bmp', '.gif')):\n    graphics = {}\n    for name1 in os.listdir(directory):\n        # subfolders under the folder resources\\graphics\n        dir1 = os.path.join(directory, name1)\n        if os.path.isdir(dir1):\n            for name2 in os.listdir(dir1):\n                dir2 = os.path.join(dir1, name2)\n                if os.path.isdir(dir2):\n                # e.g. subfolders under the folder resources\\graphics\\Zombies",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "loadZombieImageRect",
        "kind": 2,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "def loadZombieImageRect():\n    file_path = os.path.join('source', 'data', 'entity', 'zombie.json')\n    f = open(file_path)\n    data = json.load(f)\n    f.close()\n    return data[c.ZOMBIE_IMAGE_RECT]\ndef loadPlantImageRect():\n    file_path = os.path.join('source', 'data', 'entity', 'plant.json')\n    f = open(file_path)\n    data = json.load(f)",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "loadPlantImageRect",
        "kind": 2,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "def loadPlantImageRect():\n    file_path = os.path.join('source', 'data', 'entity', 'plant.json')\n    f = open(file_path)\n    data = json.load(f)\n    f.close()\n    return data[c.PLANT_IMAGE_RECT]\npg.init()\npg.display.set_caption(c.ORIGINAL_CAPTION)\nSCREEN = pg.display.set_mode(c.SCREEN_SIZE)\nGFX = load_all_gfx(os.path.join(\"resources\",\"graphics\"))",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "__author__ = 'marble_xu'\nimport os\nimport json\nfrom abc import abstractmethod\nimport pygame as pg\nfrom . import constants as c\nclass State():\n    def __init__(self):\n        self.start_time = 0.0\n        self.current_time = 0.0",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "SCREEN",
        "kind": 5,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "SCREEN = pg.display.set_mode(c.SCREEN_SIZE)\nGFX = load_all_gfx(os.path.join(\"resources\",\"graphics\"))\nZOMBIE_RECT = loadZombieImageRect()\nPLANT_RECT = loadPlantImageRect()",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "GFX",
        "kind": 5,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "GFX = load_all_gfx(os.path.join(\"resources\",\"graphics\"))\nZOMBIE_RECT = loadZombieImageRect()\nPLANT_RECT = loadPlantImageRect()",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "ZOMBIE_RECT",
        "kind": 5,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "ZOMBIE_RECT = loadZombieImageRect()\nPLANT_RECT = loadPlantImageRect()",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "PLANT_RECT",
        "kind": 5,
        "importPath": "all files.c++.pvz.state.tool",
        "description": "all files.c++.pvz.state.tool",
        "peekOfCode": "PLANT_RECT = loadPlantImageRect()",
        "detail": "all files.c++.pvz.state.tool",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "__author__ = 'marble_xu'\nSTART_LEVEL_NUM = 1\nORIGINAL_CAPTION = 'Plant VS Zombies Game'\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nSCREEN_SIZE = (SCREEN_WIDTH, SCREEN_HEIGHT)\nGRID_X_LEN = 9\nGRID_Y_LEN = 5\nGRID_X_SIZE = 80\nGRID_Y_SIZE = 100",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "START_LEVEL_NUM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "START_LEVEL_NUM = 1\nORIGINAL_CAPTION = 'Plant VS Zombies Game'\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nSCREEN_SIZE = (SCREEN_WIDTH, SCREEN_HEIGHT)\nGRID_X_LEN = 9\nGRID_Y_LEN = 5\nGRID_X_SIZE = 80\nGRID_Y_SIZE = 100\nWHITE        = (255, 255, 255)",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ORIGINAL_CAPTION",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ORIGINAL_CAPTION = 'Plant VS Zombies Game'\nSCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nSCREEN_SIZE = (SCREEN_WIDTH, SCREEN_HEIGHT)\nGRID_X_LEN = 9\nGRID_Y_LEN = 5\nGRID_X_SIZE = 80\nGRID_Y_SIZE = 100\nWHITE        = (255, 255, 255)\nNAVYBLUE     = ( 60,  60, 100)",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SCREEN_WIDTH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SCREEN_WIDTH = 800\nSCREEN_HEIGHT = 600\nSCREEN_SIZE = (SCREEN_WIDTH, SCREEN_HEIGHT)\nGRID_X_LEN = 9\nGRID_Y_LEN = 5\nGRID_X_SIZE = 80\nGRID_Y_SIZE = 100\nWHITE        = (255, 255, 255)\nNAVYBLUE     = ( 60,  60, 100)\nSKY_BLUE     = ( 39, 145, 251)",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SCREEN_HEIGHT",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SCREEN_HEIGHT = 600\nSCREEN_SIZE = (SCREEN_WIDTH, SCREEN_HEIGHT)\nGRID_X_LEN = 9\nGRID_Y_LEN = 5\nGRID_X_SIZE = 80\nGRID_Y_SIZE = 100\nWHITE        = (255, 255, 255)\nNAVYBLUE     = ( 60,  60, 100)\nSKY_BLUE     = ( 39, 145, 251)\nBLACK        = (  0,   0,   0)",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SCREEN_SIZE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SCREEN_SIZE = (SCREEN_WIDTH, SCREEN_HEIGHT)\nGRID_X_LEN = 9\nGRID_Y_LEN = 5\nGRID_X_SIZE = 80\nGRID_Y_SIZE = 100\nWHITE        = (255, 255, 255)\nNAVYBLUE     = ( 60,  60, 100)\nSKY_BLUE     = ( 39, 145, 251)\nBLACK        = (  0,   0,   0)\nLIGHTYELLOW  = (234, 233, 171)",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "GRID_X_LEN",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "GRID_X_LEN = 9\nGRID_Y_LEN = 5\nGRID_X_SIZE = 80\nGRID_Y_SIZE = 100\nWHITE        = (255, 255, 255)\nNAVYBLUE     = ( 60,  60, 100)\nSKY_BLUE     = ( 39, 145, 251)\nBLACK        = (  0,   0,   0)\nLIGHTYELLOW  = (234, 233, 171)\nRED          = (255,   0,   0)",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "GRID_Y_LEN",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "GRID_Y_LEN = 5\nGRID_X_SIZE = 80\nGRID_Y_SIZE = 100\nWHITE        = (255, 255, 255)\nNAVYBLUE     = ( 60,  60, 100)\nSKY_BLUE     = ( 39, 145, 251)\nBLACK        = (  0,   0,   0)\nLIGHTYELLOW  = (234, 233, 171)\nRED          = (255,   0,   0)\nPURPLE       = (255,   0, 255)",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "GRID_X_SIZE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "GRID_X_SIZE = 80\nGRID_Y_SIZE = 100\nWHITE        = (255, 255, 255)\nNAVYBLUE     = ( 60,  60, 100)\nSKY_BLUE     = ( 39, 145, 251)\nBLACK        = (  0,   0,   0)\nLIGHTYELLOW  = (234, 233, 171)\nRED          = (255,   0,   0)\nPURPLE       = (255,   0, 255)\nGOLD         = (255, 215,   0)",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "GRID_Y_SIZE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "GRID_Y_SIZE = 100\nWHITE        = (255, 255, 255)\nNAVYBLUE     = ( 60,  60, 100)\nSKY_BLUE     = ( 39, 145, 251)\nBLACK        = (  0,   0,   0)\nLIGHTYELLOW  = (234, 233, 171)\nRED          = (255,   0,   0)\nPURPLE       = (255,   0, 255)\nGOLD         = (255, 215,   0)\nGREEN        = (  0, 255,   0)",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SIZE_MULTIPLIER",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SIZE_MULTIPLIER = 1.3\n#GAME INFO DICTIONARY KEYS\nCURRENT_TIME = 'current time'\nLEVEL_NUM = 'level num'\n#STATES FOR ENTIRE GAME\nMAIN_MENU = 'main menu'\nLOAD_SCREEN = 'load screen'\nGAME_LOSE = 'game los'\nGAME_VICTORY = 'game victory'\nLEVEL = 'level'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CURRENT_TIME",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CURRENT_TIME = 'current time'\nLEVEL_NUM = 'level num'\n#STATES FOR ENTIRE GAME\nMAIN_MENU = 'main menu'\nLOAD_SCREEN = 'load screen'\nGAME_LOSE = 'game los'\nGAME_VICTORY = 'game victory'\nLEVEL = 'level'\nMAIN_MENU_IMAGE = 'MainMenu'\nOPTION_ADVENTURE = 'Adventure'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "LEVEL_NUM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "LEVEL_NUM = 'level num'\n#STATES FOR ENTIRE GAME\nMAIN_MENU = 'main menu'\nLOAD_SCREEN = 'load screen'\nGAME_LOSE = 'game los'\nGAME_VICTORY = 'game victory'\nLEVEL = 'level'\nMAIN_MENU_IMAGE = 'MainMenu'\nOPTION_ADVENTURE = 'Adventure'\nGAME_LOOSE_IMAGE = 'GameLoose'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "MAIN_MENU",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "MAIN_MENU = 'main menu'\nLOAD_SCREEN = 'load screen'\nGAME_LOSE = 'game los'\nGAME_VICTORY = 'game victory'\nLEVEL = 'level'\nMAIN_MENU_IMAGE = 'MainMenu'\nOPTION_ADVENTURE = 'Adventure'\nGAME_LOOSE_IMAGE = 'GameLoose'\nGAME_VICTORY_IMAGE = 'GameVictory'\n#MAP COMPONENTS",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "LOAD_SCREEN",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "LOAD_SCREEN = 'load screen'\nGAME_LOSE = 'game los'\nGAME_VICTORY = 'game victory'\nLEVEL = 'level'\nMAIN_MENU_IMAGE = 'MainMenu'\nOPTION_ADVENTURE = 'Adventure'\nGAME_LOOSE_IMAGE = 'GameLoose'\nGAME_VICTORY_IMAGE = 'GameVictory'\n#MAP COMPONENTS\nBACKGROUND_NAME = 'Background'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "GAME_LOSE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "GAME_LOSE = 'game los'\nGAME_VICTORY = 'game victory'\nLEVEL = 'level'\nMAIN_MENU_IMAGE = 'MainMenu'\nOPTION_ADVENTURE = 'Adventure'\nGAME_LOOSE_IMAGE = 'GameLoose'\nGAME_VICTORY_IMAGE = 'GameVictory'\n#MAP COMPONENTS\nBACKGROUND_NAME = 'Background'\nBACKGROUND_TYPE = 'background_type'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "GAME_VICTORY",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "GAME_VICTORY = 'game victory'\nLEVEL = 'level'\nMAIN_MENU_IMAGE = 'MainMenu'\nOPTION_ADVENTURE = 'Adventure'\nGAME_LOOSE_IMAGE = 'GameLoose'\nGAME_VICTORY_IMAGE = 'GameVictory'\n#MAP COMPONENTS\nBACKGROUND_NAME = 'Background'\nBACKGROUND_TYPE = 'background_type'\nINIT_SUN_NAME = 'init_sun_value'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "LEVEL",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "LEVEL = 'level'\nMAIN_MENU_IMAGE = 'MainMenu'\nOPTION_ADVENTURE = 'Adventure'\nGAME_LOOSE_IMAGE = 'GameLoose'\nGAME_VICTORY_IMAGE = 'GameVictory'\n#MAP COMPONENTS\nBACKGROUND_NAME = 'Background'\nBACKGROUND_TYPE = 'background_type'\nINIT_SUN_NAME = 'init_sun_value'\nZOMBIE_LIST = 'zombie_list'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "MAIN_MENU_IMAGE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "MAIN_MENU_IMAGE = 'MainMenu'\nOPTION_ADVENTURE = 'Adventure'\nGAME_LOOSE_IMAGE = 'GameLoose'\nGAME_VICTORY_IMAGE = 'GameVictory'\n#MAP COMPONENTS\nBACKGROUND_NAME = 'Background'\nBACKGROUND_TYPE = 'background_type'\nINIT_SUN_NAME = 'init_sun_value'\nZOMBIE_LIST = 'zombie_list'\nMAP_EMPTY = 0",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "OPTION_ADVENTURE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "OPTION_ADVENTURE = 'Adventure'\nGAME_LOOSE_IMAGE = 'GameLoose'\nGAME_VICTORY_IMAGE = 'GameVictory'\n#MAP COMPONENTS\nBACKGROUND_NAME = 'Background'\nBACKGROUND_TYPE = 'background_type'\nINIT_SUN_NAME = 'init_sun_value'\nZOMBIE_LIST = 'zombie_list'\nMAP_EMPTY = 0\nMAP_EXIST = 1",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "GAME_LOOSE_IMAGE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "GAME_LOOSE_IMAGE = 'GameLoose'\nGAME_VICTORY_IMAGE = 'GameVictory'\n#MAP COMPONENTS\nBACKGROUND_NAME = 'Background'\nBACKGROUND_TYPE = 'background_type'\nINIT_SUN_NAME = 'init_sun_value'\nZOMBIE_LIST = 'zombie_list'\nMAP_EMPTY = 0\nMAP_EXIST = 1\nBACKGROUND_OFFSET_X = 220",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "GAME_VICTORY_IMAGE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "GAME_VICTORY_IMAGE = 'GameVictory'\n#MAP COMPONENTS\nBACKGROUND_NAME = 'Background'\nBACKGROUND_TYPE = 'background_type'\nINIT_SUN_NAME = 'init_sun_value'\nZOMBIE_LIST = 'zombie_list'\nMAP_EMPTY = 0\nMAP_EXIST = 1\nBACKGROUND_OFFSET_X = 220\nMAP_OFFSET_X = 35",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BACKGROUND_NAME",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BACKGROUND_NAME = 'Background'\nBACKGROUND_TYPE = 'background_type'\nINIT_SUN_NAME = 'init_sun_value'\nZOMBIE_LIST = 'zombie_list'\nMAP_EMPTY = 0\nMAP_EXIST = 1\nBACKGROUND_OFFSET_X = 220\nMAP_OFFSET_X = 35\nMAP_OFFSET_Y = 100\n#MENUBAR",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BACKGROUND_TYPE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BACKGROUND_TYPE = 'background_type'\nINIT_SUN_NAME = 'init_sun_value'\nZOMBIE_LIST = 'zombie_list'\nMAP_EMPTY = 0\nMAP_EXIST = 1\nBACKGROUND_OFFSET_X = 220\nMAP_OFFSET_X = 35\nMAP_OFFSET_Y = 100\n#MENUBAR\nCHOOSEBAR_TYPE = 'choosebar_type'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "INIT_SUN_NAME",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "INIT_SUN_NAME = 'init_sun_value'\nZOMBIE_LIST = 'zombie_list'\nMAP_EMPTY = 0\nMAP_EXIST = 1\nBACKGROUND_OFFSET_X = 220\nMAP_OFFSET_X = 35\nMAP_OFFSET_Y = 100\n#MENUBAR\nCHOOSEBAR_TYPE = 'choosebar_type'\nCHOOSEBAR_STATIC = 0",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ZOMBIE_LIST",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ZOMBIE_LIST = 'zombie_list'\nMAP_EMPTY = 0\nMAP_EXIST = 1\nBACKGROUND_OFFSET_X = 220\nMAP_OFFSET_X = 35\nMAP_OFFSET_Y = 100\n#MENUBAR\nCHOOSEBAR_TYPE = 'choosebar_type'\nCHOOSEBAR_STATIC = 0\nCHOOSEBAR_MOVE = 1",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "MAP_EMPTY",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "MAP_EMPTY = 0\nMAP_EXIST = 1\nBACKGROUND_OFFSET_X = 220\nMAP_OFFSET_X = 35\nMAP_OFFSET_Y = 100\n#MENUBAR\nCHOOSEBAR_TYPE = 'choosebar_type'\nCHOOSEBAR_STATIC = 0\nCHOOSEBAR_MOVE = 1\nCHOSSEBAR_BOWLING = 2",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "MAP_EXIST",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "MAP_EXIST = 1\nBACKGROUND_OFFSET_X = 220\nMAP_OFFSET_X = 35\nMAP_OFFSET_Y = 100\n#MENUBAR\nCHOOSEBAR_TYPE = 'choosebar_type'\nCHOOSEBAR_STATIC = 0\nCHOOSEBAR_MOVE = 1\nCHOSSEBAR_BOWLING = 2\nMENUBAR_BACKGROUND = 'ChooserBackground'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BACKGROUND_OFFSET_X",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BACKGROUND_OFFSET_X = 220\nMAP_OFFSET_X = 35\nMAP_OFFSET_Y = 100\n#MENUBAR\nCHOOSEBAR_TYPE = 'choosebar_type'\nCHOOSEBAR_STATIC = 0\nCHOOSEBAR_MOVE = 1\nCHOSSEBAR_BOWLING = 2\nMENUBAR_BACKGROUND = 'ChooserBackground'\nMOVEBAR_BACKGROUND = 'MoveBackground'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "MAP_OFFSET_X",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "MAP_OFFSET_X = 35\nMAP_OFFSET_Y = 100\n#MENUBAR\nCHOOSEBAR_TYPE = 'choosebar_type'\nCHOOSEBAR_STATIC = 0\nCHOOSEBAR_MOVE = 1\nCHOSSEBAR_BOWLING = 2\nMENUBAR_BACKGROUND = 'ChooserBackground'\nMOVEBAR_BACKGROUND = 'MoveBackground'\nPANEL_BACKGROUND = 'PanelBackground'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "MAP_OFFSET_Y",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "MAP_OFFSET_Y = 100\n#MENUBAR\nCHOOSEBAR_TYPE = 'choosebar_type'\nCHOOSEBAR_STATIC = 0\nCHOOSEBAR_MOVE = 1\nCHOSSEBAR_BOWLING = 2\nMENUBAR_BACKGROUND = 'ChooserBackground'\nMOVEBAR_BACKGROUND = 'MoveBackground'\nPANEL_BACKGROUND = 'PanelBackground'\nSTART_BUTTON = 'StartButton'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CHOOSEBAR_TYPE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CHOOSEBAR_TYPE = 'choosebar_type'\nCHOOSEBAR_STATIC = 0\nCHOOSEBAR_MOVE = 1\nCHOSSEBAR_BOWLING = 2\nMENUBAR_BACKGROUND = 'ChooserBackground'\nMOVEBAR_BACKGROUND = 'MoveBackground'\nPANEL_BACKGROUND = 'PanelBackground'\nSTART_BUTTON = 'StartButton'\nCARD_POOL = 'card_pool'\nMOVEBAR_CARD_FRESH_TIME = 6000",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CHOOSEBAR_STATIC",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CHOOSEBAR_STATIC = 0\nCHOOSEBAR_MOVE = 1\nCHOSSEBAR_BOWLING = 2\nMENUBAR_BACKGROUND = 'ChooserBackground'\nMOVEBAR_BACKGROUND = 'MoveBackground'\nPANEL_BACKGROUND = 'PanelBackground'\nSTART_BUTTON = 'StartButton'\nCARD_POOL = 'card_pool'\nMOVEBAR_CARD_FRESH_TIME = 6000\nCARD_MOVE_TIME = 60",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CHOOSEBAR_MOVE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CHOOSEBAR_MOVE = 1\nCHOSSEBAR_BOWLING = 2\nMENUBAR_BACKGROUND = 'ChooserBackground'\nMOVEBAR_BACKGROUND = 'MoveBackground'\nPANEL_BACKGROUND = 'PanelBackground'\nSTART_BUTTON = 'StartButton'\nCARD_POOL = 'card_pool'\nMOVEBAR_CARD_FRESH_TIME = 6000\nCARD_MOVE_TIME = 60\n#PLANT INFO",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CHOSSEBAR_BOWLING",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CHOSSEBAR_BOWLING = 2\nMENUBAR_BACKGROUND = 'ChooserBackground'\nMOVEBAR_BACKGROUND = 'MoveBackground'\nPANEL_BACKGROUND = 'PanelBackground'\nSTART_BUTTON = 'StartButton'\nCARD_POOL = 'card_pool'\nMOVEBAR_CARD_FRESH_TIME = 6000\nCARD_MOVE_TIME = 60\n#PLANT INFO\nPLANT_IMAGE_RECT = 'plant_image_rect'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "MENUBAR_BACKGROUND",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "MENUBAR_BACKGROUND = 'ChooserBackground'\nMOVEBAR_BACKGROUND = 'MoveBackground'\nPANEL_BACKGROUND = 'PanelBackground'\nSTART_BUTTON = 'StartButton'\nCARD_POOL = 'card_pool'\nMOVEBAR_CARD_FRESH_TIME = 6000\nCARD_MOVE_TIME = 60\n#PLANT INFO\nPLANT_IMAGE_RECT = 'plant_image_rect'\nCAR = 'car'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "MOVEBAR_BACKGROUND",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "MOVEBAR_BACKGROUND = 'MoveBackground'\nPANEL_BACKGROUND = 'PanelBackground'\nSTART_BUTTON = 'StartButton'\nCARD_POOL = 'card_pool'\nMOVEBAR_CARD_FRESH_TIME = 6000\nCARD_MOVE_TIME = 60\n#PLANT INFO\nPLANT_IMAGE_RECT = 'plant_image_rect'\nCAR = 'car'\nSUN = 'Sun'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "PANEL_BACKGROUND",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "PANEL_BACKGROUND = 'PanelBackground'\nSTART_BUTTON = 'StartButton'\nCARD_POOL = 'card_pool'\nMOVEBAR_CARD_FRESH_TIME = 6000\nCARD_MOVE_TIME = 60\n#PLANT INFO\nPLANT_IMAGE_RECT = 'plant_image_rect'\nCAR = 'car'\nSUN = 'Sun'\nSUNFLOWER = 'SunFlower'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "START_BUTTON",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "START_BUTTON = 'StartButton'\nCARD_POOL = 'card_pool'\nMOVEBAR_CARD_FRESH_TIME = 6000\nCARD_MOVE_TIME = 60\n#PLANT INFO\nPLANT_IMAGE_RECT = 'plant_image_rect'\nCAR = 'car'\nSUN = 'Sun'\nSUNFLOWER = 'SunFlower'\nPEASHOOTER = 'Peashooter'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_POOL",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_POOL = 'card_pool'\nMOVEBAR_CARD_FRESH_TIME = 6000\nCARD_MOVE_TIME = 60\n#PLANT INFO\nPLANT_IMAGE_RECT = 'plant_image_rect'\nCAR = 'car'\nSUN = 'Sun'\nSUNFLOWER = 'SunFlower'\nPEASHOOTER = 'Peashooter'\nSNOWPEASHOOTER = 'SnowPea'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "MOVEBAR_CARD_FRESH_TIME",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "MOVEBAR_CARD_FRESH_TIME = 6000\nCARD_MOVE_TIME = 60\n#PLANT INFO\nPLANT_IMAGE_RECT = 'plant_image_rect'\nCAR = 'car'\nSUN = 'Sun'\nSUNFLOWER = 'SunFlower'\nPEASHOOTER = 'Peashooter'\nSNOWPEASHOOTER = 'SnowPea'\nWALLNUT = 'WallNut'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_MOVE_TIME",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_MOVE_TIME = 60\n#PLANT INFO\nPLANT_IMAGE_RECT = 'plant_image_rect'\nCAR = 'car'\nSUN = 'Sun'\nSUNFLOWER = 'SunFlower'\nPEASHOOTER = 'Peashooter'\nSNOWPEASHOOTER = 'SnowPea'\nWALLNUT = 'WallNut'\nCHERRYBOMB = 'CherryBomb'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "PLANT_IMAGE_RECT",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "PLANT_IMAGE_RECT = 'plant_image_rect'\nCAR = 'car'\nSUN = 'Sun'\nSUNFLOWER = 'SunFlower'\nPEASHOOTER = 'Peashooter'\nSNOWPEASHOOTER = 'SnowPea'\nWALLNUT = 'WallNut'\nCHERRYBOMB = 'CherryBomb'\nTHREEPEASHOOTER = 'Threepeater'\nREPEATERPEA = 'RepeaterPea'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CAR",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CAR = 'car'\nSUN = 'Sun'\nSUNFLOWER = 'SunFlower'\nPEASHOOTER = 'Peashooter'\nSNOWPEASHOOTER = 'SnowPea'\nWALLNUT = 'WallNut'\nCHERRYBOMB = 'CherryBomb'\nTHREEPEASHOOTER = 'Threepeater'\nREPEATERPEA = 'RepeaterPea'\nCHOMPER = 'Chomper'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SUN",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SUN = 'Sun'\nSUNFLOWER = 'SunFlower'\nPEASHOOTER = 'Peashooter'\nSNOWPEASHOOTER = 'SnowPea'\nWALLNUT = 'WallNut'\nCHERRYBOMB = 'CherryBomb'\nTHREEPEASHOOTER = 'Threepeater'\nREPEATERPEA = 'RepeaterPea'\nCHOMPER = 'Chomper'\nCHERRY_BOOM_IMAGE = 'Boom'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SUNFLOWER",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SUNFLOWER = 'SunFlower'\nPEASHOOTER = 'Peashooter'\nSNOWPEASHOOTER = 'SnowPea'\nWALLNUT = 'WallNut'\nCHERRYBOMB = 'CherryBomb'\nTHREEPEASHOOTER = 'Threepeater'\nREPEATERPEA = 'RepeaterPea'\nCHOMPER = 'Chomper'\nCHERRY_BOOM_IMAGE = 'Boom'\nPUFFSHROOM = 'PuffShroom'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "PEASHOOTER",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "PEASHOOTER = 'Peashooter'\nSNOWPEASHOOTER = 'SnowPea'\nWALLNUT = 'WallNut'\nCHERRYBOMB = 'CherryBomb'\nTHREEPEASHOOTER = 'Threepeater'\nREPEATERPEA = 'RepeaterPea'\nCHOMPER = 'Chomper'\nCHERRY_BOOM_IMAGE = 'Boom'\nPUFFSHROOM = 'PuffShroom'\nPOTATOMINE = 'PotatoMine'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SNOWPEASHOOTER",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SNOWPEASHOOTER = 'SnowPea'\nWALLNUT = 'WallNut'\nCHERRYBOMB = 'CherryBomb'\nTHREEPEASHOOTER = 'Threepeater'\nREPEATERPEA = 'RepeaterPea'\nCHOMPER = 'Chomper'\nCHERRY_BOOM_IMAGE = 'Boom'\nPUFFSHROOM = 'PuffShroom'\nPOTATOMINE = 'PotatoMine'\nSQUASH = 'Squash'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "WALLNUT",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "WALLNUT = 'WallNut'\nCHERRYBOMB = 'CherryBomb'\nTHREEPEASHOOTER = 'Threepeater'\nREPEATERPEA = 'RepeaterPea'\nCHOMPER = 'Chomper'\nCHERRY_BOOM_IMAGE = 'Boom'\nPUFFSHROOM = 'PuffShroom'\nPOTATOMINE = 'PotatoMine'\nSQUASH = 'Squash'\nSPIKEWEED = 'Spikeweed'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CHERRYBOMB",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CHERRYBOMB = 'CherryBomb'\nTHREEPEASHOOTER = 'Threepeater'\nREPEATERPEA = 'RepeaterPea'\nCHOMPER = 'Chomper'\nCHERRY_BOOM_IMAGE = 'Boom'\nPUFFSHROOM = 'PuffShroom'\nPOTATOMINE = 'PotatoMine'\nSQUASH = 'Squash'\nSPIKEWEED = 'Spikeweed'\nJALAPENO = 'Jalapeno'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "THREEPEASHOOTER",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "THREEPEASHOOTER = 'Threepeater'\nREPEATERPEA = 'RepeaterPea'\nCHOMPER = 'Chomper'\nCHERRY_BOOM_IMAGE = 'Boom'\nPUFFSHROOM = 'PuffShroom'\nPOTATOMINE = 'PotatoMine'\nSQUASH = 'Squash'\nSPIKEWEED = 'Spikeweed'\nJALAPENO = 'Jalapeno'\nSCAREDYSHROOM = 'ScaredyShroom'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "REPEATERPEA",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "REPEATERPEA = 'RepeaterPea'\nCHOMPER = 'Chomper'\nCHERRY_BOOM_IMAGE = 'Boom'\nPUFFSHROOM = 'PuffShroom'\nPOTATOMINE = 'PotatoMine'\nSQUASH = 'Squash'\nSPIKEWEED = 'Spikeweed'\nJALAPENO = 'Jalapeno'\nSCAREDYSHROOM = 'ScaredyShroom'\nSUNSHROOM = 'SunShroom'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CHOMPER",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CHOMPER = 'Chomper'\nCHERRY_BOOM_IMAGE = 'Boom'\nPUFFSHROOM = 'PuffShroom'\nPOTATOMINE = 'PotatoMine'\nSQUASH = 'Squash'\nSPIKEWEED = 'Spikeweed'\nJALAPENO = 'Jalapeno'\nSCAREDYSHROOM = 'ScaredyShroom'\nSUNSHROOM = 'SunShroom'\nICESHROOM = 'IceShroom'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CHERRY_BOOM_IMAGE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CHERRY_BOOM_IMAGE = 'Boom'\nPUFFSHROOM = 'PuffShroom'\nPOTATOMINE = 'PotatoMine'\nSQUASH = 'Squash'\nSPIKEWEED = 'Spikeweed'\nJALAPENO = 'Jalapeno'\nSCAREDYSHROOM = 'ScaredyShroom'\nSUNSHROOM = 'SunShroom'\nICESHROOM = 'IceShroom'\nHYPNOSHROOM = 'HypnoShroom'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "PUFFSHROOM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "PUFFSHROOM = 'PuffShroom'\nPOTATOMINE = 'PotatoMine'\nSQUASH = 'Squash'\nSPIKEWEED = 'Spikeweed'\nJALAPENO = 'Jalapeno'\nSCAREDYSHROOM = 'ScaredyShroom'\nSUNSHROOM = 'SunShroom'\nICESHROOM = 'IceShroom'\nHYPNOSHROOM = 'HypnoShroom'\nWALLNUTBOWLING = 'WallNutBowling'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "POTATOMINE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "POTATOMINE = 'PotatoMine'\nSQUASH = 'Squash'\nSPIKEWEED = 'Spikeweed'\nJALAPENO = 'Jalapeno'\nSCAREDYSHROOM = 'ScaredyShroom'\nSUNSHROOM = 'SunShroom'\nICESHROOM = 'IceShroom'\nHYPNOSHROOM = 'HypnoShroom'\nWALLNUTBOWLING = 'WallNutBowling'\nREDWALLNUTBOWLING = 'RedWallNutBowling'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SQUASH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SQUASH = 'Squash'\nSPIKEWEED = 'Spikeweed'\nJALAPENO = 'Jalapeno'\nSCAREDYSHROOM = 'ScaredyShroom'\nSUNSHROOM = 'SunShroom'\nICESHROOM = 'IceShroom'\nHYPNOSHROOM = 'HypnoShroom'\nWALLNUTBOWLING = 'WallNutBowling'\nREDWALLNUTBOWLING = 'RedWallNutBowling'\nPLANT_HEALTH = 5",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SPIKEWEED",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SPIKEWEED = 'Spikeweed'\nJALAPENO = 'Jalapeno'\nSCAREDYSHROOM = 'ScaredyShroom'\nSUNSHROOM = 'SunShroom'\nICESHROOM = 'IceShroom'\nHYPNOSHROOM = 'HypnoShroom'\nWALLNUTBOWLING = 'WallNutBowling'\nREDWALLNUTBOWLING = 'RedWallNutBowling'\nPLANT_HEALTH = 5\nWALLNUT_HEALTH = 30",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "JALAPENO",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "JALAPENO = 'Jalapeno'\nSCAREDYSHROOM = 'ScaredyShroom'\nSUNSHROOM = 'SunShroom'\nICESHROOM = 'IceShroom'\nHYPNOSHROOM = 'HypnoShroom'\nWALLNUTBOWLING = 'WallNutBowling'\nREDWALLNUTBOWLING = 'RedWallNutBowling'\nPLANT_HEALTH = 5\nWALLNUT_HEALTH = 30\nWALLNUT_CRACKED1_HEALTH = 20",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SCAREDYSHROOM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SCAREDYSHROOM = 'ScaredyShroom'\nSUNSHROOM = 'SunShroom'\nICESHROOM = 'IceShroom'\nHYPNOSHROOM = 'HypnoShroom'\nWALLNUTBOWLING = 'WallNutBowling'\nREDWALLNUTBOWLING = 'RedWallNutBowling'\nPLANT_HEALTH = 5\nWALLNUT_HEALTH = 30\nWALLNUT_CRACKED1_HEALTH = 20\nWALLNUT_CRACKED2_HEALTH = 10",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SUNSHROOM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SUNSHROOM = 'SunShroom'\nICESHROOM = 'IceShroom'\nHYPNOSHROOM = 'HypnoShroom'\nWALLNUTBOWLING = 'WallNutBowling'\nREDWALLNUTBOWLING = 'RedWallNutBowling'\nPLANT_HEALTH = 5\nWALLNUT_HEALTH = 30\nWALLNUT_CRACKED1_HEALTH = 20\nWALLNUT_CRACKED2_HEALTH = 10\nWALLNUT_BOWLING_DAMAGE = 10",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ICESHROOM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ICESHROOM = 'IceShroom'\nHYPNOSHROOM = 'HypnoShroom'\nWALLNUTBOWLING = 'WallNutBowling'\nREDWALLNUTBOWLING = 'RedWallNutBowling'\nPLANT_HEALTH = 5\nWALLNUT_HEALTH = 30\nWALLNUT_CRACKED1_HEALTH = 20\nWALLNUT_CRACKED2_HEALTH = 10\nWALLNUT_BOWLING_DAMAGE = 10\nPRODUCE_SUN_INTERVAL = 7000",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "HYPNOSHROOM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "HYPNOSHROOM = 'HypnoShroom'\nWALLNUTBOWLING = 'WallNutBowling'\nREDWALLNUTBOWLING = 'RedWallNutBowling'\nPLANT_HEALTH = 5\nWALLNUT_HEALTH = 30\nWALLNUT_CRACKED1_HEALTH = 20\nWALLNUT_CRACKED2_HEALTH = 10\nWALLNUT_BOWLING_DAMAGE = 10\nPRODUCE_SUN_INTERVAL = 7000\nFLOWER_SUN_INTERVAL = 22000",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "WALLNUTBOWLING",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "WALLNUTBOWLING = 'WallNutBowling'\nREDWALLNUTBOWLING = 'RedWallNutBowling'\nPLANT_HEALTH = 5\nWALLNUT_HEALTH = 30\nWALLNUT_CRACKED1_HEALTH = 20\nWALLNUT_CRACKED2_HEALTH = 10\nWALLNUT_BOWLING_DAMAGE = 10\nPRODUCE_SUN_INTERVAL = 7000\nFLOWER_SUN_INTERVAL = 22000\nSUN_LIVE_TIME = 7000",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "REDWALLNUTBOWLING",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "REDWALLNUTBOWLING = 'RedWallNutBowling'\nPLANT_HEALTH = 5\nWALLNUT_HEALTH = 30\nWALLNUT_CRACKED1_HEALTH = 20\nWALLNUT_CRACKED2_HEALTH = 10\nWALLNUT_BOWLING_DAMAGE = 10\nPRODUCE_SUN_INTERVAL = 7000\nFLOWER_SUN_INTERVAL = 22000\nSUN_LIVE_TIME = 7000\nSUN_VALUE = 25",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "PLANT_HEALTH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "PLANT_HEALTH = 5\nWALLNUT_HEALTH = 30\nWALLNUT_CRACKED1_HEALTH = 20\nWALLNUT_CRACKED2_HEALTH = 10\nWALLNUT_BOWLING_DAMAGE = 10\nPRODUCE_SUN_INTERVAL = 7000\nFLOWER_SUN_INTERVAL = 22000\nSUN_LIVE_TIME = 7000\nSUN_VALUE = 25\nICE_SLOW_TIME = 2000",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "WALLNUT_HEALTH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "WALLNUT_HEALTH = 30\nWALLNUT_CRACKED1_HEALTH = 20\nWALLNUT_CRACKED2_HEALTH = 10\nWALLNUT_BOWLING_DAMAGE = 10\nPRODUCE_SUN_INTERVAL = 7000\nFLOWER_SUN_INTERVAL = 22000\nSUN_LIVE_TIME = 7000\nSUN_VALUE = 25\nICE_SLOW_TIME = 2000\nFREEZE_TIME = 7500",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "WALLNUT_CRACKED1_HEALTH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "WALLNUT_CRACKED1_HEALTH = 20\nWALLNUT_CRACKED2_HEALTH = 10\nWALLNUT_BOWLING_DAMAGE = 10\nPRODUCE_SUN_INTERVAL = 7000\nFLOWER_SUN_INTERVAL = 22000\nSUN_LIVE_TIME = 7000\nSUN_VALUE = 25\nICE_SLOW_TIME = 2000\nFREEZE_TIME = 7500\nICETRAP = 'IceTrap'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "WALLNUT_CRACKED2_HEALTH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "WALLNUT_CRACKED2_HEALTH = 10\nWALLNUT_BOWLING_DAMAGE = 10\nPRODUCE_SUN_INTERVAL = 7000\nFLOWER_SUN_INTERVAL = 22000\nSUN_LIVE_TIME = 7000\nSUN_VALUE = 25\nICE_SLOW_TIME = 2000\nFREEZE_TIME = 7500\nICETRAP = 'IceTrap'\n#PLANT CARD INFO",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "WALLNUT_BOWLING_DAMAGE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "WALLNUT_BOWLING_DAMAGE = 10\nPRODUCE_SUN_INTERVAL = 7000\nFLOWER_SUN_INTERVAL = 22000\nSUN_LIVE_TIME = 7000\nSUN_VALUE = 25\nICE_SLOW_TIME = 2000\nFREEZE_TIME = 7500\nICETRAP = 'IceTrap'\n#PLANT CARD INFO\nCARD_SUNFLOWER = 'card_sunflower'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "PRODUCE_SUN_INTERVAL",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "PRODUCE_SUN_INTERVAL = 7000\nFLOWER_SUN_INTERVAL = 22000\nSUN_LIVE_TIME = 7000\nSUN_VALUE = 25\nICE_SLOW_TIME = 2000\nFREEZE_TIME = 7500\nICETRAP = 'IceTrap'\n#PLANT CARD INFO\nCARD_SUNFLOWER = 'card_sunflower'\nCARD_PEASHOOTER = 'card_peashooter'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "FLOWER_SUN_INTERVAL",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "FLOWER_SUN_INTERVAL = 22000\nSUN_LIVE_TIME = 7000\nSUN_VALUE = 25\nICE_SLOW_TIME = 2000\nFREEZE_TIME = 7500\nICETRAP = 'IceTrap'\n#PLANT CARD INFO\nCARD_SUNFLOWER = 'card_sunflower'\nCARD_PEASHOOTER = 'card_peashooter'\nCARD_SNOWPEASHOOTER = 'card_snowpea'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SUN_LIVE_TIME",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SUN_LIVE_TIME = 7000\nSUN_VALUE = 25\nICE_SLOW_TIME = 2000\nFREEZE_TIME = 7500\nICETRAP = 'IceTrap'\n#PLANT CARD INFO\nCARD_SUNFLOWER = 'card_sunflower'\nCARD_PEASHOOTER = 'card_peashooter'\nCARD_SNOWPEASHOOTER = 'card_snowpea'\nCARD_WALLNUT = 'card_wallnut'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SUN_VALUE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SUN_VALUE = 25\nICE_SLOW_TIME = 2000\nFREEZE_TIME = 7500\nICETRAP = 'IceTrap'\n#PLANT CARD INFO\nCARD_SUNFLOWER = 'card_sunflower'\nCARD_PEASHOOTER = 'card_peashooter'\nCARD_SNOWPEASHOOTER = 'card_snowpea'\nCARD_WALLNUT = 'card_wallnut'\nCARD_CHERRYBOMB = 'card_cherrybomb'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ICE_SLOW_TIME",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ICE_SLOW_TIME = 2000\nFREEZE_TIME = 7500\nICETRAP = 'IceTrap'\n#PLANT CARD INFO\nCARD_SUNFLOWER = 'card_sunflower'\nCARD_PEASHOOTER = 'card_peashooter'\nCARD_SNOWPEASHOOTER = 'card_snowpea'\nCARD_WALLNUT = 'card_wallnut'\nCARD_CHERRYBOMB = 'card_cherrybomb'\nCARD_THREEPEASHOOTER = 'card_threepeashooter'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "FREEZE_TIME",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "FREEZE_TIME = 7500\nICETRAP = 'IceTrap'\n#PLANT CARD INFO\nCARD_SUNFLOWER = 'card_sunflower'\nCARD_PEASHOOTER = 'card_peashooter'\nCARD_SNOWPEASHOOTER = 'card_snowpea'\nCARD_WALLNUT = 'card_wallnut'\nCARD_CHERRYBOMB = 'card_cherrybomb'\nCARD_THREEPEASHOOTER = 'card_threepeashooter'\nCARD_REPEATERPEA = 'card_repeaterpea'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ICETRAP",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ICETRAP = 'IceTrap'\n#PLANT CARD INFO\nCARD_SUNFLOWER = 'card_sunflower'\nCARD_PEASHOOTER = 'card_peashooter'\nCARD_SNOWPEASHOOTER = 'card_snowpea'\nCARD_WALLNUT = 'card_wallnut'\nCARD_CHERRYBOMB = 'card_cherrybomb'\nCARD_THREEPEASHOOTER = 'card_threepeashooter'\nCARD_REPEATERPEA = 'card_repeaterpea'\nCARD_CHOMPER = 'card_chomper'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_SUNFLOWER",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_SUNFLOWER = 'card_sunflower'\nCARD_PEASHOOTER = 'card_peashooter'\nCARD_SNOWPEASHOOTER = 'card_snowpea'\nCARD_WALLNUT = 'card_wallnut'\nCARD_CHERRYBOMB = 'card_cherrybomb'\nCARD_THREEPEASHOOTER = 'card_threepeashooter'\nCARD_REPEATERPEA = 'card_repeaterpea'\nCARD_CHOMPER = 'card_chomper'\nCARD_PUFFSHROOM = 'card_puffshroom'\nCARD_POTATOMINE = 'card_potatomine'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_PEASHOOTER",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_PEASHOOTER = 'card_peashooter'\nCARD_SNOWPEASHOOTER = 'card_snowpea'\nCARD_WALLNUT = 'card_wallnut'\nCARD_CHERRYBOMB = 'card_cherrybomb'\nCARD_THREEPEASHOOTER = 'card_threepeashooter'\nCARD_REPEATERPEA = 'card_repeaterpea'\nCARD_CHOMPER = 'card_chomper'\nCARD_PUFFSHROOM = 'card_puffshroom'\nCARD_POTATOMINE = 'card_potatomine'\nCARD_SQUASH = 'card_squash'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_SNOWPEASHOOTER",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_SNOWPEASHOOTER = 'card_snowpea'\nCARD_WALLNUT = 'card_wallnut'\nCARD_CHERRYBOMB = 'card_cherrybomb'\nCARD_THREEPEASHOOTER = 'card_threepeashooter'\nCARD_REPEATERPEA = 'card_repeaterpea'\nCARD_CHOMPER = 'card_chomper'\nCARD_PUFFSHROOM = 'card_puffshroom'\nCARD_POTATOMINE = 'card_potatomine'\nCARD_SQUASH = 'card_squash'\nCARD_SPIKEWEED = 'card_spikeweed'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_WALLNUT",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_WALLNUT = 'card_wallnut'\nCARD_CHERRYBOMB = 'card_cherrybomb'\nCARD_THREEPEASHOOTER = 'card_threepeashooter'\nCARD_REPEATERPEA = 'card_repeaterpea'\nCARD_CHOMPER = 'card_chomper'\nCARD_PUFFSHROOM = 'card_puffshroom'\nCARD_POTATOMINE = 'card_potatomine'\nCARD_SQUASH = 'card_squash'\nCARD_SPIKEWEED = 'card_spikeweed'\nCARD_JALAPENO = 'card_jalapeno'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_CHERRYBOMB",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_CHERRYBOMB = 'card_cherrybomb'\nCARD_THREEPEASHOOTER = 'card_threepeashooter'\nCARD_REPEATERPEA = 'card_repeaterpea'\nCARD_CHOMPER = 'card_chomper'\nCARD_PUFFSHROOM = 'card_puffshroom'\nCARD_POTATOMINE = 'card_potatomine'\nCARD_SQUASH = 'card_squash'\nCARD_SPIKEWEED = 'card_spikeweed'\nCARD_JALAPENO = 'card_jalapeno'\nCARD_SCAREDYSHROOM = 'card_scaredyshroom'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_THREEPEASHOOTER",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_THREEPEASHOOTER = 'card_threepeashooter'\nCARD_REPEATERPEA = 'card_repeaterpea'\nCARD_CHOMPER = 'card_chomper'\nCARD_PUFFSHROOM = 'card_puffshroom'\nCARD_POTATOMINE = 'card_potatomine'\nCARD_SQUASH = 'card_squash'\nCARD_SPIKEWEED = 'card_spikeweed'\nCARD_JALAPENO = 'card_jalapeno'\nCARD_SCAREDYSHROOM = 'card_scaredyshroom'\nCARD_SUNSHROOM = 'card_sunshroom'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_REPEATERPEA",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_REPEATERPEA = 'card_repeaterpea'\nCARD_CHOMPER = 'card_chomper'\nCARD_PUFFSHROOM = 'card_puffshroom'\nCARD_POTATOMINE = 'card_potatomine'\nCARD_SQUASH = 'card_squash'\nCARD_SPIKEWEED = 'card_spikeweed'\nCARD_JALAPENO = 'card_jalapeno'\nCARD_SCAREDYSHROOM = 'card_scaredyshroom'\nCARD_SUNSHROOM = 'card_sunshroom'\nCARD_ICESHROOM = 'card_iceshroom'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_CHOMPER",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_CHOMPER = 'card_chomper'\nCARD_PUFFSHROOM = 'card_puffshroom'\nCARD_POTATOMINE = 'card_potatomine'\nCARD_SQUASH = 'card_squash'\nCARD_SPIKEWEED = 'card_spikeweed'\nCARD_JALAPENO = 'card_jalapeno'\nCARD_SCAREDYSHROOM = 'card_scaredyshroom'\nCARD_SUNSHROOM = 'card_sunshroom'\nCARD_ICESHROOM = 'card_iceshroom'\nCARD_HYPNOSHROOM = 'card_hypnoshroom'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_PUFFSHROOM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_PUFFSHROOM = 'card_puffshroom'\nCARD_POTATOMINE = 'card_potatomine'\nCARD_SQUASH = 'card_squash'\nCARD_SPIKEWEED = 'card_spikeweed'\nCARD_JALAPENO = 'card_jalapeno'\nCARD_SCAREDYSHROOM = 'card_scaredyshroom'\nCARD_SUNSHROOM = 'card_sunshroom'\nCARD_ICESHROOM = 'card_iceshroom'\nCARD_HYPNOSHROOM = 'card_hypnoshroom'\nCARD_REDWALLNUT = 'card_redwallnut'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_POTATOMINE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_POTATOMINE = 'card_potatomine'\nCARD_SQUASH = 'card_squash'\nCARD_SPIKEWEED = 'card_spikeweed'\nCARD_JALAPENO = 'card_jalapeno'\nCARD_SCAREDYSHROOM = 'card_scaredyshroom'\nCARD_SUNSHROOM = 'card_sunshroom'\nCARD_ICESHROOM = 'card_iceshroom'\nCARD_HYPNOSHROOM = 'card_hypnoshroom'\nCARD_REDWALLNUT = 'card_redwallnut'\n#BULLET INFO",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_SQUASH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_SQUASH = 'card_squash'\nCARD_SPIKEWEED = 'card_spikeweed'\nCARD_JALAPENO = 'card_jalapeno'\nCARD_SCAREDYSHROOM = 'card_scaredyshroom'\nCARD_SUNSHROOM = 'card_sunshroom'\nCARD_ICESHROOM = 'card_iceshroom'\nCARD_HYPNOSHROOM = 'card_hypnoshroom'\nCARD_REDWALLNUT = 'card_redwallnut'\n#BULLET INFO\nBULLET_PEA = 'PeaNormal'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_SPIKEWEED",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_SPIKEWEED = 'card_spikeweed'\nCARD_JALAPENO = 'card_jalapeno'\nCARD_SCAREDYSHROOM = 'card_scaredyshroom'\nCARD_SUNSHROOM = 'card_sunshroom'\nCARD_ICESHROOM = 'card_iceshroom'\nCARD_HYPNOSHROOM = 'card_hypnoshroom'\nCARD_REDWALLNUT = 'card_redwallnut'\n#BULLET INFO\nBULLET_PEA = 'PeaNormal'\nBULLET_PEA_ICE = 'PeaIce'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_JALAPENO",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_JALAPENO = 'card_jalapeno'\nCARD_SCAREDYSHROOM = 'card_scaredyshroom'\nCARD_SUNSHROOM = 'card_sunshroom'\nCARD_ICESHROOM = 'card_iceshroom'\nCARD_HYPNOSHROOM = 'card_hypnoshroom'\nCARD_REDWALLNUT = 'card_redwallnut'\n#BULLET INFO\nBULLET_PEA = 'PeaNormal'\nBULLET_PEA_ICE = 'PeaIce'\nBULLET_MUSHROOM = 'BulletMushRoom'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_SCAREDYSHROOM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_SCAREDYSHROOM = 'card_scaredyshroom'\nCARD_SUNSHROOM = 'card_sunshroom'\nCARD_ICESHROOM = 'card_iceshroom'\nCARD_HYPNOSHROOM = 'card_hypnoshroom'\nCARD_REDWALLNUT = 'card_redwallnut'\n#BULLET INFO\nBULLET_PEA = 'PeaNormal'\nBULLET_PEA_ICE = 'PeaIce'\nBULLET_MUSHROOM = 'BulletMushRoom'\nBULLET_DAMAGE_NORMAL = 1",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_SUNSHROOM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_SUNSHROOM = 'card_sunshroom'\nCARD_ICESHROOM = 'card_iceshroom'\nCARD_HYPNOSHROOM = 'card_hypnoshroom'\nCARD_REDWALLNUT = 'card_redwallnut'\n#BULLET INFO\nBULLET_PEA = 'PeaNormal'\nBULLET_PEA_ICE = 'PeaIce'\nBULLET_MUSHROOM = 'BulletMushRoom'\nBULLET_DAMAGE_NORMAL = 1\n#ZOMBIE INFO",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_ICESHROOM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_ICESHROOM = 'card_iceshroom'\nCARD_HYPNOSHROOM = 'card_hypnoshroom'\nCARD_REDWALLNUT = 'card_redwallnut'\n#BULLET INFO\nBULLET_PEA = 'PeaNormal'\nBULLET_PEA_ICE = 'PeaIce'\nBULLET_MUSHROOM = 'BulletMushRoom'\nBULLET_DAMAGE_NORMAL = 1\n#ZOMBIE INFO\nZOMBIE_IMAGE_RECT = 'zombie_image_rect'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_HYPNOSHROOM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_HYPNOSHROOM = 'card_hypnoshroom'\nCARD_REDWALLNUT = 'card_redwallnut'\n#BULLET INFO\nBULLET_PEA = 'PeaNormal'\nBULLET_PEA_ICE = 'PeaIce'\nBULLET_MUSHROOM = 'BulletMushRoom'\nBULLET_DAMAGE_NORMAL = 1\n#ZOMBIE INFO\nZOMBIE_IMAGE_RECT = 'zombie_image_rect'\nZOMBIE_HEAD = 'ZombieHead'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CARD_REDWALLNUT",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CARD_REDWALLNUT = 'card_redwallnut'\n#BULLET INFO\nBULLET_PEA = 'PeaNormal'\nBULLET_PEA_ICE = 'PeaIce'\nBULLET_MUSHROOM = 'BulletMushRoom'\nBULLET_DAMAGE_NORMAL = 1\n#ZOMBIE INFO\nZOMBIE_IMAGE_RECT = 'zombie_image_rect'\nZOMBIE_HEAD = 'ZombieHead'\nNORMAL_ZOMBIE = 'Zombie'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BULLET_PEA",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BULLET_PEA = 'PeaNormal'\nBULLET_PEA_ICE = 'PeaIce'\nBULLET_MUSHROOM = 'BulletMushRoom'\nBULLET_DAMAGE_NORMAL = 1\n#ZOMBIE INFO\nZOMBIE_IMAGE_RECT = 'zombie_image_rect'\nZOMBIE_HEAD = 'ZombieHead'\nNORMAL_ZOMBIE = 'Zombie'\nCONEHEAD_ZOMBIE = 'ConeheadZombie'\nBUCKETHEAD_ZOMBIE = 'BucketheadZombie'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BULLET_PEA_ICE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BULLET_PEA_ICE = 'PeaIce'\nBULLET_MUSHROOM = 'BulletMushRoom'\nBULLET_DAMAGE_NORMAL = 1\n#ZOMBIE INFO\nZOMBIE_IMAGE_RECT = 'zombie_image_rect'\nZOMBIE_HEAD = 'ZombieHead'\nNORMAL_ZOMBIE = 'Zombie'\nCONEHEAD_ZOMBIE = 'ConeheadZombie'\nBUCKETHEAD_ZOMBIE = 'BucketheadZombie'\nFLAG_ZOMBIE = 'FlagZombie'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BULLET_MUSHROOM",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BULLET_MUSHROOM = 'BulletMushRoom'\nBULLET_DAMAGE_NORMAL = 1\n#ZOMBIE INFO\nZOMBIE_IMAGE_RECT = 'zombie_image_rect'\nZOMBIE_HEAD = 'ZombieHead'\nNORMAL_ZOMBIE = 'Zombie'\nCONEHEAD_ZOMBIE = 'ConeheadZombie'\nBUCKETHEAD_ZOMBIE = 'BucketheadZombie'\nFLAG_ZOMBIE = 'FlagZombie'\nNEWSPAPER_ZOMBIE = 'NewspaperZombie'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BULLET_DAMAGE_NORMAL",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BULLET_DAMAGE_NORMAL = 1\n#ZOMBIE INFO\nZOMBIE_IMAGE_RECT = 'zombie_image_rect'\nZOMBIE_HEAD = 'ZombieHead'\nNORMAL_ZOMBIE = 'Zombie'\nCONEHEAD_ZOMBIE = 'ConeheadZombie'\nBUCKETHEAD_ZOMBIE = 'BucketheadZombie'\nFLAG_ZOMBIE = 'FlagZombie'\nNEWSPAPER_ZOMBIE = 'NewspaperZombie'\nBOOMDIE = 'BoomDie'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ZOMBIE_IMAGE_RECT",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ZOMBIE_IMAGE_RECT = 'zombie_image_rect'\nZOMBIE_HEAD = 'ZombieHead'\nNORMAL_ZOMBIE = 'Zombie'\nCONEHEAD_ZOMBIE = 'ConeheadZombie'\nBUCKETHEAD_ZOMBIE = 'BucketheadZombie'\nFLAG_ZOMBIE = 'FlagZombie'\nNEWSPAPER_ZOMBIE = 'NewspaperZombie'\nBOOMDIE = 'BoomDie'\nLOSTHEAD_HEALTH = 5\nNORMAL_HEALTH = 10",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ZOMBIE_HEAD",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ZOMBIE_HEAD = 'ZombieHead'\nNORMAL_ZOMBIE = 'Zombie'\nCONEHEAD_ZOMBIE = 'ConeheadZombie'\nBUCKETHEAD_ZOMBIE = 'BucketheadZombie'\nFLAG_ZOMBIE = 'FlagZombie'\nNEWSPAPER_ZOMBIE = 'NewspaperZombie'\nBOOMDIE = 'BoomDie'\nLOSTHEAD_HEALTH = 5\nNORMAL_HEALTH = 10\nFLAG_HEALTH = 15",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "NORMAL_ZOMBIE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "NORMAL_ZOMBIE = 'Zombie'\nCONEHEAD_ZOMBIE = 'ConeheadZombie'\nBUCKETHEAD_ZOMBIE = 'BucketheadZombie'\nFLAG_ZOMBIE = 'FlagZombie'\nNEWSPAPER_ZOMBIE = 'NewspaperZombie'\nBOOMDIE = 'BoomDie'\nLOSTHEAD_HEALTH = 5\nNORMAL_HEALTH = 10\nFLAG_HEALTH = 15\nCONEHEAD_HEALTH = 20",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CONEHEAD_ZOMBIE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CONEHEAD_ZOMBIE = 'ConeheadZombie'\nBUCKETHEAD_ZOMBIE = 'BucketheadZombie'\nFLAG_ZOMBIE = 'FlagZombie'\nNEWSPAPER_ZOMBIE = 'NewspaperZombie'\nBOOMDIE = 'BoomDie'\nLOSTHEAD_HEALTH = 5\nNORMAL_HEALTH = 10\nFLAG_HEALTH = 15\nCONEHEAD_HEALTH = 20\nBUCKETHEAD_HEALTH = 30",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BUCKETHEAD_ZOMBIE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BUCKETHEAD_ZOMBIE = 'BucketheadZombie'\nFLAG_ZOMBIE = 'FlagZombie'\nNEWSPAPER_ZOMBIE = 'NewspaperZombie'\nBOOMDIE = 'BoomDie'\nLOSTHEAD_HEALTH = 5\nNORMAL_HEALTH = 10\nFLAG_HEALTH = 15\nCONEHEAD_HEALTH = 20\nBUCKETHEAD_HEALTH = 30\nNEWSPAPER_HEALTH = 15",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "FLAG_ZOMBIE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "FLAG_ZOMBIE = 'FlagZombie'\nNEWSPAPER_ZOMBIE = 'NewspaperZombie'\nBOOMDIE = 'BoomDie'\nLOSTHEAD_HEALTH = 5\nNORMAL_HEALTH = 10\nFLAG_HEALTH = 15\nCONEHEAD_HEALTH = 20\nBUCKETHEAD_HEALTH = 30\nNEWSPAPER_HEALTH = 15\nATTACK_INTERVAL = 1000",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "NEWSPAPER_ZOMBIE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "NEWSPAPER_ZOMBIE = 'NewspaperZombie'\nBOOMDIE = 'BoomDie'\nLOSTHEAD_HEALTH = 5\nNORMAL_HEALTH = 10\nFLAG_HEALTH = 15\nCONEHEAD_HEALTH = 20\nBUCKETHEAD_HEALTH = 30\nNEWSPAPER_HEALTH = 15\nATTACK_INTERVAL = 1000\nZOMBIE_WALK_INTERVAL = 70",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BOOMDIE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BOOMDIE = 'BoomDie'\nLOSTHEAD_HEALTH = 5\nNORMAL_HEALTH = 10\nFLAG_HEALTH = 15\nCONEHEAD_HEALTH = 20\nBUCKETHEAD_HEALTH = 30\nNEWSPAPER_HEALTH = 15\nATTACK_INTERVAL = 1000\nZOMBIE_WALK_INTERVAL = 70\nZOMBIE_START_X = SCREEN_WIDTH + 50",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "LOSTHEAD_HEALTH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "LOSTHEAD_HEALTH = 5\nNORMAL_HEALTH = 10\nFLAG_HEALTH = 15\nCONEHEAD_HEALTH = 20\nBUCKETHEAD_HEALTH = 30\nNEWSPAPER_HEALTH = 15\nATTACK_INTERVAL = 1000\nZOMBIE_WALK_INTERVAL = 70\nZOMBIE_START_X = SCREEN_WIDTH + 50\n#STATE",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "NORMAL_HEALTH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "NORMAL_HEALTH = 10\nFLAG_HEALTH = 15\nCONEHEAD_HEALTH = 20\nBUCKETHEAD_HEALTH = 30\nNEWSPAPER_HEALTH = 15\nATTACK_INTERVAL = 1000\nZOMBIE_WALK_INTERVAL = 70\nZOMBIE_START_X = SCREEN_WIDTH + 50\n#STATE\nIDLE = 'idle'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "FLAG_HEALTH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "FLAG_HEALTH = 15\nCONEHEAD_HEALTH = 20\nBUCKETHEAD_HEALTH = 30\nNEWSPAPER_HEALTH = 15\nATTACK_INTERVAL = 1000\nZOMBIE_WALK_INTERVAL = 70\nZOMBIE_START_X = SCREEN_WIDTH + 50\n#STATE\nIDLE = 'idle'\nFLY = 'fly'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CONEHEAD_HEALTH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CONEHEAD_HEALTH = 20\nBUCKETHEAD_HEALTH = 30\nNEWSPAPER_HEALTH = 15\nATTACK_INTERVAL = 1000\nZOMBIE_WALK_INTERVAL = 70\nZOMBIE_START_X = SCREEN_WIDTH + 50\n#STATE\nIDLE = 'idle'\nFLY = 'fly'\nEXPLODE = 'explode'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BUCKETHEAD_HEALTH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BUCKETHEAD_HEALTH = 30\nNEWSPAPER_HEALTH = 15\nATTACK_INTERVAL = 1000\nZOMBIE_WALK_INTERVAL = 70\nZOMBIE_START_X = SCREEN_WIDTH + 50\n#STATE\nIDLE = 'idle'\nFLY = 'fly'\nEXPLODE = 'explode'\nATTACK = 'attack'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "NEWSPAPER_HEALTH",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "NEWSPAPER_HEALTH = 15\nATTACK_INTERVAL = 1000\nZOMBIE_WALK_INTERVAL = 70\nZOMBIE_START_X = SCREEN_WIDTH + 50\n#STATE\nIDLE = 'idle'\nFLY = 'fly'\nEXPLODE = 'explode'\nATTACK = 'attack'\nATTACKED = 'attacked'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ATTACK_INTERVAL",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ATTACK_INTERVAL = 1000\nZOMBIE_WALK_INTERVAL = 70\nZOMBIE_START_X = SCREEN_WIDTH + 50\n#STATE\nIDLE = 'idle'\nFLY = 'fly'\nEXPLODE = 'explode'\nATTACK = 'attack'\nATTACKED = 'attacked'\nDIGEST = 'digest'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ZOMBIE_WALK_INTERVAL",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ZOMBIE_WALK_INTERVAL = 70\nZOMBIE_START_X = SCREEN_WIDTH + 50\n#STATE\nIDLE = 'idle'\nFLY = 'fly'\nEXPLODE = 'explode'\nATTACK = 'attack'\nATTACKED = 'attacked'\nDIGEST = 'digest'\nWALK = 'walk'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ZOMBIE_START_X",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ZOMBIE_START_X = SCREEN_WIDTH + 50\n#STATE\nIDLE = 'idle'\nFLY = 'fly'\nEXPLODE = 'explode'\nATTACK = 'attack'\nATTACKED = 'attacked'\nDIGEST = 'digest'\nWALK = 'walk'\nDIE = 'die'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "IDLE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "IDLE = 'idle'\nFLY = 'fly'\nEXPLODE = 'explode'\nATTACK = 'attack'\nATTACKED = 'attacked'\nDIGEST = 'digest'\nWALK = 'walk'\nDIE = 'die'\nCRY = 'cry'\nFREEZE = 'freeze'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "FLY",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "FLY = 'fly'\nEXPLODE = 'explode'\nATTACK = 'attack'\nATTACKED = 'attacked'\nDIGEST = 'digest'\nWALK = 'walk'\nDIE = 'die'\nCRY = 'cry'\nFREEZE = 'freeze'\nSLEEP = 'sleep'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "EXPLODE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "EXPLODE = 'explode'\nATTACK = 'attack'\nATTACKED = 'attacked'\nDIGEST = 'digest'\nWALK = 'walk'\nDIE = 'die'\nCRY = 'cry'\nFREEZE = 'freeze'\nSLEEP = 'sleep'\n#LEVEL STATE",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ATTACK",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ATTACK = 'attack'\nATTACKED = 'attacked'\nDIGEST = 'digest'\nWALK = 'walk'\nDIE = 'die'\nCRY = 'cry'\nFREEZE = 'freeze'\nSLEEP = 'sleep'\n#LEVEL STATE\nCHOOSE = 'choose'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "ATTACKED",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "ATTACKED = 'attacked'\nDIGEST = 'digest'\nWALK = 'walk'\nDIE = 'die'\nCRY = 'cry'\nFREEZE = 'freeze'\nSLEEP = 'sleep'\n#LEVEL STATE\nCHOOSE = 'choose'\nPLAY = 'play'",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "DIGEST",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "DIGEST = 'digest'\nWALK = 'walk'\nDIE = 'die'\nCRY = 'cry'\nFREEZE = 'freeze'\nSLEEP = 'sleep'\n#LEVEL STATE\nCHOOSE = 'choose'\nPLAY = 'play'\n#BACKGROUND",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "WALK",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "WALK = 'walk'\nDIE = 'die'\nCRY = 'cry'\nFREEZE = 'freeze'\nSLEEP = 'sleep'\n#LEVEL STATE\nCHOOSE = 'choose'\nPLAY = 'play'\n#BACKGROUND\nBACKGROUND_DAY = 0",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "DIE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "DIE = 'die'\nCRY = 'cry'\nFREEZE = 'freeze'\nSLEEP = 'sleep'\n#LEVEL STATE\nCHOOSE = 'choose'\nPLAY = 'play'\n#BACKGROUND\nBACKGROUND_DAY = 0\nBACKGROUND_NIGHT = 1",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CRY",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CRY = 'cry'\nFREEZE = 'freeze'\nSLEEP = 'sleep'\n#LEVEL STATE\nCHOOSE = 'choose'\nPLAY = 'play'\n#BACKGROUND\nBACKGROUND_DAY = 0\nBACKGROUND_NIGHT = 1",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "FREEZE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "FREEZE = 'freeze'\nSLEEP = 'sleep'\n#LEVEL STATE\nCHOOSE = 'choose'\nPLAY = 'play'\n#BACKGROUND\nBACKGROUND_DAY = 0\nBACKGROUND_NIGHT = 1",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "SLEEP",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "SLEEP = 'sleep'\n#LEVEL STATE\nCHOOSE = 'choose'\nPLAY = 'play'\n#BACKGROUND\nBACKGROUND_DAY = 0\nBACKGROUND_NIGHT = 1",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "CHOOSE",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "CHOOSE = 'choose'\nPLAY = 'play'\n#BACKGROUND\nBACKGROUND_DAY = 0\nBACKGROUND_NIGHT = 1",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "PLAY",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "PLAY = 'play'\n#BACKGROUND\nBACKGROUND_DAY = 0\nBACKGROUND_NIGHT = 1",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BACKGROUND_DAY",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BACKGROUND_DAY = 0\nBACKGROUND_NIGHT = 1",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "BACKGROUND_NIGHT",
        "kind": 5,
        "importPath": "all files.c++.pvz.constants",
        "description": "all files.c++.pvz.constants",
        "peekOfCode": "BACKGROUND_NIGHT = 1",
        "detail": "all files.c++.pvz.constants",
        "documentation": {}
    },
    {
        "label": "Map",
        "kind": 6,
        "importPath": "all files.c++.pvz.map",
        "description": "all files.c++.pvz.map",
        "peekOfCode": "class Map():\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        self.map = [[0 for x in range(self.width)] for y in range(self.height)]\n    def isValid(self, map_x, map_y):\n        if (map_x < 0 or map_x >= self.width or\n            map_y < 0 or map_y >= self.height):\n            return False\n        return True",
        "detail": "all files.c++.pvz.map",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.map",
        "description": "all files.c++.pvz.map",
        "peekOfCode": "__author__ = 'marble_xu'\nimport random\nimport pygame as pg\nfrom .. import tool\nfrom .. import constants as c\nclass Map():\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        self.map = [[0 for x in range(self.width)] for y in range(self.height)]",
        "detail": "all files.c++.pvz.map",
        "documentation": {}
    },
    {
        "label": "Card",
        "kind": 6,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "class Card():\n    def __init__(self, x, y, name_index, scale=0.78):\n        self.loadFrame(card_name_list[name_index], scale)\n        self.rect = self.orig_image.get_rect()\n        self.rect.x = x\n        self.rect.y = y\n        self.name_index = name_index\n        self.sun_cost = plant_sun_list[name_index]\n        self.frozen_time = plant_frozen_time_list[name_index]\n        self.frozen_timer = -self.frozen_time",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "MenuBar",
        "kind": 6,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "class MenuBar():\n    def __init__(self, card_list, sun_value):\n        self.loadFrame(c.MENUBAR_BACKGROUND)\n        self.rect = self.image.get_rect()\n        self.rect.x = 10\n        self.rect.y = 0\n        self.sun_value = sun_value\n        self.card_offset_x = 32\n        self.setupCards(card_list)\n    def loadFrame(self, name):",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "Panel",
        "kind": 6,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "class Panel():\n    def __init__(self, card_list, sun_value):\n        self.loadImages(sun_value)\n        self.selected_cards = []\n        self.selected_num = 0\n        self.setupCards(card_list)\n    def loadFrame(self, name):\n        frame = tool.GFX[name]\n        rect = frame.get_rect()\n        frame_rect = (rect.x, rect.y, rect.w, rect.h)",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "MoveCard",
        "kind": 6,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "class MoveCard():\n    def __init__(self, x, y, card_name, plant_name, scale=0.78):\n        self.loadFrame(card_name, scale)\n        self.rect = self.orig_image.get_rect()\n        self.rect.x = x\n        self.rect.y = y\n        self.rect.w = 1\n        self.image = self.createShowImage()\n        self.card_name = card_name\n        self.plant_name = plant_name",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "MoveBar",
        "kind": 6,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "class MoveBar():\n    def __init__(self, card_pool):\n        self.loadFrame(c.MOVEBAR_BACKGROUND)\n        self.rect = self.image.get_rect()\n        self.rect.x = 90\n        self.rect.y = 0\n        self.card_start_x = self.rect.x + 8\n        self.card_end_x = self.rect.right - 5\n        self.card_pool = card_pool\n        self.card_list = []",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "getSunValueImage",
        "kind": 2,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "def getSunValueImage(sun_value):\n    font = pg.font.SysFont(None, 22)\n    width = 32\n    msg_image = font.render(str(sun_value), True, c.NAVYBLUE, c.LIGHTYELLOW)\n    msg_rect = msg_image.get_rect()\n    msg_w = msg_rect.width\n    image = pg.Surface([width, 17])\n    x = width - msg_w\n    image.fill(c.LIGHTYELLOW)\n    image.blit(msg_image, (x, 0), (0, 0, msg_rect.w, msg_rect.h))",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "getCardPool",
        "kind": 2,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "def getCardPool(data):\n    card_pool = []\n    for card in data:\n        tmp = card['name']\n        for i,name in enumerate(plant_name_list):\n            if name == tmp:\n                card_pool.append(i)\n                break\n    return card_pool\nclass Card():",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "__author__ = 'marble_xu'\nimport random\nimport pygame as pg\nfrom .. import tool\nfrom .. import constants as c\nPANEL_Y_START = 87\nPANEL_X_START = 22\nPANEL_Y_INTERNAL = 74\nPANEL_X_INTERNAL = 53\nCARD_LIST_NUM = 8",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "PANEL_Y_START",
        "kind": 5,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "PANEL_Y_START = 87\nPANEL_X_START = 22\nPANEL_Y_INTERNAL = 74\nPANEL_X_INTERNAL = 53\nCARD_LIST_NUM = 8\ncard_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "PANEL_X_START",
        "kind": 5,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "PANEL_X_START = 22\nPANEL_Y_INTERNAL = 74\nPANEL_X_INTERNAL = 53\nCARD_LIST_NUM = 8\ncard_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]\nplant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "PANEL_Y_INTERNAL",
        "kind": 5,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "PANEL_Y_INTERNAL = 74\nPANEL_X_INTERNAL = 53\nCARD_LIST_NUM = 8\ncard_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]\nplant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,\n                   c.CHERRYBOMB, c.THREEPEASHOOTER, c.REPEATERPEA, c.CHOMPER,",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "PANEL_X_INTERNAL",
        "kind": 5,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "PANEL_X_INTERNAL = 53\nCARD_LIST_NUM = 8\ncard_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]\nplant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,\n                   c.CHERRYBOMB, c.THREEPEASHOOTER, c.REPEATERPEA, c.CHOMPER,\n                   c.PUFFSHROOM, c.POTATOMINE, c.SQUASH, c.SPIKEWEED,",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "CARD_LIST_NUM",
        "kind": 5,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "CARD_LIST_NUM = 8\ncard_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]\nplant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,\n                   c.CHERRYBOMB, c.THREEPEASHOOTER, c.REPEATERPEA, c.CHOMPER,\n                   c.PUFFSHROOM, c.POTATOMINE, c.SQUASH, c.SPIKEWEED,\n                   c.JALAPENO, c.SCAREDYSHROOM, c.SUNSHROOM, c.ICESHROOM,",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "card_name_list",
        "kind": 5,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "card_name_list = [c.CARD_SUNFLOWER, c.CARD_PEASHOOTER, c.CARD_SNOWPEASHOOTER, c.CARD_WALLNUT,\n                  c.CARD_CHERRYBOMB, c.CARD_THREEPEASHOOTER, c.CARD_REPEATERPEA, c.CARD_CHOMPER,\n                  c.CARD_PUFFSHROOM, c.CARD_POTATOMINE, c.CARD_SQUASH, c.CARD_SPIKEWEED,\n                  c.CARD_JALAPENO, c.CARD_SCAREDYSHROOM, c.CARD_SUNSHROOM, c.CARD_ICESHROOM,\n                  c.CARD_HYPNOSHROOM, c.CARD_WALLNUT, c.CARD_REDWALLNUT]\nplant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,\n                   c.CHERRYBOMB, c.THREEPEASHOOTER, c.REPEATERPEA, c.CHOMPER,\n                   c.PUFFSHROOM, c.POTATOMINE, c.SQUASH, c.SPIKEWEED,\n                   c.JALAPENO, c.SCAREDYSHROOM, c.SUNSHROOM, c.ICESHROOM,\n                   c.HYPNOSHROOM, c.WALLNUTBOWLING, c.REDWALLNUTBOWLING]",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "plant_name_list",
        "kind": 5,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "plant_name_list = [c.SUNFLOWER, c.PEASHOOTER, c.SNOWPEASHOOTER, c.WALLNUT,\n                   c.CHERRYBOMB, c.THREEPEASHOOTER, c.REPEATERPEA, c.CHOMPER,\n                   c.PUFFSHROOM, c.POTATOMINE, c.SQUASH, c.SPIKEWEED,\n                   c.JALAPENO, c.SCAREDYSHROOM, c.SUNSHROOM, c.ICESHROOM,\n                   c.HYPNOSHROOM, c.WALLNUTBOWLING, c.REDWALLNUTBOWLING]\nplant_sun_list = [50, 100, 175, 50, 150, 325, 200, 150, 0, 25, 50, 100, 125, 25, 25, 75, 75, 0, 0]\nplant_frozen_time_list = [7500, 7500, 7500, 30000, 50000, 7500, 7500, 7500, 7500, 30000,\n                          30000, 7500, 50000, 7500, 7500, 50000, 30000, 0, 0]\nall_card_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ndef getSunValueImage(sun_value):",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "plant_sun_list",
        "kind": 5,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "plant_sun_list = [50, 100, 175, 50, 150, 325, 200, 150, 0, 25, 50, 100, 125, 25, 25, 75, 75, 0, 0]\nplant_frozen_time_list = [7500, 7500, 7500, 30000, 50000, 7500, 7500, 7500, 7500, 30000,\n                          30000, 7500, 50000, 7500, 7500, 50000, 30000, 0, 0]\nall_card_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ndef getSunValueImage(sun_value):\n    font = pg.font.SysFont(None, 22)\n    width = 32\n    msg_image = font.render(str(sun_value), True, c.NAVYBLUE, c.LIGHTYELLOW)\n    msg_rect = msg_image.get_rect()\n    msg_w = msg_rect.width",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "plant_frozen_time_list",
        "kind": 5,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "plant_frozen_time_list = [7500, 7500, 7500, 30000, 50000, 7500, 7500, 7500, 7500, 30000,\n                          30000, 7500, 50000, 7500, 7500, 50000, 30000, 0, 0]\nall_card_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ndef getSunValueImage(sun_value):\n    font = pg.font.SysFont(None, 22)\n    width = 32\n    msg_image = font.render(str(sun_value), True, c.NAVYBLUE, c.LIGHTYELLOW)\n    msg_rect = msg_image.get_rect()\n    msg_w = msg_rect.width\n    image = pg.Surface([width, 17])",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "all_card_list",
        "kind": 5,
        "importPath": "all files.c++.pvz.menubar",
        "description": "all files.c++.pvz.menubar",
        "peekOfCode": "all_card_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\ndef getSunValueImage(sun_value):\n    font = pg.font.SysFont(None, 22)\n    width = 32\n    msg_image = font.render(str(sun_value), True, c.NAVYBLUE, c.LIGHTYELLOW)\n    msg_rect = msg_image.get_rect()\n    msg_w = msg_rect.width\n    image = pg.Surface([width, 17])\n    x = width - msg_w\n    image.fill(c.LIGHTYELLOW)",
        "detail": "all files.c++.pvz.menubar",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "all files.c++.pvz.othermain",
        "description": "all files.c++.pvz.othermain",
        "peekOfCode": "def main():\n    game = tool.Control()\n    state_dict = {c.MAIN_MENU: mainmenu.Menu(),\n                  c.GAME_VICTORY: screen.GameVictoryScreen(),\n                  c.GAME_LOSE: screen.GameLoseScreen(),\n                  c.LEVEL: level.Level()}\n    game.setup_states(state_dict, c.MAIN_MENU)\n    game.main()",
        "detail": "all files.c++.pvz.othermain",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.othermain",
        "description": "all files.c++.pvz.othermain",
        "peekOfCode": "__author__ = 'marble_xu'\nfrom . import tool\nfrom . import constants as c\nfrom .state import mainmenu, screen, level\ndef main():\n    game = tool.Control()\n    state_dict = {c.MAIN_MENU: mainmenu.Menu(),\n                  c.GAME_VICTORY: screen.GameVictoryScreen(),\n                  c.GAME_LOSE: screen.GameLoseScreen(),\n                  c.LEVEL: level.Level()}",
        "detail": "all files.c++.pvz.othermain",
        "documentation": {}
    },
    {
        "label": "Car",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class Car(pg.sprite.Sprite):\n    def __init__(self, x, y, map_y):\n        pg.sprite.Sprite.__init__(self)\n        rect = tool.GFX[c.CAR].get_rect()\n        width, height = rect.w, rect.h\n        self.image = tool.get_image(tool.GFX[c.CAR], 0, 0, width, height)\n        self.rect = self.image.get_rect()\n        self.rect.x = x\n        self.rect.bottom = y\n        self.map_y = map_y",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "Bullet",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class Bullet(pg.sprite.Sprite):\n    def __init__(self, x, start_y, dest_y, name, damage, ice):\n        pg.sprite.Sprite.__init__(self)\n        self.name = name\n        self.frames = []\n        self.frame_index = 0\n        self.load_images()\n        self.image = self.frames[self.frame_index]\n        self.rect = self.image.get_rect()\n        self.rect.x = x",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "Plant",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class Plant(pg.sprite.Sprite):\n    def __init__(self, x, y, name, health, bullet_group, scale=1):\n        pg.sprite.Sprite.__init__(self)\n        self.frames = []\n        self.frame_index = 0\n        self.loadImages(name, scale)\n        self.frame_num = len(self.frames)\n        self.image = self.frames[self.frame_index]\n        self.rect = self.image.get_rect()\n        self.rect.centerx = x",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "Sun",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class Sun(Plant):\n    def __init__(self, x, y, dest_x, dest_y, is_big=True):\n        if is_big:\n            scale = 0.9\n            self.sun_value = c.SUN_VALUE\n        else:\n            scale = 0.6\n            self.sun_value = 12\n        Plant.__init__(self, x, y, c.SUN, 0, None, scale)\n        self.move_speed = 1",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "SunFlower",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class SunFlower(Plant):\n    def __init__(self, x, y, sun_group):\n        Plant.__init__(self, x, y, c.SUNFLOWER, c.PLANT_HEALTH, None)\n        self.sun_timer = 0\n        self.sun_group = sun_group\n    def idling(self):\n        if self.sun_timer == 0:\n            self.sun_timer = self.current_time - (c.FLOWER_SUN_INTERVAL - 6000)\n        elif (self.current_time - self.sun_timer) > c.FLOWER_SUN_INTERVAL:\n            self.sun_group.add(Sun(self.rect.centerx, self.rect.bottom, self.rect.right, self.rect.bottom + self.rect.h // 2))",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "PeaShooter",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class PeaShooter(Plant):\n    def __init__(self, x, y, bullet_group):\n        Plant.__init__(self, x, y, c.PEASHOOTER, c.PLANT_HEALTH, bullet_group)\n        self.shoot_timer = 0\n    def attacking(self):\n        if (self.current_time - self.shoot_timer) > 2000:\n            self.bullet_group.add(Bullet(self.rect.right, self.rect.y, self.rect.y,\n                                    c.BULLET_PEA, c.BULLET_DAMAGE_NORMAL, False))\n            self.shoot_timer = self.current_time\nclass RepeaterPea(Plant):",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "RepeaterPea",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class RepeaterPea(Plant):\n    def __init__(self, x, y, bullet_group):\n        Plant.__init__(self, x, y, c.REPEATERPEA, c.PLANT_HEALTH, bullet_group)\n        self.shoot_timer = 0\n    def attacking(self):\n        if (self.current_time - self.shoot_timer) > 2000:\n            self.bullet_group.add(Bullet(self.rect.right, self.rect.y, self.rect.y,\n                                    c.BULLET_PEA, c.BULLET_DAMAGE_NORMAL, False))\n            self.bullet_group.add(Bullet(self.rect.right + 40, self.rect.y, self.rect.y,\n                                    c.BULLET_PEA, c.BULLET_DAMAGE_NORMAL, False))",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "ThreePeaShooter",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class ThreePeaShooter(Plant):\n    def __init__(self, x, y, bullet_groups, map_y):\n        Plant.__init__(self, x, y, c.THREEPEASHOOTER, c.PLANT_HEALTH, None)\n        self.shoot_timer = 0\n        self.map_y = map_y\n        self.bullet_groups = bullet_groups\n    def attacking(self):\n        if (self.current_time - self.shoot_timer) > 2000:\n            offset_y = 9 # modify bullet in the same y position with bullets of other plants\n            for i in range(3):",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "SnowPeaShooter",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class SnowPeaShooter(Plant):\n    def __init__(self, x, y, bullet_group):\n        Plant.__init__(self, x, y, c.SNOWPEASHOOTER, c.PLANT_HEALTH, bullet_group)\n        self.shoot_timer = 0\n    def attacking(self):\n        if (self.current_time - self.shoot_timer) > 2000:\n            self.bullet_group.add(Bullet(self.rect.right, self.rect.y, self.rect.y,\n                                    c.BULLET_PEA_ICE, c.BULLET_DAMAGE_NORMAL, True))\n            self.shoot_timer = self.current_time\nclass WallNut(Plant):",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "WallNut",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class WallNut(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.WALLNUT, c.WALLNUT_HEALTH, None)\n        self.load_images()\n        self.cracked1 = False\n        self.cracked2 = False\n    def load_images(self):\n        self.cracked1_frames = []\n        self.cracked2_frames = []\n        cracked1_frames_name = self.name + '_cracked1'",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "CherryBomb",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class CherryBomb(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.CHERRYBOMB, c.WALLNUT_HEALTH, None)\n        self.state = c.ATTACK\n        self.start_boom = False\n        self.bomb_timer = 0\n        self.explode_y_range = 1\n        self.explode_x_range = c.GRID_X_SIZE\n    def setBoom(self):\n        frame = tool.GFX[c.CHERRY_BOOM_IMAGE]",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "Chomper",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class Chomper(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.CHOMPER, c.PLANT_HEALTH, None)\n        self.animate_interval = 250\n        self.digest_timer = 0\n        self.digest_interval = 15000\n        self.attack_zombie = None\n        self.zombie_group = None\n    def loadImages(self, name, scale):\n        self.idle_frames = []",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "PuffShroom",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class PuffShroom(Plant):\n    def __init__(self, x, y, bullet_group):\n        Plant.__init__(self, x, y, c.PUFFSHROOM, c.PLANT_HEALTH, bullet_group)\n        self.can_sleep = True\n        self.shoot_timer = 0\n    def loadImages(self, name, scale):\n        self.idle_frames = []\n        self.sleep_frames = []\n        idle_name = name\n        sleep_name = name + 'Sleep'",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "PotatoMine",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class PotatoMine(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.POTATOMINE, c.PLANT_HEALTH, None)\n        self.animate_interval = 300\n        self.is_init = True\n        self.init_timer = 0\n        self.bomb_timer = 0\n        self.explode_y_range = 0\n        self.explode_x_range = c.GRID_X_SIZE//3 * 2\n    def loadImages(self, name, scale):",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "Squash",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class Squash(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.SQUASH, c.PLANT_HEALTH, None)\n        self.orig_pos = (x, y)\n        self.aim_timer = 0\n        self.squashing = False\n    def loadImages(self, name, scale):\n        self.idle_frames = []\n        self.aim_frames = []\n        self.attack_frames = []",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "Spikeweed",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class Spikeweed(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.SPIKEWEED, c.PLANT_HEALTH, None)\n        self.animate_interval = 200\n        self.attack_timer = 0\n    def loadImages(self, name, scale):\n        self.loadFrames(self.frames, name, 0.9, c.WHITE)\n    def setIdle(self):\n        print('spikeweed idle')\n        self.animate_interval = 200",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "Jalapeno",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class Jalapeno(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.JALAPENO, c.PLANT_HEALTH, None)\n        self.orig_pos = (x, y)\n        self.state = c.ATTACK\n        self.start_explode = False\n        self.explode_y_range = 0\n        self.explode_x_range = 377\n    def loadImages(self, name, scale):\n        self.explode_frames = []",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "ScaredyShroom",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class ScaredyShroom(Plant):\n    def __init__(self, x, y, bullet_group):\n        Plant.__init__(self, x, y, c.SCAREDYSHROOM, c.PLANT_HEALTH, bullet_group)\n        self.can_sleep = True\n        self.shoot_timer = 0\n        self.cry_x_range = c.GRID_X_SIZE * 2\n    def loadImages(self, name, scale):\n        self.idle_frames = []\n        self.cry_frames = []\n        self.sleep_frames = []",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "SunShroom",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class SunShroom(Plant):\n    def __init__(self, x, y, sun_group):\n        Plant.__init__(self, x, y, c.SUNSHROOM, c.PLANT_HEALTH, None)\n        self.can_sleep = True\n        self.animate_interval = 200\n        self.sun_timer = 0\n        self.sun_group = sun_group\n        self.is_big = False\n        self.change_timer = 0\n    def loadImages(self, name, scale):",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "IceShroom",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class IceShroom(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.ICESHROOM, c.PLANT_HEALTH, None)\n        self.can_sleep = True\n        self.orig_pos = (x, y)\n        self.start_freeze = False\n    def loadImages(self, name, scale):\n        self.idle_frames = []\n        self.snow_frames = []\n        self.sleep_frames = []",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "HypnoShroom",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class HypnoShroom(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.HYPNOSHROOM, 1, None)\n        self.can_sleep = True\n        self.animate_interval = 200\n    def loadImages(self, name, scale):\n        self.idle_frames = []\n        self.sleep_frames = []\n        idle_name = name\n        sleep_name = name + 'Sleep'",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "WallNutBowling",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class WallNutBowling(Plant):\n    def __init__(self, x, y, map_y, level):\n        Plant.__init__(self, x, y, c.WALLNUTBOWLING, 1, None)\n        self.map_y = map_y\n        self.level = level\n        self.init_rect = self.rect.copy()\n        self.rotate_degree = 0\n        self.animate_interval = 200\n        self.move_timer = 0\n        self.move_interval = 70",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "RedWallNutBowling",
        "kind": 6,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "class RedWallNutBowling(Plant):\n    def __init__(self, x, y):\n        Plant.__init__(self, x, y, c.REDWALLNUTBOWLING, 1, None)\n        self.orig_y = y\n        self.explode_timer = 0\n        self.explode_y_range = 1\n        self.explode_x_range = c.GRID_X_SIZE\n        self.init_rect = self.rect.copy()\n        self.rotate_degree = 0\n        self.animate_interval = 200",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.plant",
        "description": "all files.c++.pvz.plant",
        "peekOfCode": "__author__ = 'marble_xu'\nimport random\nimport pygame as pg\nfrom .. import tool\nfrom .. import constants as c\nclass Car(pg.sprite.Sprite):\n    def __init__(self, x, y, map_y):\n        pg.sprite.Sprite.__init__(self)\n        rect = tool.GFX[c.CAR].get_rect()\n        width, height = rect.w, rect.h",
        "detail": "all files.c++.pvz.plant",
        "documentation": {}
    },
    {
        "label": "Zombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.zombie",
        "description": "all files.c++.pvz.zombie",
        "peekOfCode": "class Zombie(pg.sprite.Sprite):\n    def __init__(self, x, y, name, health, head_group=None, damage=1):\n        pg.sprite.Sprite.__init__(self)\n        self.name = name\n        self.frames = []\n        self.frame_index = 0\n        self.loadImages()\n        self.frame_num = len(self.frames)\n        self.image = self.frames[self.frame_index]\n        self.rect = self.image.get_rect()",
        "detail": "all files.c++.pvz.zombie",
        "documentation": {}
    },
    {
        "label": "ZombieHead",
        "kind": 6,
        "importPath": "all files.c++.pvz.zombie",
        "description": "all files.c++.pvz.zombie",
        "peekOfCode": "class ZombieHead(Zombie):\n    def __init__(self, x, y):\n        Zombie.__init__(self, x, y, c.ZOMBIE_HEAD, 0)\n        self.state = c.DIE\n    def loadImages(self):\n        self.die_frames = []\n        die_name =  self.name\n        self.loadFrames(self.die_frames, die_name, 0)\n        self.frames = self.die_frames\n    def setWalk(self):",
        "detail": "all files.c++.pvz.zombie",
        "documentation": {}
    },
    {
        "label": "NormalZombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.zombie",
        "description": "all files.c++.pvz.zombie",
        "peekOfCode": "class NormalZombie(Zombie):\n    def __init__(self, x, y, head_group):\n        Zombie.__init__(self, x, y, c.NORMAL_ZOMBIE, c.NORMAL_HEALTH, head_group)\n    def loadImages(self):\n        self.walk_frames = []\n        self.attack_frames = []\n        self.losthead_walk_frames = []\n        self.losthead_attack_frames = []\n        self.die_frames = []\n        self.boomdie_frames = []",
        "detail": "all files.c++.pvz.zombie",
        "documentation": {}
    },
    {
        "label": "ConeHeadZombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.zombie",
        "description": "all files.c++.pvz.zombie",
        "peekOfCode": "class ConeHeadZombie(Zombie):\n    def __init__(self, x, y, head_group):\n        Zombie.__init__(self, x, y, c.CONEHEAD_ZOMBIE, c.CONEHEAD_HEALTH, head_group)\n        self.helmet = True\n    def loadImages(self):\n        self.helmet_walk_frames = []\n        self.helmet_attack_frames = []\n        self.walk_frames = []\n        self.attack_frames = []\n        self.losthead_walk_frames = []",
        "detail": "all files.c++.pvz.zombie",
        "documentation": {}
    },
    {
        "label": "BucketHeadZombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.zombie",
        "description": "all files.c++.pvz.zombie",
        "peekOfCode": "class BucketHeadZombie(Zombie):\n    def __init__(self, x, y, head_group):\n        Zombie.__init__(self, x, y, c.BUCKETHEAD_ZOMBIE, c.BUCKETHEAD_HEALTH, head_group)\n        self.helmet = True\n    def loadImages(self):\n        self.helmet_walk_frames = []\n        self.helmet_attack_frames = []\n        self.walk_frames = []\n        self.attack_frames = []\n        self.losthead_walk_frames = []",
        "detail": "all files.c++.pvz.zombie",
        "documentation": {}
    },
    {
        "label": "FlagZombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.zombie",
        "description": "all files.c++.pvz.zombie",
        "peekOfCode": "class FlagZombie(Zombie):\n    def __init__(self, x, y, head_group):\n        Zombie.__init__(self, x, y, c.FLAG_ZOMBIE, c.FLAG_HEALTH, head_group)\n    def loadImages(self):\n        self.walk_frames = []\n        self.attack_frames = []\n        self.losthead_walk_frames = []\n        self.losthead_attack_frames = []\n        self.die_frames = []\n        self.boomdie_frames = []",
        "detail": "all files.c++.pvz.zombie",
        "documentation": {}
    },
    {
        "label": "NewspaperZombie",
        "kind": 6,
        "importPath": "all files.c++.pvz.zombie",
        "description": "all files.c++.pvz.zombie",
        "peekOfCode": "class NewspaperZombie(Zombie):\n    def __init__(self, x, y, head_group):\n        Zombie.__init__(self, x, y, c.NEWSPAPER_ZOMBIE, c.NEWSPAPER_HEALTH, head_group)\n        self.helmet = True\n    def loadImages(self):\n        self.helmet_walk_frames = []\n        self.helmet_attack_frames = []\n        self.walk_frames = []\n        self.attack_frames = []\n        self.losthead_walk_frames = []",
        "detail": "all files.c++.pvz.zombie",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "all files.c++.pvz.zombie",
        "description": "all files.c++.pvz.zombie",
        "peekOfCode": "__author__ = 'marble_xu'\nimport pygame as pg\nfrom .. import tool\nfrom .. import constants as c\nclass Zombie(pg.sprite.Sprite):\n    def __init__(self, x, y, name, health, head_group=None, damage=1):\n        pg.sprite.Sprite.__init__(self)\n        self.name = name\n        self.frames = []\n        self.frame_index = 0",
        "detail": "all files.c++.pvz.zombie",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "class Game(object):\n    print \"Setting global Game params.\"\n    # Game parameters\n    BG_TILE_IMG = 'images/wood2.png'\n    BUTTON_BGIMG = 'images/x.png'\n    SCREEN_WIDTH, SCREEN_HEIGHT = 580, 500\n    GRID_SIZE = 20\n    FIELD_SIZE = 400, 400\n    #need to implement resource loading here\n    #global game constants make cheating easy!",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.button_bgimgs",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.button_bgimgs = ['images/x.png']\n\t#self.button_width = self.button_bgimgs[0].get_width()\n\t#self.button_height = self.button_bgimgs[0].get_height()\n\t#hopefully this will draw the button -15 pixels from the right end, +15 from the top \n\t#(hopefully giving us a nice X)\n\t# should be replaced in the future with a method that returns the coords for an x button\n\t# in whatever corner we want.\n\t#self.button_rect = Rect(self.tboard_width, self.tboard_y-15, self.button_width, self.button_height)\n\tself.button = Button(self.screen,\n                                pos=vec2d(self.tboard_width, self.tboard_y-15),",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\t#self.button_width",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\t#self.button_width = self.button_bgimgs[0].get_width()\n\t#self.button_height = self.button_bgimgs[0].get_height()\n\t#hopefully this will draw the button -15 pixels from the right end, +15 from the top \n\t#(hopefully giving us a nice X)\n\t# should be replaced in the future with a method that returns the coords for an x button\n\t# in whatever corner we want.\n\t#self.button_rect = Rect(self.tboard_width, self.tboard_y-15, self.button_width, self.button_height)\n\tself.button = Button(self.screen,\n                                pos=vec2d(self.tboard_width, self.tboard_y-15),\n                                btntype='Close',",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\t#self.button_height",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\t#self.button_height = self.button_bgimgs[0].get_height()\n\t#hopefully this will draw the button -15 pixels from the right end, +15 from the top \n\t#(hopefully giving us a nice X)\n\t# should be replaced in the future with a method that returns the coords for an x button\n\t# in whatever corner we want.\n\t#self.button_rect = Rect(self.tboard_width, self.tboard_y-15, self.button_width, self.button_height)\n\tself.button = Button(self.screen,\n                                pos=vec2d(self.tboard_width, self.tboard_y-15),\n                                btntype='Close',\n                                imgnames=self.button_bgimgs,",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\t#self.button_rect",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\t#self.button_rect = Rect(self.tboard_width, self.tboard_y-15, self.button_width, self.button_height)\n\tself.button = Button(self.screen,\n                                pos=vec2d(self.tboard_width, self.tboard_y-15),\n                                btntype='Close',\n                                imgnames=self.button_bgimgs,\n                                attached=self.tboard)\n\tprint \"Created close button.\"\n\tself.togglebtn_bgimgs = ['images/toggle1.png', 'images/toggle2.png']\n\tself.togglebtn = Button(self.screen,\n                                pos=vec2d(250, 250),",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.button",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.button = Button(self.screen,\n                                pos=vec2d(self.tboard_width, self.tboard_y-15),\n                                btntype='Close',\n                                imgnames=self.button_bgimgs,\n                                attached=self.tboard)\n\tprint \"Created close button.\"\n\tself.togglebtn_bgimgs = ['images/toggle1.png', 'images/toggle2.png']\n\tself.togglebtn = Button(self.screen,\n                                pos=vec2d(250, 250),\n                                btntype='Toggle',",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.togglebtn_bgimgs",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.togglebtn_bgimgs = ['images/toggle1.png', 'images/toggle2.png']\n\tself.togglebtn = Button(self.screen,\n                                pos=vec2d(250, 250),\n                                btntype='Toggle',\n                                imgnames=self.togglebtn_bgimgs,\n                                attached=\"\",\n\t\t\t\t\t\t\t\ttext=\"Toggle\",\n\t\t\t\t\t\t\t\ttextcolor=(255,255,255))\n\tprint \"Created toggle button.\"\n\tself.clockImg = Images(self.screen,",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.togglebtn",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.togglebtn = Button(self.screen,\n                                pos=vec2d(250, 250),\n                                btntype='Toggle',\n                                imgnames=self.togglebtn_bgimgs,\n                                attached=\"\",\n\t\t\t\t\t\t\t\ttext=\"Toggle\",\n\t\t\t\t\t\t\t\ttextcolor=(255,255,255))\n\tprint \"Created toggle button.\"\n\tself.clockImg = Images(self.screen,\n\t\t\t\t\t'images/clock.png',",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.clockImg",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.clockImg = Images(self.screen,\n\t\t\t\t\t'images/clock.png',\n\t\t\t\t\tpos=vec2d(430,0))\n\tself.hand = Images(self.screen,\n\t\t\t\t\t\t'images/secondHand.png',\n\t\t\t\t\t\tpos=vec2d(505,15),\n\t\t\t\t\t\timgtype='Spinner')\n\tself.textTest = textEntry(self.screen, \n\t\t\t\t\t\tpos=vec2d(0, self.SCREEN_HEIGHT-50),\n\t\t\t\t\t\tsize=vec2d(self.SCREEN_WIDTH,50))",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.hand",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.hand = Images(self.screen,\n\t\t\t\t\t\t'images/secondHand.png',\n\t\t\t\t\t\tpos=vec2d(505,15),\n\t\t\t\t\t\timgtype='Spinner')\n\tself.textTest = textEntry(self.screen, \n\t\t\t\t\t\tpos=vec2d(0, self.SCREEN_HEIGHT-50),\n\t\t\t\t\t\tsize=vec2d(self.SCREEN_WIDTH,50))\n\tself.floater = movingRect(self.screen,\n\t\t\t\t\t\tpos=vec2d(self.SCREEN_WIDTH/2, 0),\n\t\t\t\t\t\tspeed=vec2d(0,5))",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.textTest",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.textTest = textEntry(self.screen, \n\t\t\t\t\t\tpos=vec2d(0, self.SCREEN_HEIGHT-50),\n\t\t\t\t\t\tsize=vec2d(self.SCREEN_WIDTH,50))\n\tself.floater = movingRect(self.screen,\n\t\t\t\t\t\tpos=vec2d(self.SCREEN_WIDTH/2, 0),\n\t\t\t\t\t\tspeed=vec2d(0,5))\n\tself.moveImg = movingImg(self.screen,\n\t\t\t\t\t\t\"images/toggle1.png\",\n\t\t\t\t\t\tpos=vec2d(0,self.SCREEN_HEIGHT*3/4),\n\t\t\t\t\t\tspeed=vec2d(5, 0))",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.floater",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.floater = movingRect(self.screen,\n\t\t\t\t\t\tpos=vec2d(self.SCREEN_WIDTH/2, 0),\n\t\t\t\t\t\tspeed=vec2d(0,5))\n\tself.moveImg = movingImg(self.screen,\n\t\t\t\t\t\t\"images/toggle1.png\",\n\t\t\t\t\t\tpos=vec2d(0,self.SCREEN_HEIGHT*3/4),\n\t\t\t\t\t\tspeed=vec2d(5, 0))\n\tself.ball = circles(self.screen,\n\t\t\t\t\t\tpos=vec2d(25,25),\n\t\t\t\t\t\tradius = 25)",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.moveImg",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.moveImg = movingImg(self.screen,\n\t\t\t\t\t\t\"images/toggle1.png\",\n\t\t\t\t\t\tpos=vec2d(0,self.SCREEN_HEIGHT*3/4),\n\t\t\t\t\t\tspeed=vec2d(5, 0))\n\tself.ball = circles(self.screen,\n\t\t\t\t\t\tpos=vec2d(25,25),\n\t\t\t\t\t\tradius = 25)\n\tself.buttons = [self.togglebtn]\n\tself.textEntries = [self.textTest]\n\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.ball",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.ball = circles(self.screen,\n\t\t\t\t\t\tpos=vec2d(25,25),\n\t\t\t\t\t\tradius = 25)\n\tself.buttons = [self.togglebtn]\n\tself.textEntries = [self.textTest]\n\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]\n\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t\tradius",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\t\t\t\t\t\tradius = 25)\n\tself.buttons = [self.togglebtn]\n\tself.textEntries = [self.textTest]\n\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]\n\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.buttons",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.buttons = [self.togglebtn]\n\tself.textEntries = [self.textTest]\n\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]\n\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.\n\tself.grid_nrows = 30",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.textEntries",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.textEntries = [self.textTest]\n\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]\n\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.\n\tself.grid_nrows = 30\n\tself.grid_ncols = 30",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.world",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.world = [self.button, self.togglebtn, self.clockImg, self.hand, self.textTest, self.moveImg, self.floater, self.ball]\n\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.\n\tself.grid_nrows = 30\n\tself.grid_ncols = 30\n\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       ",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.clock",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.clock = pygame.time.Clock()\n\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.\n\tself.grid_nrows = 30\n\tself.grid_ncols = 30\n\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       \n\tself.options = dict(debug=True, ",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.paused",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.paused = False\n\t#spawning entities\n\t#Setting up gamefield\n\t#need a method for dynamically figuring out how many rows/columns we need based on\n\t#the spacing we want and field size. Using some constants for now.\n\tself.grid_nrows = 30\n\tself.grid_ncols = 30\n\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       \n\tself.options = dict(debug=True, \n                draw_grid=False)",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.grid_nrows",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.grid_nrows = 30\n\tself.grid_ncols = 30\n\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       \n\tself.options = dict(debug=True, \n                draw_grid=False)\n\tprint \"Done setting game options, exiting Game init.\"\n    def xy2coord(self, pos):\n        \"\"\" Convert a (x, y) pair to a (nrow, ncol) coordinate\n        \"\"\"\n        x, y = (pos[0] - self.field_rect.left, pos[1] - self.field_rect.top)",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.grid_ncols",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.grid_ncols = 30\n\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       \n\tself.options = dict(debug=True, \n                draw_grid=False)\n\tprint \"Done setting game options, exiting Game init.\"\n    def xy2coord(self, pos):\n        \"\"\" Convert a (x, y) pair to a (nrow, ncol) coordinate\n        \"\"\"\n        x, y = (pos[0] - self.field_rect.left, pos[1] - self.field_rect.top)\n        return (int(y) / self.GRID_SIZE, int(x) / self.GRID_SIZE)",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.field_rect",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.field_rect = pygame.Rect(0, 0, self.SCREEN_WIDTH, self.SCREEN_HEIGHT)       \n\tself.options = dict(debug=True, \n                draw_grid=False)\n\tprint \"Done setting game options, exiting Game init.\"\n    def xy2coord(self, pos):\n        \"\"\" Convert a (x, y) pair to a (nrow, ncol) coordinate\n        \"\"\"\n        x, y = (pos[0] - self.field_rect.left, pos[1] - self.field_rect.top)\n        return (int(y) / self.GRID_SIZE, int(x) / self.GRID_SIZE)\n    def coord2xy_mid(self, coord):",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\tself.options",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\tself.options = dict(debug=True, \n                draw_grid=False)\n\tprint \"Done setting game options, exiting Game init.\"\n    def xy2coord(self, pos):\n        \"\"\" Convert a (x, y) pair to a (nrow, ncol) coordinate\n        \"\"\"\n        x, y = (pos[0] - self.field_rect.left, pos[1] - self.field_rect.top)\n        return (int(y) / self.GRID_SIZE, int(x) / self.GRID_SIZE)\n    def coord2xy_mid(self, coord):\n        \"\"\" Convert a (nrow, ncol) coordinate to a (x, y) pair,",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.paused",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\t\t\tself.paused = not self.paused\n\t\t    elif event.key == pygame.K_g:\n\t\t\t#toggle draw grid\n\t\t\tself.options['draw_grid'] = not self.options['draw_grid']\n\t\telif (event.type == pygame.MOUSEBUTTONDOWN and event.button == 1):\n\t\t    for button in self.buttons:\n\t\t\t\tbutton.mouse_click_event(event.pos)\n\t\t    for entry in self.textEntries:\n\t\t\t\tentry.mouse_click_event(event.pos)\n\t    #pass \ttemporarily disabled, don't think it does anything",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.options['draw_grid']",
        "kind": 5,
        "importPath": "all files.c++.python.game",
        "description": "all files.c++.python.game",
        "peekOfCode": "\t\t\tself.options['draw_grid'] = not self.options['draw_grid']\n\t\telif (event.type == pygame.MOUSEBUTTONDOWN and event.button == 1):\n\t\t    for button in self.buttons:\n\t\t\t\tbutton.mouse_click_event(event.pos)\n\t\t    for entry in self.textEntries:\n\t\t\t\tentry.mouse_click_event(event.pos)\n\t    #pass \ttemporarily disabled, don't think it does anything\n\t    #entity events here.\n            #update hud, counters, score, anything like that here\n            if not self.paused:",
        "detail": "all files.c++.python.game",
        "documentation": {}
    },
    {
        "label": "Student",
        "kind": 6,
        "importPath": "all files.c++.tests.classes.building our first class",
        "description": "all files.c++.tests.classes.building our first class",
        "peekOfCode": "class Student:\n    pass\n#Below is the method to create object , Here Varun and rohan are two objects of Class Student\nVarun = Student()\nlarry = Student()\n# Now after creating objects we can use them to call variables\nVarun.name = \"Harry\"\nVarun.std = 12\nVarun.section = 1\nlarry.std = 9",
        "detail": "all files.c++.tests.classes.building our first class",
        "documentation": {}
    },
    {
        "label": "Varun",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.building our first class",
        "description": "all files.c++.tests.classes.building our first class",
        "peekOfCode": "Varun = Student()\nlarry = Student()\n# Now after creating objects we can use them to call variables\nVarun.name = \"Harry\"\nVarun.std = 12\nVarun.section = 1\nlarry.std = 9\nlarry.subjects = [\"hindi\", \"physics\"]\nprint(Varun.section, larry.subjects)",
        "detail": "all files.c++.tests.classes.building our first class",
        "documentation": {}
    },
    {
        "label": "larry",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.building our first class",
        "description": "all files.c++.tests.classes.building our first class",
        "peekOfCode": "larry = Student()\n# Now after creating objects we can use them to call variables\nVarun.name = \"Harry\"\nVarun.std = 12\nVarun.section = 1\nlarry.std = 9\nlarry.subjects = [\"hindi\", \"physics\"]\nprint(Varun.section, larry.subjects)",
        "detail": "all files.c++.tests.classes.building our first class",
        "documentation": {}
    },
    {
        "label": "Varun.name",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.building our first class",
        "description": "all files.c++.tests.classes.building our first class",
        "peekOfCode": "Varun.name = \"Harry\"\nVarun.std = 12\nVarun.section = 1\nlarry.std = 9\nlarry.subjects = [\"hindi\", \"physics\"]\nprint(Varun.section, larry.subjects)",
        "detail": "all files.c++.tests.classes.building our first class",
        "documentation": {}
    },
    {
        "label": "Varun.std",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.building our first class",
        "description": "all files.c++.tests.classes.building our first class",
        "peekOfCode": "Varun.std = 12\nVarun.section = 1\nlarry.std = 9\nlarry.subjects = [\"hindi\", \"physics\"]\nprint(Varun.section, larry.subjects)",
        "detail": "all files.c++.tests.classes.building our first class",
        "documentation": {}
    },
    {
        "label": "Varun.section",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.building our first class",
        "description": "all files.c++.tests.classes.building our first class",
        "peekOfCode": "Varun.section = 1\nlarry.std = 9\nlarry.subjects = [\"hindi\", \"physics\"]\nprint(Varun.section, larry.subjects)",
        "detail": "all files.c++.tests.classes.building our first class",
        "documentation": {}
    },
    {
        "label": "larry.std",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.building our first class",
        "description": "all files.c++.tests.classes.building our first class",
        "peekOfCode": "larry.std = 9\nlarry.subjects = [\"hindi\", \"physics\"]\nprint(Varun.section, larry.subjects)",
        "detail": "all files.c++.tests.classes.building our first class",
        "documentation": {}
    },
    {
        "label": "larry.subjects",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.building our first class",
        "description": "all files.c++.tests.classes.building our first class",
        "peekOfCode": "larry.subjects = [\"hindi\", \"physics\"]\nprint(Varun.section, larry.subjects)",
        "detail": "all files.c++.tests.classes.building our first class",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "class Shape:\n\tdef __init__(self, color=None):\n\t\tself.color = color\n\tdef get_color(self):\n\t\treturn self.color\n\tdef __str__(self):\n\t\treturn self.get_color() + ' Shape'\nclass Rectangle(Shape):\n\tdef __init__(self, color, length, width):\n\t\tsuper().__init__(color)",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "Rectangle",
        "kind": 6,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "class Rectangle(Shape):\n\tdef __init__(self, color, length, width):\n\t\tsuper().__init__(color)\n\t\tself.length = length\n\t\tself.width = width\n\tdef get_area(self):\n\t\treturn self.length * self.width\n\tdef get_perimeter(self):\n\t\treturn 2 * (self.length + self.width)\n\tdef __str__(self):",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "class Circle(Shape):\n\tdef __init__(self, color, radius):\n\t\tsuper().__init__(color)\n\t\tself.radius = radius\n\tdef get_area(self):\n\t\treturn pi * self.radius ** 2\n\tdef get_perimeter(self):\n\t\treturn 2 * pi * self.radius\ndef print_shape_data(self):\n\tprint('Shape:    ', type(self).__name__)",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "print_shape_data",
        "kind": 2,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "def print_shape_data(self):\n\tprint('Shape:    ', type(self).__name__)\n\tprint('Color:    ', self.get_color())\n\tprint('Area:     ', self.get_area())\n\tprint('Perimeter:', self.get_perimeter())\nshape = Shape('red')\nprint('shape is', shape.get_color())\nrect = Rectangle('blue', 6, 4)\nprint('rect is', rect.get_color(), ' with area:', rect.get_area(), ' and perimeter:', rect.get_perimeter())\ncirc = Circle('green', 5)",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "\t\tself.color",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "\t\tself.color = color\n\tdef get_color(self):\n\t\treturn self.color\n\tdef __str__(self):\n\t\treturn self.get_color() + ' Shape'\nclass Rectangle(Shape):\n\tdef __init__(self, color, length, width):\n\t\tsuper().__init__(color)\n\t\tself.length = length\n\t\tself.width = width",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "\t\tself.length",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "\t\tself.length = length\n\t\tself.width = width\n\tdef get_area(self):\n\t\treturn self.length * self.width\n\tdef get_perimeter(self):\n\t\treturn 2 * (self.length + self.width)\n\tdef __str__(self):\n\t\treturn self.get_color() + ' ' + str(self.length) + 'x' + str(self.width) + ' ' + type(self).__name__\nfrom math import pi\t\t\nclass Circle(Shape):",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "\t\tself.width",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "\t\tself.width = width\n\tdef get_area(self):\n\t\treturn self.length * self.width\n\tdef get_perimeter(self):\n\t\treturn 2 * (self.length + self.width)\n\tdef __str__(self):\n\t\treturn self.get_color() + ' ' + str(self.length) + 'x' + str(self.width) + ' ' + type(self).__name__\nfrom math import pi\t\t\nclass Circle(Shape):\n\tdef __init__(self, color, radius):",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "\t\tself.radius",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "\t\tself.radius = radius\n\tdef get_area(self):\n\t\treturn pi * self.radius ** 2\n\tdef get_perimeter(self):\n\t\treturn 2 * pi * self.radius\ndef print_shape_data(self):\n\tprint('Shape:    ', type(self).__name__)\n\tprint('Color:    ', self.get_color())\n\tprint('Area:     ', self.get_area())\n\tprint('Perimeter:', self.get_perimeter())",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "shape",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "shape = Shape('red')\nprint('shape is', shape.get_color())\nrect = Rectangle('blue', 6, 4)\nprint('rect is', rect.get_color(), ' with area:', rect.get_area(), ' and perimeter:', rect.get_perimeter())\ncirc = Circle('green', 5)\nprint('circ is', circ.get_color(), ' with area:', circ.get_area(), ' and perimeter:', circ.get_perimeter())\nprint('rect is a', type(rect).__name__)\nprint('circ is a', type(circ).__name__, '\\n')\nmy_new_shape = Rectangle('yellow', 17, 9)\nprint_shape_data(my_new_shape)",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "rect",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "rect = Rectangle('blue', 6, 4)\nprint('rect is', rect.get_color(), ' with area:', rect.get_area(), ' and perimeter:', rect.get_perimeter())\ncirc = Circle('green', 5)\nprint('circ is', circ.get_color(), ' with area:', circ.get_area(), ' and perimeter:', circ.get_perimeter())\nprint('rect is a', type(rect).__name__)\nprint('circ is a', type(circ).__name__, '\\n')\nmy_new_shape = Rectangle('yellow', 17, 9)\nprint_shape_data(my_new_shape)\nprint(type(my_new_shape))\nprint(my_new_shape)",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "circ",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "circ = Circle('green', 5)\nprint('circ is', circ.get_color(), ' with area:', circ.get_area(), ' and perimeter:', circ.get_perimeter())\nprint('rect is a', type(rect).__name__)\nprint('circ is a', type(circ).__name__, '\\n')\nmy_new_shape = Rectangle('yellow', 17, 9)\nprint_shape_data(my_new_shape)\nprint(type(my_new_shape))\nprint(my_new_shape)",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "my_new_shape",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.classes",
        "description": "all files.c++.tests.classes.classes",
        "peekOfCode": "my_new_shape = Rectangle('yellow', 17, 9)\nprint_shape_data(my_new_shape)\nprint(type(my_new_shape))\nprint(my_new_shape)",
        "detail": "all files.c++.tests.classes.classes",
        "documentation": {}
    },
    {
        "label": "Circle",
        "kind": 6,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "class Circle:\n\t# Circle constructor -- __init__ method creates a new Circle object\n\tdef __init__(self, r = 1):\n\t\tself.radius = r\n\tdef getPerimeter(self):\n\t\treturn 2 * self.radius * 3.14\n\tdef getArea(self):\n\t\treturn self.radius ** 2 * 3.14\n# all methods have the self parameter, which is Python's reference to the object that invoked the method\n# this calls the __init__ method, which creates the new Circle",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "cuber",
        "kind": 2,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "def cuber(num):\n\tnum_cubed = num * num * num\n\treturn num_cubed\n# to call the function, and pass in 5:\ncuber(5)\n# but if you want to assign the return value (125) to a variable,\nx = 5\nx_cubed = cuber(x)\nprint(x, x_cubed)\n# you can set default values for parameters",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "cuber",
        "kind": 2,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "def cuber(num = 2):\n\tnum_cubed = num * num * num\n\treturn num_cubed\nprint(cuber())\t\t# uses the default 2\nprint(cuber(3))\t\t# 3 overrides the default\n# you can pass in multiple values, and return multiple values\n# but order is important\ndef solve_triangle(base, height, side1, side2, side3):\n\tarea = base * height / 2\n\tperimeter = side1 + side2 + side3",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "solve_triangle",
        "kind": 2,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "def solve_triangle(base, height, side1, side2, side3):\n\tarea = base * height / 2\n\tperimeter = side1 + side2 + side3\n\treturn area, perimeter\narea, perim = solve_triangle(3, 4, 5, 3, 4)\t# b=3, h=4, s1=5, s2=3, s3=4\nprint('Area:', area, ' Perimeter:', perim)\n# above are all called \"positional arguments\", and order matters\n# you can also pass in \"keyword arguments\" when calling a function\na, p = solve_triangle(side1=5, side2=3, side3=4, height=4, base=3)\nprint(a, p)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "age = 26\nfirst_name = 'Shivika'\ngpa = 3.99\n# here we can see three different types of data stored in variables: an integer, a string, and a float.\n# You do not have to declare the data type stored in each variable. Python does that for you.\n# You can see what type of data is in a variable using the type() function\nprint(type(age))\nprint(type(first_name))\nprint(type(gpa))\n# variables are \"dynamically typed\" -- Python checks the type at runtime",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "first_name",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "first_name = 'Shivika'\ngpa = 3.99\n# here we can see three different types of data stored in variables: an integer, a string, and a float.\n# You do not have to declare the data type stored in each variable. Python does that for you.\n# You can see what type of data is in a variable using the type() function\nprint(type(age))\nprint(type(first_name))\nprint(type(gpa))\n# variables are \"dynamically typed\" -- Python checks the type at runtime\nage = 26.2",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "gpa",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "gpa = 3.99\n# here we can see three different types of data stored in variables: an integer, a string, and a float.\n# You do not have to declare the data type stored in each variable. Python does that for you.\n# You can see what type of data is in a variable using the type() function\nprint(type(age))\nprint(type(first_name))\nprint(type(gpa))\n# variables are \"dynamically typed\" -- Python checks the type at runtime\nage = 26.2\nprint(type(age))",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "age = 26.2\nprint(type(age))\nprint(age, type(age))\n# variable naming tips: \n#\tnaming can have letters, numbers and underscore, but cannot start with a digit\n#\tsome Python reserved words cannot be used\n#\tuse descriptive variable names\n#\tCase Matters\n#\tconstants in all caps: PI = 3.14159\n# every Python variable is a pointer to the data stored somewhere in memory",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 5\ny = 10\nx, y = y, x\nprint('x =', x, 'y =', y)\n# BOOLEAN VALUES - True or False\n# ------------------------------------------------\n# These all evaluate to False: 0, 0.0, [], \"\", None\n# These are all True: any non-zero number, any non-empty string, list or set\nprint(bool(1))    # True\nprint(bool('dog'))",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "y = 10\nx, y = y, x\nprint('x =', x, 'y =', y)\n# BOOLEAN VALUES - True or False\n# ------------------------------------------------\n# These all evaluate to False: 0, 0.0, [], \"\", None\n# These are all True: any non-zero number, any non-empty string, list or set\nprint(bool(1))    # True\nprint(bool('dog'))\nprint(bool(10.78))",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 5 + 7\nprint(x, type(x))\nx = 5 - 7\nprint(x, type(x))\nx = 7 / 4\nprint(x, type(x))\nx = 7 // 4\nprint(x, type(x))\nx = 7 % 4\nprint(x)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 5 - 7\nprint(x, type(x))\nx = 7 / 4\nprint(x, type(x))\nx = 7 // 4\nprint(x, type(x))\nx = 7 % 4\nprint(x)\nx = 4 ** 3\nprint(x)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 7 / 4\nprint(x, type(x))\nx = 7 // 4\nprint(x, type(x))\nx = 7 % 4\nprint(x)\nx = 4 ** 3\nprint(x)\n# x += 5 is the same as saying x = x + 5\nx = 2",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 7 // 4\nprint(x, type(x))\nx = 7 % 4\nprint(x)\nx = 4 ** 3\nprint(x)\n# x += 5 is the same as saying x = x + 5\nx = 2\nx = x + 5\nprint(x)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 7 % 4\nprint(x)\nx = 4 ** 3\nprint(x)\n# x += 5 is the same as saying x = x + 5\nx = 2\nx = x + 5\nprint(x)\nx = 2\nx += 5",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 4 ** 3\nprint(x)\n# x += 5 is the same as saying x = x + 5\nx = 2\nx = x + 5\nprint(x)\nx = 2\nx += 5\nprint(x)\n# Order of Operations",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 2\nx = x + 5\nprint(x)\nx = 2\nx += 5\nprint(x)\n# Order of Operations\n#\t1. ( )\n#\t2. **\n#\t3. * / // %",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = x + 5\nprint(x)\nx = 2\nx += 5\nprint(x)\n# Order of Operations\n#\t1. ( )\n#\t2. **\n#\t3. * / // %\n#\t4. + -",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 2\nx += 5\nprint(x)\n# Order of Operations\n#\t1. ( )\n#\t2. **\n#\t3. * / // %\n#\t4. + -\n#\tExample: 1 + 5 ** (3 // 2) - 6 % 4 => 4\nx = 1 + 5 ** (3 // 2) - 6 % 4",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 1 + 5 ** (3 // 2) - 6 % 4\nprint(x)\n# CONSOLE INPUT\n# ------------------------------------------------\n# Get user input from the keyboard at the command prompt\nname = input('What is your name? ')\nprint(\"Hello,\", name)\nage = eval(input('How old are you? '))\nprint('Age =', age, type(age))\n# With what we know so far we can write a program to get user input and compute the area of a triangle.",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "name = input('What is your name? ')\nprint(\"Hello,\", name)\nage = eval(input('How old are you? '))\nprint('Age =', age, type(age))\n# With what we know so far we can write a program to get user input and compute the area of a triangle.\nbase = eval(input('Enter the base: '))\nheight = eval(input('Enter the height: '))\narea = base * height / 2\nprint ('Area = ', area)\n# COMMENTS",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "age = eval(input('How old are you? '))\nprint('Age =', age, type(age))\n# With what we know so far we can write a program to get user input and compute the area of a triangle.\nbase = eval(input('Enter the base: '))\nheight = eval(input('Enter the height: '))\narea = base * height / 2\nprint ('Area = ', area)\n# COMMENTS\n# ------------------------------------------------\n# Hash tag for single line comment",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "base = eval(input('Enter the base: '))\nheight = eval(input('Enter the height: '))\narea = base * height / 2\nprint ('Area = ', area)\n# COMMENTS\n# ------------------------------------------------\n# Hash tag for single line comment\n'''\nThree sets of quotes \nfor multi-line comments",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "height",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "height = eval(input('Enter the height: '))\narea = base * height / 2\nprint ('Area = ', area)\n# COMMENTS\n# ------------------------------------------------\n# Hash tag for single line comment\n'''\nThree sets of quotes \nfor multi-line comments\n'''",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "area = base * height / 2\nprint ('Area = ', area)\n# COMMENTS\n# ------------------------------------------------\n# Hash tag for single line comment\n'''\nThree sets of quotes \nfor multi-line comments\n'''\n\"\"\" double quotes work too \"\"\"",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 69\nprint(x > 50)\nprint(x == 50)\nprint(x != 50)\nmy_age = 19\nprint(my_age > 21)\nif my_age >= 21:\n    print(\"Old enough.\")\nelse:\n    print(\"Not old enough.\")",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "my_age",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "my_age = 19\nprint(my_age > 21)\nif my_age >= 21:\n    print(\"Old enough.\")\nelse:\n    print(\"Not old enough.\")\n    print(\"Maybe next year.\")\nscore = 72\nif score > 90:\n    print('Grade: A')",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "score",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "score = 72\nif score > 90:\n    print('Grade: A')\nelif score > 80:\n    print('Grade: B')\nelif score > 70:\n    print('Grade: C')\nelif score > 60:\n    print('Grade: D')\nelse:",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "my_age",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "my_age = 19\ngrade = 'C'\nif my_age > 18 and grade == 'A':\n    print('I can go to the party!')\n# nested if statements -- both conditions must be True\nmy_age = 19\ngrade = 'C'\nif my_age > 18:\n    if grade == 'A':\n        print('I can go to the party!')",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "grade",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "grade = 'C'\nif my_age > 18 and grade == 'A':\n    print('I can go to the party!')\n# nested if statements -- both conditions must be True\nmy_age = 19\ngrade = 'C'\nif my_age > 18:\n    if grade == 'A':\n        print('I can go to the party!')\n# if ternary",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "my_age",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "my_age = 19\ngrade = 'C'\nif my_age > 18:\n    if grade == 'A':\n        print('I can go to the party!')\n# if ternary\nx = 10\ny = 20\n#  action/ if condition true/ else condfition false\nz = x + y if x > y else y - x",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "grade",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "grade = 'C'\nif my_age > 18:\n    if grade == 'A':\n        print('I can go to the party!')\n# if ternary\nx = 10\ny = 20\n#  action/ if condition true/ else condfition false\nz = x + y if x > y else y - x\nprint(z)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 10\ny = 20\n#  action/ if condition true/ else condfition false\nz = x + y if x > y else y - x\nprint(z)\n# result 10\n# STRINGS\n# ------------------------------------------------\n# a string is a sequence of characters (ie. text)\ns = 'Howdy'",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "y = 20\n#  action/ if condition true/ else condfition false\nz = x + y if x > y else y - x\nprint(z)\n# result 10\n# STRINGS\n# ------------------------------------------------\n# a string is a sequence of characters (ie. text)\ns = 'Howdy'\nprint(s)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "z = x + y if x > y else y - x\nprint(z)\n# result 10\n# STRINGS\n# ------------------------------------------------\n# a string is a sequence of characters (ie. text)\ns = 'Howdy'\nprint(s)\nprint(len(s))\nprint(s[3])",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "s = 'Howdy'\nprint(s)\nprint(len(s))\nprint(s[3])\nprint(s[1:3])\nt = ' dude! '\ns += t\nprint(s + '|')\nprint(s.strip() + '|')\ns = s.rstrip('! ')",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "t",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "t = ' dude! '\ns += t\nprint(s + '|')\nprint(s.strip() + '|')\ns = s.rstrip('! ')\nprint(s)\ns = 'Howdy dude!'\nprint(s.lower())\nprint(s.upper()[:5])\nprint(s.title())",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "s = s.rstrip('! ')\nprint(s)\ns = 'Howdy dude!'\nprint(s.lower())\nprint(s.upper()[:5])\nprint(s.title())\nprint(s.replace('Howdy', 'Greetings'))\nprint(s)\nprint(s.count('d'))\nprint(s.find('w'))",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "s = 'Howdy dude!'\nprint(s.lower())\nprint(s.upper()[:5])\nprint(s.title())\nprint(s.replace('Howdy', 'Greetings'))\nprint(s)\nprint(s.count('d'))\nprint(s.find('w'))\nprint('dud' in s)\nprint('X' not in s)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "s = 'Raj'\nfor letter in s:\n    print(letter)\nfor letter in s:\n    print(letter, end='')\nprint()\n# if inside a for loop. indention is important.\nfor pig in s:\n    if pig != 'a':\n        print(pig, end='')",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 2\nwhile x < 5:\n    print('ha')\n    x += 1\n# DATA STRUCTURES\n# ------------------------------------------------\n# These functions all work on String, List, and Tuple\n# Indexing -- access any item in the sequence using its index\nx = 'frog'\nprint (x[3])\t\t\t# prints 'g'",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 'frog'\nprint (x[3])\t\t\t# prints 'g'\nx = ['pig', 'cow', 'horse']\nprint (x[1])\t\t\t# prints 'cow'\n# Slicing -- slice out substrings, sublists, subtuples using indexes\n# [start : end+1 : step]\nx = 'computer'\nprint(x[1:4])\t\t\t# items 1 to 3, 'omp'\nprint(x[1:6:2])\t\t\t# items 1, 3, 5, 'opt'\nprint(x[3:])\t\t\t# items 3 to end, 'puter'",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['pig', 'cow', 'horse']\nprint (x[1])\t\t\t# prints 'cow'\n# Slicing -- slice out substrings, sublists, subtuples using indexes\n# [start : end+1 : step]\nx = 'computer'\nprint(x[1:4])\t\t\t# items 1 to 3, 'omp'\nprint(x[1:6:2])\t\t\t# items 1, 3, 5, 'opt'\nprint(x[3:])\t\t\t# items 3 to end, 'puter'\nprint(x[:5])\t\t\t# items 0 to 4, 'compu'\nprint(x[-1])\t\t\t# last item, 'r'",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 'computer'\nprint(x[1:4])\t\t\t# items 1 to 3, 'omp'\nprint(x[1:6:2])\t\t\t# items 1, 3, 5, 'opt'\nprint(x[3:])\t\t\t# items 3 to end, 'puter'\nprint(x[:5])\t\t\t# items 0 to 4, 'compu'\nprint(x[-1])\t\t\t# last item, 'r'\nprint(x[-3:])\t\t\t# last 3 items, 'ter'\nprint(x[:-2])\t\t\t# all except last 2 items, 'comput'\n# Adding / Concatenating -- combine 2 sequences of the same type using +\nx = 'horse' + 'shoe'",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 'horse' + 'shoe'\nprint (x)\t\t\t\t# prints 'horseshoe'\t\nx = ['pig', 'cow'] + ['horse']\nprint (x)\t\t\t\t# prints ['pig', 'cow', 'horse']\n# Multiplying -- multiply a sequence using *\nx = 'bug' * 3\nprint (x)\t\t\t\t# prints 'bugbugbug'\nx = [8, 5] * 3\nprint (x)\t\t\t\t# prints [8, 5, 8, 5, 8, 5]\n# Checking Membership -- test whether an item is in or not in a sequence",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['pig', 'cow'] + ['horse']\nprint (x)\t\t\t\t# prints ['pig', 'cow', 'horse']\n# Multiplying -- multiply a sequence using *\nx = 'bug' * 3\nprint (x)\t\t\t\t# prints 'bugbugbug'\nx = [8, 5] * 3\nprint (x)\t\t\t\t# prints [8, 5, 8, 5, 8, 5]\n# Checking Membership -- test whether an item is in or not in a sequence\nx = 'bug'\nprint ('u' in x)\t\t# prints True",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 'bug' * 3\nprint (x)\t\t\t\t# prints 'bugbugbug'\nx = [8, 5] * 3\nprint (x)\t\t\t\t# prints [8, 5, 8, 5, 8, 5]\n# Checking Membership -- test whether an item is in or not in a sequence\nx = 'bug'\nprint ('u' in x)\t\t# prints True\nx = ['pig', 'cow', 'horse']\nprint ('cow' not in x)\t# prints False\n# Iterating\t-- iterate through the items in a sequence",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [8, 5] * 3\nprint (x)\t\t\t\t# prints [8, 5, 8, 5, 8, 5]\n# Checking Membership -- test whether an item is in or not in a sequence\nx = 'bug'\nprint ('u' in x)\t\t# prints True\nx = ['pig', 'cow', 'horse']\nprint ('cow' not in x)\t# prints False\n# Iterating\t-- iterate through the items in a sequence\nx = [7, 8, 3]\nfor item in x:",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 'bug'\nprint ('u' in x)\t\t# prints True\nx = ['pig', 'cow', 'horse']\nprint ('cow' not in x)\t# prints False\n# Iterating\t-- iterate through the items in a sequence\nx = [7, 8, 3]\nfor item in x:\n\tprint (item * 2)\t# prints 14, 16, 6\nx = [7, 8, 3]\nfor index, item in enumerate(x):",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['pig', 'cow', 'horse']\nprint ('cow' not in x)\t# prints False\n# Iterating\t-- iterate through the items in a sequence\nx = [7, 8, 3]\nfor item in x:\n\tprint (item * 2)\t# prints 14, 16, 6\nx = [7, 8, 3]\nfor index, item in enumerate(x):\n\tprint (index, item)\t# prints 0 7, 1 8, 2 3\n# Length -- count the number of items in a sequence",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [7, 8, 3]\nfor item in x:\n\tprint (item * 2)\t# prints 14, 16, 6\nx = [7, 8, 3]\nfor index, item in enumerate(x):\n\tprint (index, item)\t# prints 0 7, 1 8, 2 3\n# Length -- count the number of items in a sequence\nx = 'bug'\nprint (len(x))\t\t\t# prints 3\nx = ['pig', 'cow', 'horse']",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [7, 8, 3]\nfor index, item in enumerate(x):\n\tprint (index, item)\t# prints 0 7, 1 8, 2 3\n# Length -- count the number of items in a sequence\nx = 'bug'\nprint (len(x))\t\t\t# prints 3\nx = ['pig', 'cow', 'horse']\nprint (len(x))\t\t\t# prints 3\n# Minimum -- find the minimum item in a sequence lexicographically\n# alpha or numeric types, but cannot mix types",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 'bug'\nprint (len(x))\t\t\t# prints 3\nx = ['pig', 'cow', 'horse']\nprint (len(x))\t\t\t# prints 3\n# Minimum -- find the minimum item in a sequence lexicographically\n# alpha or numeric types, but cannot mix types\nx = 'bug'\nprint (min(x))\t\t\t# prints 'b' \nx = ['pig', 'cow', 'horse']\nprint (min(x))\t\t\t# prints 'cow'",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['pig', 'cow', 'horse']\nprint (len(x))\t\t\t# prints 3\n# Minimum -- find the minimum item in a sequence lexicographically\n# alpha or numeric types, but cannot mix types\nx = 'bug'\nprint (min(x))\t\t\t# prints 'b' \nx = ['pig', 'cow', 'horse']\nprint (min(x))\t\t\t# prints 'cow'\n# Maximum -- find the maximum item in a sequence\n# alpha or numeric types, but cannot mix types",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 'bug'\nprint (min(x))\t\t\t# prints 'b' \nx = ['pig', 'cow', 'horse']\nprint (min(x))\t\t\t# prints 'cow'\n# Maximum -- find the maximum item in a sequence\n# alpha or numeric types, but cannot mix types\nx = 'bug'\nprint (max(x))\t\t\t# prints 'u' \nx = ['pig', 'cow', 'horse']\nprint (max(x))\t\t\t# prints 'pig'",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['pig', 'cow', 'horse']\nprint (min(x))\t\t\t# prints 'cow'\n# Maximum -- find the maximum item in a sequence\n# alpha or numeric types, but cannot mix types\nx = 'bug'\nprint (max(x))\t\t\t# prints 'u' \nx = ['pig', 'cow', 'horse']\nprint (max(x))\t\t\t# prints 'pig'\n# Sum -- find the sum of items in a sequence\n# entire sequence must be numeric type",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 'bug'\nprint (max(x))\t\t\t# prints 'u' \nx = ['pig', 'cow', 'horse']\nprint (max(x))\t\t\t# prints 'pig'\n# Sum -- find the sum of items in a sequence\n# entire sequence must be numeric type\nx = [5, 7, 'bug']\ny = [5, 7, 'bug']\nprint (sum(x, y))\t\t\t# error!\nx = [2, 5, 8, 12]",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['pig', 'cow', 'horse']\nprint (max(x))\t\t\t# prints 'pig'\n# Sum -- find the sum of items in a sequence\n# entire sequence must be numeric type\nx = [5, 7, 'bug']\ny = [5, 7, 'bug']\nprint (sum(x, y))\t\t\t# error!\nx = [2, 5, 8, 12]\nprint (sum(x))\t\t\t# prints 27\nprint (sum(x[-2:])) \t# prints 20\t",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [5, 7, 'bug']\ny = [5, 7, 'bug']\nprint (sum(x, y))\t\t\t# error!\nx = [2, 5, 8, 12]\nprint (sum(x))\t\t\t# prints 27\nprint (sum(x[-2:])) \t# prints 20\t\n# Sorting -- returns a new list of items in sorted order\n# sorted does not change the original list\nx = 'bug'\nprint (sorted(x))\t\t# prints ['b', 'g', 'u']",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "y = [5, 7, 'bug']\nprint (sum(x, y))\t\t\t# error!\nx = [2, 5, 8, 12]\nprint (sum(x))\t\t\t# prints 27\nprint (sum(x[-2:])) \t# prints 20\t\n# Sorting -- returns a new list of items in sorted order\n# sorted does not change the original list\nx = 'bug'\nprint (sorted(x))\t\t# prints ['b', 'g', 'u']\nx = ['pig', 'cow', 'horse']",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [2, 5, 8, 12]\nprint (sum(x))\t\t\t# prints 27\nprint (sum(x[-2:])) \t# prints 20\t\n# Sorting -- returns a new list of items in sorted order\n# sorted does not change the original list\nx = 'bug'\nprint (sorted(x))\t\t# prints ['b', 'g', 'u']\nx = ['pig', 'cow', 'horse']\nprint (sorted(x))\t    # prints ['cow', 'horse', 'pig']\n# count (item)\t",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 'bug'\nprint (sorted(x))\t\t# prints ['b', 'g', 'u']\nx = ['pig', 'cow', 'horse']\nprint (sorted(x))\t    # prints ['cow', 'horse', 'pig']\n# count (item)\t\n# Returns count of an item\nx = 'hippo'\nprint (x.count('p'))\t# prints 2\nx = ['pig', 'cow', 'horse', 'cow']\nprint (x.count('cow'))\t# prints 2",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['pig', 'cow', 'horse']\nprint (sorted(x))\t    # prints ['cow', 'horse', 'pig']\n# count (item)\t\n# Returns count of an item\nx = 'hippo'\nprint (x.count('p'))\t# prints 2\nx = ['pig', 'cow', 'horse', 'cow']\nprint (x.count('cow'))\t# prints 2\n# index (item)\t\n# Returns the index of the first occurrence of an item",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 'hippo'\nprint (x.count('p'))\t# prints 2\nx = ['pig', 'cow', 'horse', 'cow']\nprint (x.count('cow'))\t# prints 2\n# index (item)\t\n# Returns the index of the first occurrence of an item\nx = 'hippo'\nprint (x.index('p'))\t# prints 2\nx = ['pig', 'cow', 'horse', 'cow']\nprint (x.index('cow'))\t# prints 1",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['pig', 'cow', 'horse', 'cow']\nprint (x.count('cow'))\t# prints 2\n# index (item)\t\n# Returns the index of the first occurrence of an item\nx = 'hippo'\nprint (x.index('p'))\t# prints 2\nx = ['pig', 'cow', 'horse', 'cow']\nprint (x.index('cow'))\t# prints 1\n# Unpacking\t- unpack the n items of a sequence into n variables\nx = ['pig', 'cow', 'horse']",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 'hippo'\nprint (x.index('p'))\t# prints 2\nx = ['pig', 'cow', 'horse', 'cow']\nprint (x.index('cow'))\t# prints 1\n# Unpacking\t- unpack the n items of a sequence into n variables\nx = ['pig', 'cow', 'horse']\na, b, c = x\t\t\t\t# now a is 'pig', b is 'cow', c is 'horse'\n# LISTS\n# ------------------------------------------------\n# constructors – creating a new list",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['pig', 'cow', 'horse', 'cow']\nprint (x.index('cow'))\t# prints 1\n# Unpacking\t- unpack the n items of a sequence into n variables\nx = ['pig', 'cow', 'horse']\na, b, c = x\t\t\t\t# now a is 'pig', b is 'cow', c is 'horse'\n# LISTS\n# ------------------------------------------------\n# constructors – creating a new list\nx = list((1, 2, 3))\t\t# note double parens\nx = ['a', 25, 'dog', 8.43]",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['pig', 'cow', 'horse']\na, b, c = x\t\t\t\t# now a is 'pig', b is 'cow', c is 'horse'\n# LISTS\n# ------------------------------------------------\n# constructors – creating a new list\nx = list((1, 2, 3))\t\t# note double parens\nx = ['a', 25, 'dog', 8.43]\nx = list(tuple1)\n# list creation using comprehensions\nx = [m for m in range(8)]",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = list((1, 2, 3))\t\t# note double parens\nx = ['a', 25, 'dog', 8.43]\nx = list(tuple1)\n# list creation using comprehensions\nx = [m for m in range(8)]\n# resulting list: [0, 1, 2, 3, 4, 5, 6, 7]\nx = [z**2 for z in range(10) if z>4]\n# resulting list: [25, 36, 49, 64, 81]\n# Delete -- delete a list or an item from a list\nx = [5, 3, 8, 6]",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['a', 25, 'dog', 8.43]\nx = list(tuple1)\n# list creation using comprehensions\nx = [m for m in range(8)]\n# resulting list: [0, 1, 2, 3, 4, 5, 6, 7]\nx = [z**2 for z in range(10) if z>4]\n# resulting list: [25, 36, 49, 64, 81]\n# Delete -- delete a list or an item from a list\nx = [5, 3, 8, 6]\ndel(x[1])\t\t\t\t# [5, 8, 6]",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = list(tuple1)\n# list creation using comprehensions\nx = [m for m in range(8)]\n# resulting list: [0, 1, 2, 3, 4, 5, 6, 7]\nx = [z**2 for z in range(10) if z>4]\n# resulting list: [25, 36, 49, 64, 81]\n# Delete -- delete a list or an item from a list\nx = [5, 3, 8, 6]\ndel(x[1])\t\t\t\t# [5, 8, 6]\ndel(x)\t\t\t\t\t# deletes list x",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [m for m in range(8)]\n# resulting list: [0, 1, 2, 3, 4, 5, 6, 7]\nx = [z**2 for z in range(10) if z>4]\n# resulting list: [25, 36, 49, 64, 81]\n# Delete -- delete a list or an item from a list\nx = [5, 3, 8, 6]\ndel(x[1])\t\t\t\t# [5, 8, 6]\ndel(x)\t\t\t\t\t# deletes list x\n# Append -- append an item to a list\nx = [5, 3, 8, 6]",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [z**2 for z in range(10) if z>4]\n# resulting list: [25, 36, 49, 64, 81]\n# Delete -- delete a list or an item from a list\nx = [5, 3, 8, 6]\ndel(x[1])\t\t\t\t# [5, 8, 6]\ndel(x)\t\t\t\t\t# deletes list x\n# Append -- append an item to a list\nx = [5, 3, 8, 6]\nx.append(7)\t\t\t\t# [5, 3, 8, 6, 7]\n# Extend -- append an sequence to a list",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [5, 3, 8, 6]\ndel(x[1])\t\t\t\t# [5, 8, 6]\ndel(x)\t\t\t\t\t# deletes list x\n# Append -- append an item to a list\nx = [5, 3, 8, 6]\nx.append(7)\t\t\t\t# [5, 3, 8, 6, 7]\n# Extend -- append an sequence to a list\nx = [5, 3, 8, 6]\ny = [12, 13]\nx.extend(y)\t\t\t\t# [5, 3, 8, 6, 7, 12, 13]",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [5, 3, 8, 6]\nx.append(7)\t\t\t\t# [5, 3, 8, 6, 7]\n# Extend -- append an sequence to a list\nx = [5, 3, 8, 6]\ny = [12, 13]\nx.extend(y)\t\t\t\t# [5, 3, 8, 6, 7, 12, 13]\n# Insert -- insert an item at given index.\tx.insert(index, item)\nx = [5, 3, 8, 6]\nx.insert(1, 7)\t\t\t# [5, 7, 3, 8, 6]\nx.insert(1,['a','m'])\t# [5, ['a', 'm'], 7, 3, 8, 6] ",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [5, 3, 8, 6]\ny = [12, 13]\nx.extend(y)\t\t\t\t# [5, 3, 8, 6, 7, 12, 13]\n# Insert -- insert an item at given index.\tx.insert(index, item)\nx = [5, 3, 8, 6]\nx.insert(1, 7)\t\t\t# [5, 7, 3, 8, 6]\nx.insert(1,['a','m'])\t# [5, ['a', 'm'], 7, 3, 8, 6] \n# Pop -- pops last item off the list, and returns item\nx = [5, 3, 8, 6]\nx.pop()\t\t\t\t\t# [5, 3, 8]. and returns the 6",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "y = [12, 13]\nx.extend(y)\t\t\t\t# [5, 3, 8, 6, 7, 12, 13]\n# Insert -- insert an item at given index.\tx.insert(index, item)\nx = [5, 3, 8, 6]\nx.insert(1, 7)\t\t\t# [5, 7, 3, 8, 6]\nx.insert(1,['a','m'])\t# [5, ['a', 'm'], 7, 3, 8, 6] \n# Pop -- pops last item off the list, and returns item\nx = [5, 3, 8, 6]\nx.pop()\t\t\t\t\t# [5, 3, 8]. and returns the 6\nprint(x.pop())\t\t\t# [5, 3]. and prints 8 ",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [5, 3, 8, 6]\nx.insert(1, 7)\t\t\t# [5, 7, 3, 8, 6]\nx.insert(1,['a','m'])\t# [5, ['a', 'm'], 7, 3, 8, 6] \n# Pop -- pops last item off the list, and returns item\nx = [5, 3, 8, 6]\nx.pop()\t\t\t\t\t# [5, 3, 8]. and returns the 6\nprint(x.pop())\t\t\t# [5, 3]. and prints 8 \n# Remove -- remove first instance of an item\nx = [5, 3, 8, 6, 3]\nx.remove(3)\t\t\t\t# [5, 8, 6, 3]",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [5, 3, 8, 6]\nx.pop()\t\t\t\t\t# [5, 3, 8]. and returns the 6\nprint(x.pop())\t\t\t# [5, 3]. and prints 8 \n# Remove -- remove first instance of an item\nx = [5, 3, 8, 6, 3]\nx.remove(3)\t\t\t\t# [5, 8, 6, 3]\n# Reverse -- reverse the order of the list\nx = [5, 3, 8, 6]\nx.reverse()\t\t\t\t# [6, 8, 3, 5]\n# Sort -- sort the list in place",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [5, 3, 8, 6, 3]\nx.remove(3)\t\t\t\t# [5, 8, 6, 3]\n# Reverse -- reverse the order of the list\nx = [5, 3, 8, 6]\nx.reverse()\t\t\t\t# [6, 8, 3, 5]\n# Sort -- sort the list in place\n# sorted(x) returns a new sorted list without changing the original list x. \n# x.sort() puts the items of x in sorted order (sorts in place).\nx = [5, 3, 8, 6]\nx.sort()\t\t\t\t# [3, 5, 6, 8]",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [5, 3, 8, 6]\nx.reverse()\t\t\t\t# [6, 8, 3, 5]\n# Sort -- sort the list in place\n# sorted(x) returns a new sorted list without changing the original list x. \n# x.sort() puts the items of x in sorted order (sorts in place).\nx = [5, 3, 8, 6]\nx.sort()\t\t\t\t# [3, 5, 6, 8]\n# Clear\t-- delete all items from the list\nx = [5, 3, 8, 6]\nx.clear()\t\t\t\t# []",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [5, 3, 8, 6]\nx.sort()\t\t\t\t# [3, 5, 6, 8]\n# Clear\t-- delete all items from the list\nx = [5, 3, 8, 6]\nx.clear()\t\t\t\t# []\n# TUPLES\n# ------------------------------------------------\n# constructors – creating a new tuple\nx = ()\t\t\t\t\t# no-item tuple\nx = (1,2,3)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = [5, 3, 8, 6]\nx.clear()\t\t\t\t# []\n# TUPLES\n# ------------------------------------------------\n# constructors – creating a new tuple\nx = ()\t\t\t\t\t# no-item tuple\nx = (1,2,3)\nx = 1, 2, 3\t\t\t\t# parenthesis are optional\nx = 2, \t\t\t\t\t# single-item tuple\nlist1 = [5, 7, 7]",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ()\t\t\t\t\t# no-item tuple\nx = (1,2,3)\nx = 1, 2, 3\t\t\t\t# parenthesis are optional\nx = 2, \t\t\t\t\t# single-item tuple\nlist1 = [5, 7, 7]\nx = tuple(list1)\t\t# tuple from list\n# Tuples are Immutable, but member objects may be mutable\nx = (1, 2, 3)\ndel(x[1])\t\t\t\t# error!\nx[1] = 8\t\t\t\t# error!",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = (1,2,3)\nx = 1, 2, 3\t\t\t\t# parenthesis are optional\nx = 2, \t\t\t\t\t# single-item tuple\nlist1 = [5, 7, 7]\nx = tuple(list1)\t\t# tuple from list\n# Tuples are Immutable, but member objects may be mutable\nx = (1, 2, 3)\ndel(x[1])\t\t\t\t# error!\nx[1] = 8\t\t\t\t# error!\nx = ([1,2], 3)\t\t\t# 2-item tuple: list and int",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 1, 2, 3\t\t\t\t# parenthesis are optional\nx = 2, \t\t\t\t\t# single-item tuple\nlist1 = [5, 7, 7]\nx = tuple(list1)\t\t# tuple from list\n# Tuples are Immutable, but member objects may be mutable\nx = (1, 2, 3)\ndel(x[1])\t\t\t\t# error!\nx[1] = 8\t\t\t\t# error!\nx = ([1,2], 3)\t\t\t# 2-item tuple: list and int\ndel(x[0][1])\t\t\t# ([1], 3)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 2, \t\t\t\t\t# single-item tuple\nlist1 = [5, 7, 7]\nx = tuple(list1)\t\t# tuple from list\n# Tuples are Immutable, but member objects may be mutable\nx = (1, 2, 3)\ndel(x[1])\t\t\t\t# error!\nx[1] = 8\t\t\t\t# error!\nx = ([1,2], 3)\t\t\t# 2-item tuple: list and int\ndel(x[0][1])\t\t\t# ([1], 3)\n# SETS",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "list1 = [5, 7, 7]\nx = tuple(list1)\t\t# tuple from list\n# Tuples are Immutable, but member objects may be mutable\nx = (1, 2, 3)\ndel(x[1])\t\t\t\t# error!\nx[1] = 8\t\t\t\t# error!\nx = ([1,2], 3)\t\t\t# 2-item tuple: list and int\ndel(x[0][1])\t\t\t# ([1], 3)\n# SETS\n# ------------------------------------------------",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = tuple(list1)\t\t# tuple from list\n# Tuples are Immutable, but member objects may be mutable\nx = (1, 2, 3)\ndel(x[1])\t\t\t\t# error!\nx[1] = 8\t\t\t\t# error!\nx = ([1,2], 3)\t\t\t# 2-item tuple: list and int\ndel(x[0][1])\t\t\t# ([1], 3)\n# SETS\n# ------------------------------------------------\n# constructors – creating a new set",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = (1, 2, 3)\ndel(x[1])\t\t\t\t# error!\nx[1] = 8\t\t\t\t# error!\nx = ([1,2], 3)\t\t\t# 2-item tuple: list and int\ndel(x[0][1])\t\t\t# ([1], 3)\n# SETS\n# ------------------------------------------------\n# constructors – creating a new set\nx = {3,5,3,5}\t\t\t# {5, 3}\nx = set()\t\t\t\t# empty set",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x[1]",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x[1] = 8\t\t\t\t# error!\nx = ([1,2], 3)\t\t\t# 2-item tuple: list and int\ndel(x[0][1])\t\t\t# ([1], 3)\n# SETS\n# ------------------------------------------------\n# constructors – creating a new set\nx = {3,5,3,5}\t\t\t# {5, 3}\nx = set()\t\t\t\t# empty set\nlist1 = [5, 7, 7]\nx = set(list1)\t\t\t# new set from list. strips duplicates, {5, 7}",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ([1,2], 3)\t\t\t# 2-item tuple: list and int\ndel(x[0][1])\t\t\t# ([1], 3)\n# SETS\n# ------------------------------------------------\n# constructors – creating a new set\nx = {3,5,3,5}\t\t\t# {5, 3}\nx = set()\t\t\t\t# empty set\nlist1 = [5, 7, 7]\nx = set(list1)\t\t\t# new set from list. strips duplicates, {5, 7}\n# Set Comprehension",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = {3,5,3,5}\t\t\t# {5, 3}\nx = set()\t\t\t\t# empty set\nlist1 = [5, 7, 7]\nx = set(list1)\t\t\t# new set from list. strips duplicates, {5, 7}\n# Set Comprehension\nx = {3*x for x in range(10) if x>5} \n# resulting set: {18, 21, 24, 27} but in random order\n# DICTIONARIES\n# ------------------------------------------------\n# constructors – creating a new dict",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = set()\t\t\t\t# empty set\nlist1 = [5, 7, 7]\nx = set(list1)\t\t\t# new set from list. strips duplicates, {5, 7}\n# Set Comprehension\nx = {3*x for x in range(10) if x>5} \n# resulting set: {18, 21, 24, 27} but in random order\n# DICTIONARIES\n# ------------------------------------------------\n# constructors – creating a new dict\nx = {'pork':25.3, 'beef':33.8, 'chicken':22.7}",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "list1",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "list1 = [5, 7, 7]\nx = set(list1)\t\t\t# new set from list. strips duplicates, {5, 7}\n# Set Comprehension\nx = {3*x for x in range(10) if x>5} \n# resulting set: {18, 21, 24, 27} but in random order\n# DICTIONARIES\n# ------------------------------------------------\n# constructors – creating a new dict\nx = {'pork':25.3, 'beef':33.8, 'chicken':22.7}\nx = dict([('pork', 25.3),('beef', 33.8),('chicken', 22.7)])",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = set(list1)\t\t\t# new set from list. strips duplicates, {5, 7}\n# Set Comprehension\nx = {3*x for x in range(10) if x>5} \n# resulting set: {18, 21, 24, 27} but in random order\n# DICTIONARIES\n# ------------------------------------------------\n# constructors – creating a new dict\nx = {'pork':25.3, 'beef':33.8, 'chicken':22.7}\nx = dict([('pork', 25.3),('beef', 33.8),('chicken', 22.7)])\nx = dict(pork=25.3, beef=33.8, chicken=22.7)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = {3*x for x in range(10) if x>5} \n# resulting set: {18, 21, 24, 27} but in random order\n# DICTIONARIES\n# ------------------------------------------------\n# constructors – creating a new dict\nx = {'pork':25.3, 'beef':33.8, 'chicken':22.7}\nx = dict([('pork', 25.3),('beef', 33.8),('chicken', 22.7)])\nx = dict(pork=25.3, beef=33.8, chicken=22.7)\n# Accessing keys and values in a dict\nx.keys()\t\t\t\t# returns list of keys in x",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = {'pork':25.3, 'beef':33.8, 'chicken':22.7}\nx = dict([('pork', 25.3),('beef', 33.8),('chicken', 22.7)])\nx = dict(pork=25.3, beef=33.8, chicken=22.7)\n# Accessing keys and values in a dict\nx.keys()\t\t\t\t# returns list of keys in x\nx.values()\t\t\t\t# returns list of values in x\nx.items()\t\t\t\t# returns list of key-value tuple pairs in x\nitem in x.values()\t\t# tests membership in x, returns boolean\n# Iterating a Dict\nfor key in x:\t\t\t# iterate keys",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = dict([('pork', 25.3),('beef', 33.8),('chicken', 22.7)])\nx = dict(pork=25.3, beef=33.8, chicken=22.7)\n# Accessing keys and values in a dict\nx.keys()\t\t\t\t# returns list of keys in x\nx.values()\t\t\t\t# returns list of values in x\nx.items()\t\t\t\t# returns list of key-value tuple pairs in x\nitem in x.values()\t\t# tests membership in x, returns boolean\n# Iterating a Dict\nfor key in x:\t\t\t# iterate keys\n    print(key, x[key])\t# print all key/value pairs",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = dict(pork=25.3, beef=33.8, chicken=22.7)\n# Accessing keys and values in a dict\nx.keys()\t\t\t\t# returns list of keys in x\nx.values()\t\t\t\t# returns list of values in x\nx.items()\t\t\t\t# returns list of key-value tuple pairs in x\nitem in x.values()\t\t# tests membership in x, returns boolean\n# Iterating a Dict\nfor key in x:\t\t\t# iterate keys\n    print(key, x[key])\t# print all key/value pairs\nfor k, v in x.items():\t# iterate key/value pairs",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "\tnum_cubed",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "\tnum_cubed = num * num * num\n\treturn num_cubed\n# to call the function, and pass in 5:\ncuber(5)\n# but if you want to assign the return value (125) to a variable,\nx = 5\nx_cubed = cuber(x)\nprint(x, x_cubed)\n# you can set default values for parameters\ndef cuber(num = 2):",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = 5\nx_cubed = cuber(x)\nprint(x, x_cubed)\n# you can set default values for parameters\ndef cuber(num = 2):\n\tnum_cubed = num * num * num\n\treturn num_cubed\nprint(cuber())\t\t# uses the default 2\nprint(cuber(3))\t\t# 3 overrides the default\n# you can pass in multiple values, and return multiple values",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x_cubed",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x_cubed = cuber(x)\nprint(x, x_cubed)\n# you can set default values for parameters\ndef cuber(num = 2):\n\tnum_cubed = num * num * num\n\treturn num_cubed\nprint(cuber())\t\t# uses the default 2\nprint(cuber(3))\t\t# 3 overrides the default\n# you can pass in multiple values, and return multiple values\n# but order is important",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "\tnum_cubed",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "\tnum_cubed = num * num * num\n\treturn num_cubed\nprint(cuber())\t\t# uses the default 2\nprint(cuber(3))\t\t# 3 overrides the default\n# you can pass in multiple values, and return multiple values\n# but order is important\ndef solve_triangle(base, height, side1, side2, side3):\n\tarea = base * height / 2\n\tperimeter = side1 + side2 + side3\n\treturn area, perimeter",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "\tarea",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "\tarea = base * height / 2\n\tperimeter = side1 + side2 + side3\n\treturn area, perimeter\narea, perim = solve_triangle(3, 4, 5, 3, 4)\t# b=3, h=4, s1=5, s2=3, s3=4\nprint('Area:', area, ' Perimeter:', perim)\n# above are all called \"positional arguments\", and order matters\n# you can also pass in \"keyword arguments\" when calling a function\na, p = solve_triangle(side1=5, side2=3, side3=4, height=4, base=3)\nprint(a, p)\n# or use a combination of both, but positional arguments must come first",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "\tperimeter",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "\tperimeter = side1 + side2 + side3\n\treturn area, perimeter\narea, perim = solve_triangle(3, 4, 5, 3, 4)\t# b=3, h=4, s1=5, s2=3, s3=4\nprint('Area:', area, ' Perimeter:', perim)\n# above are all called \"positional arguments\", and order matters\n# you can also pass in \"keyword arguments\" when calling a function\na, p = solve_triangle(side1=5, side2=3, side3=4, height=4, base=3)\nprint(a, p)\n# or use a combination of both, but positional arguments must come first\na, p = solve_triangle(3, 4, side3=4, side2=3, side1=5)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "\t\tself.radius",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "\t\tself.radius = r\n\tdef getPerimeter(self):\n\t\treturn 2 * self.radius * 3.14\n\tdef getArea(self):\n\t\treturn self.radius ** 2 * 3.14\n# all methods have the self parameter, which is Python's reference to the object that invoked the method\n# this calls the __init__ method, which creates the new Circle\ncircle1 = Circle(3)\t\t\n# you can access the circle's attributes and methods using the dot operator\nprint(\"Radius =\", circle1.radius)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "circle1",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "circle1 = Circle(3)\t\t\n# you can access the circle's attributes and methods using the dot operator\nprint(\"Radius =\", circle1.radius)\nprint(\"Perimeter =\", circle1.getPerimeter())\t\n# IMPORTS\n# ------------------------------------------------\n# Python has many many classes already written that you can use\n# To access methods and data from another class you must import it\nimport math\nprint(math.pi)",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['a', 'b', 'c']\nshuffle(x)\nprint(x)\n# can rename an imported function if you want\nx = ['a', 'b', 'c']\nfrom random import shuffle as sf\nsf(x)\nprint(x)\n# can also import whole module using *\nfrom random import *",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "x = ['a', 'b', 'c']\nfrom random import shuffle as sf\nsf(x)\nprint(x)\n# can also import whole module using *\nfrom random import *\nprint(randint(1,5))\n# FILE READ & WRITE\n# ------------------------------------------------\nfilename = 'city_data.txt'",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "filename",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.python in 90 minutes",
        "description": "all files.c++.tests.classes.python in 90 minutes",
        "peekOfCode": "filename = 'city_data.txt'\n# this opens a file handle called fin, iterates the lines of the file, and prints each line\nwith open(filename) as fin:\n    for line in fin:\n        print(line)\n# we can grab words from a line by using split, which turns each line into a list called row\nwith open(filename) as fin:\n    fin.readline()\n    for line in fin:\n        row = line.split(',')",
        "detail": "all files.c++.tests.classes.python in 90 minutes",
        "documentation": {}
    },
    {
        "label": "Shape",
        "kind": 6,
        "importPath": "all files.c++.tests.classes.shape_class",
        "description": "all files.c++.tests.classes.shape_class",
        "peekOfCode": "class Shape:\n    \tdef __init__(self, color=None):\n\t\tself.color = color\n\t    def get_color(self):\n\t\treturn self.color\n        def __str__(self):\n\t\treturn self.get_color() + ' Shape'",
        "detail": "all files.c++.tests.classes.shape_class",
        "documentation": {}
    },
    {
        "label": "\t\tself.color",
        "kind": 5,
        "importPath": "all files.c++.tests.classes.shape_class",
        "description": "all files.c++.tests.classes.shape_class",
        "peekOfCode": "\t\tself.color = color\n\t    def get_color(self):\n\t\treturn self.color\n        def __str__(self):\n\t\treturn self.get_color() + ' Shape'",
        "detail": "all files.c++.tests.classes.shape_class",
        "documentation": {}
    },
    {
        "label": "Node",
        "kind": 6,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "class Node:\n\tdef __init__(self, data, par = None):\n\t\t#print (\"Node __init__: \" + str(data))\n\t\tself.data = list([data])\n\t\tself.parent = par\n\t\tself.child = list()\n\tdef __str__(self):\n\t\tif self.parent:\n\t\t\treturn str(self.parent.data) + ' : ' + str(self.data)\n\t\treturn 'Root : ' + str(self.data)",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "Tree",
        "kind": 6,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "class Tree:\n\tdef __init__(self):\n\t\tprint(\"Tree __init__\")\n\t\tself.root = None\n\tdef insert(self, item):\n\t\tprint(\"Tree insert: \" + str(item))\n\t\tif self.root is None:\n\t\t\tself.root = Node(item)\n\t\telse:\n\t\t\tself.root._insert(Node(item))",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\tself.data",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\tself.data = list([data])\n\t\tself.parent = par\n\t\tself.child = list()\n\tdef __str__(self):\n\t\tif self.parent:\n\t\t\treturn str(self.parent.data) + ' : ' + str(self.data)\n\t\treturn 'Root : ' + str(self.data)\n\tdef __lt__(self, node):\n\t\treturn self.data[0] < node.data[0]\n\tdef _isLeaf(self):",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\tself.parent",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\tself.parent = par\n\t\tself.child = list()\n\tdef __str__(self):\n\t\tif self.parent:\n\t\t\treturn str(self.parent.data) + ' : ' + str(self.data)\n\t\treturn 'Root : ' + str(self.data)\n\tdef __lt__(self, node):\n\t\treturn self.data[0] < node.data[0]\n\tdef _isLeaf(self):\n\t\treturn len(self.child) == 0",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\tself.child",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\tself.child = list()\n\tdef __str__(self):\n\t\tif self.parent:\n\t\t\treturn str(self.parent.data) + ' : ' + str(self.data)\n\t\treturn 'Root : ' + str(self.data)\n\tdef __lt__(self, node):\n\t\treturn self.data[0] < node.data[0]\n\tdef _isLeaf(self):\n\t\treturn len(self.child) == 0\n\t# merge new_node sub-tree into self node",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\t\tchild.parent",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\t\tchild.parent = self\n\t\tself.data.extend(new_node.data)\n\t\tself.data.sort()\n\t\tself.child.extend(new_node.child)\n\t\tif len(self.child) > 1:\n\t\t\tself.child.sort()\n\t\tif len(self.data) > 2:\n\t\t\tself._split()\n\t# find correct node to insert new node into tree\n\tdef _insert(self, new_node):",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\tleft_child",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\tleft_child = Node(self.data[0], self)\n\t\tright_child = Node(self.data[2], self)\n\t\tif self.child:\n\t\t\tself.child[0].parent = left_child\n\t\t\tself.child[1].parent = left_child\n\t\t\tself.child[2].parent = right_child\n\t\t\tself.child[3].parent = right_child\n\t\t\tleft_child.child = [self.child[0], self.child[1]]\n\t\t\tright_child.child = [self.child[2], self.child[3]]\n\t\tself.child = [left_child]",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\tright_child",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\tright_child = Node(self.data[2], self)\n\t\tif self.child:\n\t\t\tself.child[0].parent = left_child\n\t\t\tself.child[1].parent = left_child\n\t\t\tself.child[2].parent = right_child\n\t\t\tself.child[3].parent = right_child\n\t\t\tleft_child.child = [self.child[0], self.child[1]]\n\t\t\tright_child.child = [self.child[2], self.child[3]]\n\t\tself.child = [left_child]\n\t\tself.child.append(right_child)",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.child[0].parent",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\t\tself.child[0].parent = left_child\n\t\t\tself.child[1].parent = left_child\n\t\t\tself.child[2].parent = right_child\n\t\t\tself.child[3].parent = right_child\n\t\t\tleft_child.child = [self.child[0], self.child[1]]\n\t\t\tright_child.child = [self.child[2], self.child[3]]\n\t\tself.child = [left_child]\n\t\tself.child.append(right_child)\n\t\tself.data = [self.data[1]]\n\t\t# now have new sub-tree, self. need to add self to its parent node",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.child[1].parent",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\t\tself.child[1].parent = left_child\n\t\t\tself.child[2].parent = right_child\n\t\t\tself.child[3].parent = right_child\n\t\t\tleft_child.child = [self.child[0], self.child[1]]\n\t\t\tright_child.child = [self.child[2], self.child[3]]\n\t\tself.child = [left_child]\n\t\tself.child.append(right_child)\n\t\tself.data = [self.data[1]]\n\t\t# now have new sub-tree, self. need to add self to its parent node\n\t\tif self.parent:",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.child[2].parent",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\t\tself.child[2].parent = right_child\n\t\t\tself.child[3].parent = right_child\n\t\t\tleft_child.child = [self.child[0], self.child[1]]\n\t\t\tright_child.child = [self.child[2], self.child[3]]\n\t\tself.child = [left_child]\n\t\tself.child.append(right_child)\n\t\tself.data = [self.data[1]]\n\t\t# now have new sub-tree, self. need to add self to its parent node\n\t\tif self.parent:\n\t\t\tif self in self.parent.child:",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.child[3].parent",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\t\tself.child[3].parent = right_child\n\t\t\tleft_child.child = [self.child[0], self.child[1]]\n\t\t\tright_child.child = [self.child[2], self.child[3]]\n\t\tself.child = [left_child]\n\t\tself.child.append(right_child)\n\t\tself.data = [self.data[1]]\n\t\t# now have new sub-tree, self. need to add self to its parent node\n\t\tif self.parent:\n\t\t\tif self in self.parent.child:\n\t\t\t\tself.parent.child.remove(self)",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\t\tleft_child.child",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\t\tleft_child.child = [self.child[0], self.child[1]]\n\t\t\tright_child.child = [self.child[2], self.child[3]]\n\t\tself.child = [left_child]\n\t\tself.child.append(right_child)\n\t\tself.data = [self.data[1]]\n\t\t# now have new sub-tree, self. need to add self to its parent node\n\t\tif self.parent:\n\t\t\tif self in self.parent.child:\n\t\t\t\tself.parent.child.remove(self)\n\t\t\tself.parent._add(self)",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\t\tright_child.child",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\t\tright_child.child = [self.child[2], self.child[3]]\n\t\tself.child = [left_child]\n\t\tself.child.append(right_child)\n\t\tself.data = [self.data[1]]\n\t\t# now have new sub-tree, self. need to add self to its parent node\n\t\tif self.parent:\n\t\t\tif self in self.parent.child:\n\t\t\t\tself.parent.child.remove(self)\n\t\t\tself.parent._add(self)\n\t\telse:",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\tself.child",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\tself.child = [left_child]\n\t\tself.child.append(right_child)\n\t\tself.data = [self.data[1]]\n\t\t# now have new sub-tree, self. need to add self to its parent node\n\t\tif self.parent:\n\t\t\tif self in self.parent.child:\n\t\t\t\tself.parent.child.remove(self)\n\t\t\tself.parent._add(self)\n\t\telse:\n\t\t\tleft_child.parent = self",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\tself.data",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\tself.data = [self.data[1]]\n\t\t# now have new sub-tree, self. need to add self to its parent node\n\t\tif self.parent:\n\t\t\tif self in self.parent.child:\n\t\t\t\tself.parent.child.remove(self)\n\t\t\tself.parent._add(self)\n\t\telse:\n\t\t\tleft_child.parent = self\n\t\t\tright_child.parent = self\n\t# find an item in the tree; return item, or False if not found\t\t",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\t\tleft_child.parent",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\t\tleft_child.parent = self\n\t\t\tright_child.parent = self\n\t# find an item in the tree; return item, or False if not found\t\t\n\tdef _find(self, item):\n\t\t# print (\"Find \" + str(item))\n\t\tif item in self.data:\n\t\t\treturn item\n\t\telif self._isLeaf():\n\t\t\treturn False\n\t\telif item > self.data[-1]:",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\t\tright_child.parent",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\t\tright_child.parent = self\n\t# find an item in the tree; return item, or False if not found\t\t\n\tdef _find(self, item):\n\t\t# print (\"Find \" + str(item))\n\t\tif item in self.data:\n\t\t\treturn item\n\t\telif self._isLeaf():\n\t\t\treturn False\n\t\telif item > self.data[-1]:\n\t\t\treturn self.child[-1]._find(item)",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\tself.root",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\tself.root = None\n\tdef insert(self, item):\n\t\tprint(\"Tree insert: \" + str(item))\n\t\tif self.root is None:\n\t\t\tself.root = Node(item)\n\t\telse:\n\t\t\tself.root._insert(Node(item))\n\t\t\twhile self.root.parent:\n\t\t\t\tself.root = self.root.parent\n\t\treturn True",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.root",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\t\tself.root = Node(item)\n\t\telse:\n\t\t\tself.root._insert(Node(item))\n\t\t\twhile self.root.parent:\n\t\t\t\tself.root = self.root.parent\n\t\treturn True\n\tdef find(self, item):\n\t\treturn self.root._find(item)\n\tdef remove(self, item):\n\t\tself.root.remove(item)",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.root",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "\t\t\t\tself.root = self.root.parent\n\t\treturn True\n\tdef find(self, item):\n\t\treturn self.root._find(item)\n\tdef remove(self, item):\n\t\tself.root.remove(item)\n\tdef printTop2Tiers(self):\n\t\tprint ('----Top 2 Tiers----')\n\t\tprint (str(self.root.data))\n\t\tfor child in self.root.child:",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "tree",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "tree = Tree()\nlst = [13, 7, 24, 15, 4, 29, 20, 16, 19, 1, 5, 22, 17]\nfor item in lst:\n\ttree.insert(item)\ntree.printTop2Tiers()\n# for i in range (25):\n\t# tree.insert(i)\n\t# tree.printTop2Tiers()\n# tree.preorder()\n# print (tree.find(16))",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "all files.c++.tests.2-3_tree",
        "description": "all files.c++.tests.2-3_tree",
        "peekOfCode": "lst = [13, 7, 24, 15, 4, 29, 20, 16, 19, 1, 5, 22, 17]\nfor item in lst:\n\ttree.insert(item)\ntree.printTop2Tiers()\n# for i in range (25):\n\t# tree.insert(i)\n\t# tree.printTop2Tiers()\n# tree.preorder()\n# print (tree.find(16))",
        "detail": "all files.c++.tests.2-3_tree",
        "documentation": {}
    },
    {
        "label": "left",
        "kind": 5,
        "importPath": "all files.c++.tests.Error101",
        "description": "all files.c++.tests.Error101",
        "peekOfCode": "left = -0\nright = 0\nchi_1 = 8023\nchi_2 = 9203\nself = print(chi_1, chi_2)\nx == (\"0\")\ny == (\"-0\")\nwhile self.right(w, y) == False:\n    print(\"Beta 1.18.4\")\n    if self.right(w, y) == True:",
        "detail": "all files.c++.tests.Error101",
        "documentation": {}
    },
    {
        "label": "right",
        "kind": 5,
        "importPath": "all files.c++.tests.Error101",
        "description": "all files.c++.tests.Error101",
        "peekOfCode": "right = 0\nchi_1 = 8023\nchi_2 = 9203\nself = print(chi_1, chi_2)\nx == (\"0\")\ny == (\"-0\")\nwhile self.right(w, y) == False:\n    print(\"Beta 1.18.4\")\n    if self.right(w, y) == True:\n        break",
        "detail": "all files.c++.tests.Error101",
        "documentation": {}
    },
    {
        "label": "chi_1",
        "kind": 5,
        "importPath": "all files.c++.tests.Error101",
        "description": "all files.c++.tests.Error101",
        "peekOfCode": "chi_1 = 8023\nchi_2 = 9203\nself = print(chi_1, chi_2)\nx == (\"0\")\ny == (\"-0\")\nwhile self.right(w, y) == False:\n    print(\"Beta 1.18.4\")\n    if self.right(w, y) == True:\n        break\nwhile self.left(w, y) == False:",
        "detail": "all files.c++.tests.Error101",
        "documentation": {}
    },
    {
        "label": "chi_2",
        "kind": 5,
        "importPath": "all files.c++.tests.Error101",
        "description": "all files.c++.tests.Error101",
        "peekOfCode": "chi_2 = 9203\nself = print(chi_1, chi_2)\nx == (\"0\")\ny == (\"-0\")\nwhile self.right(w, y) == False:\n    print(\"Beta 1.18.4\")\n    if self.right(w, y) == True:\n        break\nwhile self.left(w, y) == False:\n    print(\"Alpha 1.17.3\")",
        "detail": "all files.c++.tests.Error101",
        "documentation": {}
    },
    {
        "label": "self",
        "kind": 5,
        "importPath": "all files.c++.tests.Error101",
        "description": "all files.c++.tests.Error101",
        "peekOfCode": "self = print(chi_1, chi_2)\nx == (\"0\")\ny == (\"-0\")\nwhile self.right(w, y) == False:\n    print(\"Beta 1.18.4\")\n    if self.right(w, y) == True:\n        break\nwhile self.left(w, y) == False:\n    print(\"Alpha 1.17.3\")\n    if self.left(w, y) == True:",
        "detail": "all files.c++.tests.Error101",
        "documentation": {}
    },
    {
        "label": "righ",
        "kind": 2,
        "importPath": "all files.c++.tests.Error101_219",
        "description": "all files.c++.tests.Error101_219",
        "peekOfCode": "def righ():\n    righ = 0\ndef lef():\n    lef = -0\nwhile righ == True:\n    print(\"Beta 1.18.4\")\n    if righ == False:\n        break\n    elif lef == True:\n        print(\"Beta 1.18.4\")",
        "detail": "all files.c++.tests.Error101_219",
        "documentation": {}
    },
    {
        "label": "lef",
        "kind": 2,
        "importPath": "all files.c++.tests.Error101_219",
        "description": "all files.c++.tests.Error101_219",
        "peekOfCode": "def lef():\n    lef = -0\nwhile righ == True:\n    print(\"Beta 1.18.4\")\n    if righ == False:\n        break\n    elif lef == True:\n        print(\"Beta 1.18.4\")\n    elif lef == False:\n        break",
        "detail": "all files.c++.tests.Error101_219",
        "documentation": {}
    },
    {
        "label": "builtin_voltage",
        "kind": 2,
        "importPath": "all files.c++.tests.builtin_voltage",
        "description": "all files.c++.tests.builtin_voltage",
        "peekOfCode": "def builtin_voltage(\n    donor_conc: float,  # donor concentration\n    acceptor_conc: float,  # acceptor concentration\n    intrinsic_conc: float,  # intrinsic concentration\n) -> float:\n    \"\"\"\n    This function can calculate the Builtin Voltage of a pn junction diode.\n    This is calculated from the given three values.\n    Examples -\n    >>> builtin_voltage(donor_conc=1e17, acceptor_conc=1e17, intrinsic_conc=1e10)",
        "detail": "all files.c++.tests.builtin_voltage",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "all files.c++.tests.builtin_voltage",
        "description": "all files.c++.tests.builtin_voltage",
        "peekOfCode": "T = 300  # TEMPERATURE (unit = K)\ndef builtin_voltage(\n    donor_conc: float,  # donor concentration\n    acceptor_conc: float,  # acceptor concentration\n    intrinsic_conc: float,  # intrinsic concentration\n) -> float:\n    \"\"\"\n    This function can calculate the Builtin Voltage of a pn junction diode.\n    This is calculated from the given three values.\n    Examples -",
        "detail": "all files.c++.tests.builtin_voltage",
        "documentation": {}
    },
    {
        "label": "speak",
        "kind": 2,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "def speak(word):\n    engine.say(word)\n    engine.runAndWait()\n# pyttsx3\nbot = chatterbot.ChatBot(\"My Bot\")\nconvo = [\n    'hello',\n    'hi there !',\n    'what is your name?',\n    'My name is Bot, I am created by Chhavi',",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "ask_from_bot",
        "kind": 2,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "def ask_from_bot():\n    query = textF.get()\n    answer_from_bot = bot.get_response(query)\n    msgs.insert(END, \"you: \" + query)\n    print(type(answer_from_bot))\n    msgs.insert(END, \"bot: \" + str(answer_from_bot))\n    speak(answer_from_bot)\n    textF.delete(0, END)\n    msgs.yview(END)\nframe = Frame(main)",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "enter_function",
        "kind": 2,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "def enter_function(event):\n    btn.invoke()\n# going to bind main window with enter key..\nmain.bind('<Return>', enter_function)\nmain.mainloop()",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "engine = pp.init()\nvoices = engine.getProperty('voices')\nprint(voices)\nengine.setProperty('voice', voices[1].id)\ndef speak(word):\n    engine.say(word)\n    engine.runAndWait()\n# pyttsx3\nbot = chatterbot.ChatBot(\"My Bot\")\nconvo = [",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "voices",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "voices = engine.getProperty('voices')\nprint(voices)\nengine.setProperty('voice', voices[1].id)\ndef speak(word):\n    engine.say(word)\n    engine.runAndWait()\n# pyttsx3\nbot = chatterbot.ChatBot(\"My Bot\")\nconvo = [\n    'hello',",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "bot",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "bot = chatterbot.ChatBot(\"My Bot\")\nconvo = [\n    'hello',\n    'hi there !',\n    'what is your name?',\n    'My name is Bot, I am created by Chhavi',\n    'How are you?',\n    'I am doing great these days',\n    'thank you',\n    'In which city you live?',",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "convo",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "convo = [\n    'hello',\n    'hi there !',\n    'what is your name?',\n    'My name is Bot, I am created by Chhavi',\n    'How are you?',\n    'I am doing great these days',\n    'thank you',\n    'In which city you live?',\n    'I live in lucknow',",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "trainer",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "trainer = ListTrainer(bot)\n# now training the bot  with the help of trainer\ntrainer.train(convo)\n# answer = bot.get_response(\"what is you name?\")\n# print(answer)\n#\n# print(\"Talk to bot\")\n# while True:\n#     query = input()\n#     if query == 'exit':",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "main = Tk()\nmain.geometry(\"600x750\")\nmain.title(\"My Chat bot\")\ncanvas = Canvas(main, width=200, height=200)\ncanvas.pack()\nimg = ImageTk.PhotoImage(Image.open(\"bot1.jpg\"))\ncanvas.create_image(10, 10, anchor=NW, image=img)\ndef ask_from_bot():\n    query = textF.get()\n    answer_from_bot = bot.get_response(query)",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "canvas",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "canvas = Canvas(main, width=200, height=200)\ncanvas.pack()\nimg = ImageTk.PhotoImage(Image.open(\"bot1.jpg\"))\ncanvas.create_image(10, 10, anchor=NW, image=img)\ndef ask_from_bot():\n    query = textF.get()\n    answer_from_bot = bot.get_response(query)\n    msgs.insert(END, \"you: \" + query)\n    print(type(answer_from_bot))\n    msgs.insert(END, \"bot: \" + str(answer_from_bot))",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "img",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "img = ImageTk.PhotoImage(Image.open(\"bot1.jpg\"))\ncanvas.create_image(10, 10, anchor=NW, image=img)\ndef ask_from_bot():\n    query = textF.get()\n    answer_from_bot = bot.get_response(query)\n    msgs.insert(END, \"you: \" + query)\n    print(type(answer_from_bot))\n    msgs.insert(END, \"bot: \" + str(answer_from_bot))\n    speak(answer_from_bot)\n    textF.delete(0, END)",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "frame = Frame(main)\nsc = Scrollbar(frame)\nmsgs = Listbox(frame, width=80, height=20, yscrollcommand=sc.set)\nsc.pack(side=RIGHT, fill=Y)\nmsgs.pack(side=LEFT, fill=BOTH, pady=10)\nframe.pack()\n# creating text field\ntextF = Entry(main, font=(\"Verdana\", 20))\ntextF.pack(fill=X, pady=10)\nbtn = Button(main, text=\"Ask from bot\", font=(\"Verdana\", 20), command=ask_from_bot)",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "sc",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "sc = Scrollbar(frame)\nmsgs = Listbox(frame, width=80, height=20, yscrollcommand=sc.set)\nsc.pack(side=RIGHT, fill=Y)\nmsgs.pack(side=LEFT, fill=BOTH, pady=10)\nframe.pack()\n# creating text field\ntextF = Entry(main, font=(\"Verdana\", 20))\ntextF.pack(fill=X, pady=10)\nbtn = Button(main, text=\"Ask from bot\", font=(\"Verdana\", 20), command=ask_from_bot)\nbtn.pack()",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "msgs",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "msgs = Listbox(frame, width=80, height=20, yscrollcommand=sc.set)\nsc.pack(side=RIGHT, fill=Y)\nmsgs.pack(side=LEFT, fill=BOTH, pady=10)\nframe.pack()\n# creating text field\ntextF = Entry(main, font=(\"Verdana\", 20))\ntextF.pack(fill=X, pady=10)\nbtn = Button(main, text=\"Ask from bot\", font=(\"Verdana\", 20), command=ask_from_bot)\nbtn.pack()\n# creating a function",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "textF",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "textF = Entry(main, font=(\"Verdana\", 20))\ntextF.pack(fill=X, pady=10)\nbtn = Button(main, text=\"Ask from bot\", font=(\"Verdana\", 20), command=ask_from_bot)\nbtn.pack()\n# creating a function\ndef enter_function(event):\n    btn.invoke()\n# going to bind main window with enter key..\nmain.bind('<Return>', enter_function)\nmain.mainloop()",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "btn",
        "kind": 5,
        "importPath": "all files.c++.tests.chatbot",
        "description": "all files.c++.tests.chatbot",
        "peekOfCode": "btn = Button(main, text=\"Ask from bot\", font=(\"Verdana\", 20), command=ask_from_bot)\nbtn.pack()\n# creating a function\ndef enter_function(event):\n    btn.invoke()\n# going to bind main window with enter key..\nmain.bind('<Return>', enter_function)\nmain.mainloop()",
        "detail": "all files.c++.tests.chatbot",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "all files.c++.tests.create_index",
        "description": "all files.c++.tests.create_index",
        "peekOfCode": "def main():\n    html = read_file('index.html')\n    doc  = BeautifulSoup(''.join(html), 'html.parser')\n    hhh = defaultdict(lambda: defaultdict(list))\n    for i in range(2, 5):\n        for h in doc.find_all(f'h{i}'):\n            an_id = h.attrs['id']\n            text  = h.text.lstrip('#')\n            first_letter = text[0]\n            hhh[first_letter][text].append(an_id)",
        "detail": "all files.c++.tests.create_index",
        "documentation": {}
    },
    {
        "label": "print_hhh",
        "kind": 2,
        "importPath": "all files.c++.tests.create_index",
        "description": "all files.c++.tests.create_index",
        "peekOfCode": "def print_hhh(hhh):\n    letters = hhh.keys()\n    for letter in sorted(letters):\n        hh = hhh[letter]\n        print(f'### {letter}')\n        commands = hh.keys()\n        for command in sorted(commands):\n            links = hh[command]\n            lll = ', '.join(f'[1](#{l})' for l in links)\n            print(f'**{command} {lll}**  ')",
        "detail": "all files.c++.tests.create_index",
        "documentation": {}
    },
    {
        "label": "read_file",
        "kind": 2,
        "importPath": "all files.c++.tests.create_index",
        "description": "all files.c++.tests.create_index",
        "peekOfCode": "def read_file(filename):\n    with open(filename, encoding='utf-8') as file:\n        return file.readlines()\nif __name__ == '__main__':\n    main()",
        "detail": "all files.c++.tests.create_index",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 2,
        "importPath": "all files.c++.tests.gcf",
        "description": "all files.c++.tests.gcf",
        "peekOfCode": "def gcf (num1, num2):\n\tif num1 > num2:\n\t\tnum1, num2 = num2, num1\n\tfor x in range (num1, 0, -1):\n\t\tif num1 % x == 0 and num2 % x == 0:\n\t\t\treturn x\nnum1 = 18\nnum2 = 204\nprint (str(gcf(num1, num2)))",
        "detail": "all files.c++.tests.gcf",
        "documentation": {}
    },
    {
        "label": "num1",
        "kind": 5,
        "importPath": "all files.c++.tests.gcf",
        "description": "all files.c++.tests.gcf",
        "peekOfCode": "num1 = 18\nnum2 = 204\nprint (str(gcf(num1, num2)))",
        "detail": "all files.c++.tests.gcf",
        "documentation": {}
    },
    {
        "label": "num2",
        "kind": 5,
        "importPath": "all files.c++.tests.gcf",
        "description": "all files.c++.tests.gcf",
        "peekOfCode": "num2 = 204\nprint (str(gcf(num1, num2)))",
        "detail": "all files.c++.tests.gcf",
        "documentation": {}
    },
    {
        "label": "lcm",
        "kind": 2,
        "importPath": "all files.c++.tests.lcm",
        "description": "all files.c++.tests.lcm",
        "peekOfCode": "def lcm(num1, num2):\n\tif num1 > num2:\n\t\tnum1, num2 = num2, num1\n\tfor x in range (num2, num1 * num2 + 1, num2):\n\t\tif x % num1 == 0:\n\t\t\treturn x\n# list of 3 numbers\ndef lcm3(nums):\n\tnums.sort()\n\tworst = nums[0]*nums[1]*nums[2]",
        "detail": "all files.c++.tests.lcm",
        "documentation": {}
    },
    {
        "label": "lcm3",
        "kind": 2,
        "importPath": "all files.c++.tests.lcm",
        "description": "all files.c++.tests.lcm",
        "peekOfCode": "def lcm3(nums):\n\tnums.sort()\n\tworst = nums[0]*nums[1]*nums[2]\n\tfor x in range(nums[2], worst + 1, nums[2]):\n\t\tif x % nums[0] == 0 and x % nums[1] == 0:\n\t\t\treturn x\nprint(str(lcm(7, 12)))\nnums = [3, 2, 16]\nprint(str(lcm3(nums)))",
        "detail": "all files.c++.tests.lcm",
        "documentation": {}
    },
    {
        "label": "\tworst",
        "kind": 5,
        "importPath": "all files.c++.tests.lcm",
        "description": "all files.c++.tests.lcm",
        "peekOfCode": "\tworst = nums[0]*nums[1]*nums[2]\n\tfor x in range(nums[2], worst + 1, nums[2]):\n\t\tif x % nums[0] == 0 and x % nums[1] == 0:\n\t\t\treturn x\nprint(str(lcm(7, 12)))\nnums = [3, 2, 16]\nprint(str(lcm3(nums)))",
        "detail": "all files.c++.tests.lcm",
        "documentation": {}
    },
    {
        "label": "nums",
        "kind": 5,
        "importPath": "all files.c++.tests.lcm",
        "description": "all files.c++.tests.lcm",
        "peekOfCode": "nums = [3, 2, 16]\nprint(str(lcm3(nums)))",
        "detail": "all files.c++.tests.lcm",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": "all files.c++.tests.qrcode",
        "description": "all files.c++.tests.qrcode",
        "peekOfCode": "s = input(\": \")\n# Name of QR code png file\nprint(\"Enter image name to save\")\nn = input(\": \")\n# Adding extension as .pnf\nd = n + \".png\"\n# Creating QR code\nurl = pyqrcode.create(s)\n# Saving QR code as  a png file\nurl.show()",
        "detail": "all files.c++.tests.qrcode",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "all files.c++.tests.qrcode",
        "description": "all files.c++.tests.qrcode",
        "peekOfCode": "n = input(\": \")\n# Adding extension as .pnf\nd = n + \".png\"\n# Creating QR code\nurl = pyqrcode.create(s)\n# Saving QR code as  a png file\nurl.show()\nurl.png(d, scale=6)",
        "detail": "all files.c++.tests.qrcode",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "all files.c++.tests.qrcode",
        "description": "all files.c++.tests.qrcode",
        "peekOfCode": "d = n + \".png\"\n# Creating QR code\nurl = pyqrcode.create(s)\n# Saving QR code as  a png file\nurl.show()\nurl.png(d, scale=6)",
        "detail": "all files.c++.tests.qrcode",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "all files.c++.tests.qrcode",
        "description": "all files.c++.tests.qrcode",
        "peekOfCode": "url = pyqrcode.create(s)\n# Saving QR code as  a png file\nurl.show()\nurl.png(d, scale=6)",
        "detail": "all files.c++.tests.qrcode",
        "documentation": {}
    },
    {
        "label": "Browser",
        "kind": 6,
        "importPath": "all files.c++.tests.tk-browser",
        "description": "all files.c++.tests.tk-browser",
        "peekOfCode": "class Browser(Tk):\n    def __init__(self):\n        super(Browser,self).__init__()\n        self.title(\"Tk Browser\")\n        try:\n            browser = tkinterweb.HtmlFrame(self)\n            browser.load_website(\"https://google.com\")\n            browser.pack(fill=\"both\",expand=True)\n        except Exception:\n            sys.exit()",
        "detail": "all files.c++.tests.tk-browser",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "all files.c++.tests.tk-browser",
        "description": "all files.c++.tests.tk-browser",
        "peekOfCode": "def main():\n    browser = Browser()\n    browser.mainloop()\nif __name__ == \"__main__\":\n    # Webbrowser v1.0\n    main()",
        "detail": "all files.c++.tests.tk-browser",
        "documentation": {}
    },
    {
        "label": "draw",
        "kind": 2,
        "importPath": "all files.c++.tests.turtle_graphics",
        "description": "all files.c++.tests.turtle_graphics",
        "peekOfCode": "def draw():\n\tsize = randint(40, 300)\n\tangles = (144, 150, 157.5, 160, 165)\n\tangle = sample(angles, 1)[0]\n\tcolors = [\n\t\t('#922B21', '#E6B0AA'), ('#76448A', '#D2B4DE'), ('#1F618D', '#AED6F1'), ('#515A5A', '#EAEDED'),\n\t\t('#148F77', '#D1F2EB'), ('#B7950B', '#F7DC6F'), ('#F39C12', '#FDEBD0'), ('#BA4A00', '#F6DDCC')]\n\tcolor = sample(colors, 1)[0]\n\ttt.color(color[0], color[1])\n\tx_pos = randint(-200,200)",
        "detail": "all files.c++.tests.turtle_graphics",
        "documentation": {}
    },
    {
        "label": "\tsize",
        "kind": 5,
        "importPath": "all files.c++.tests.turtle_graphics",
        "description": "all files.c++.tests.turtle_graphics",
        "peekOfCode": "\tsize = randint(40, 300)\n\tangles = (144, 150, 157.5, 160, 165)\n\tangle = sample(angles, 1)[0]\n\tcolors = [\n\t\t('#922B21', '#E6B0AA'), ('#76448A', '#D2B4DE'), ('#1F618D', '#AED6F1'), ('#515A5A', '#EAEDED'),\n\t\t('#148F77', '#D1F2EB'), ('#B7950B', '#F7DC6F'), ('#F39C12', '#FDEBD0'), ('#BA4A00', '#F6DDCC')]\n\tcolor = sample(colors, 1)[0]\n\ttt.color(color[0], color[1])\n\tx_pos = randint(-200,200)\n\ty_pos = randint(-200,200)",
        "detail": "all files.c++.tests.turtle_graphics",
        "documentation": {}
    },
    {
        "label": "\tangles",
        "kind": 5,
        "importPath": "all files.c++.tests.turtle_graphics",
        "description": "all files.c++.tests.turtle_graphics",
        "peekOfCode": "\tangles = (144, 150, 157.5, 160, 165)\n\tangle = sample(angles, 1)[0]\n\tcolors = [\n\t\t('#922B21', '#E6B0AA'), ('#76448A', '#D2B4DE'), ('#1F618D', '#AED6F1'), ('#515A5A', '#EAEDED'),\n\t\t('#148F77', '#D1F2EB'), ('#B7950B', '#F7DC6F'), ('#F39C12', '#FDEBD0'), ('#BA4A00', '#F6DDCC')]\n\tcolor = sample(colors, 1)[0]\n\ttt.color(color[0], color[1])\n\tx_pos = randint(-200,200)\n\ty_pos = randint(-200,200)\n\ttt.pu()",
        "detail": "all files.c++.tests.turtle_graphics",
        "documentation": {}
    },
    {
        "label": "\tangle",
        "kind": 5,
        "importPath": "all files.c++.tests.turtle_graphics",
        "description": "all files.c++.tests.turtle_graphics",
        "peekOfCode": "\tangle = sample(angles, 1)[0]\n\tcolors = [\n\t\t('#922B21', '#E6B0AA'), ('#76448A', '#D2B4DE'), ('#1F618D', '#AED6F1'), ('#515A5A', '#EAEDED'),\n\t\t('#148F77', '#D1F2EB'), ('#B7950B', '#F7DC6F'), ('#F39C12', '#FDEBD0'), ('#BA4A00', '#F6DDCC')]\n\tcolor = sample(colors, 1)[0]\n\ttt.color(color[0], color[1])\n\tx_pos = randint(-200,200)\n\ty_pos = randint(-200,200)\n\ttt.pu()\n\ttt.setpos(x_pos, y_pos)",
        "detail": "all files.c++.tests.turtle_graphics",
        "documentation": {}
    },
    {
        "label": "\tcolors",
        "kind": 5,
        "importPath": "all files.c++.tests.turtle_graphics",
        "description": "all files.c++.tests.turtle_graphics",
        "peekOfCode": "\tcolors = [\n\t\t('#922B21', '#E6B0AA'), ('#76448A', '#D2B4DE'), ('#1F618D', '#AED6F1'), ('#515A5A', '#EAEDED'),\n\t\t('#148F77', '#D1F2EB'), ('#B7950B', '#F7DC6F'), ('#F39C12', '#FDEBD0'), ('#BA4A00', '#F6DDCC')]\n\tcolor = sample(colors, 1)[0]\n\ttt.color(color[0], color[1])\n\tx_pos = randint(-200,200)\n\ty_pos = randint(-200,200)\n\ttt.pu()\n\ttt.setpos(x_pos, y_pos)\n\tstart_position = tt.pos()",
        "detail": "all files.c++.tests.turtle_graphics",
        "documentation": {}
    },
    {
        "label": "\tcolor",
        "kind": 5,
        "importPath": "all files.c++.tests.turtle_graphics",
        "description": "all files.c++.tests.turtle_graphics",
        "peekOfCode": "\tcolor = sample(colors, 1)[0]\n\ttt.color(color[0], color[1])\n\tx_pos = randint(-200,200)\n\ty_pos = randint(-200,200)\n\ttt.pu()\n\ttt.setpos(x_pos, y_pos)\n\tstart_position = tt.pos()\n\ttt.pd()\n\ttt.begin_fill()\n\twhile True:",
        "detail": "all files.c++.tests.turtle_graphics",
        "documentation": {}
    },
    {
        "label": "\tx_pos",
        "kind": 5,
        "importPath": "all files.c++.tests.turtle_graphics",
        "description": "all files.c++.tests.turtle_graphics",
        "peekOfCode": "\tx_pos = randint(-200,200)\n\ty_pos = randint(-200,200)\n\ttt.pu()\n\ttt.setpos(x_pos, y_pos)\n\tstart_position = tt.pos()\n\ttt.pd()\n\ttt.begin_fill()\n\twhile True:\n\t\ttt.forward(size)\n\t\ttt.left(angle)",
        "detail": "all files.c++.tests.turtle_graphics",
        "documentation": {}
    },
    {
        "label": "\ty_pos",
        "kind": 5,
        "importPath": "all files.c++.tests.turtle_graphics",
        "description": "all files.c++.tests.turtle_graphics",
        "peekOfCode": "\ty_pos = randint(-200,200)\n\ttt.pu()\n\ttt.setpos(x_pos, y_pos)\n\tstart_position = tt.pos()\n\ttt.pd()\n\ttt.begin_fill()\n\twhile True:\n\t\ttt.forward(size)\n\t\ttt.left(angle)\n\t\tif abs(tt.pos() - start_position) < 1:",
        "detail": "all files.c++.tests.turtle_graphics",
        "documentation": {}
    },
    {
        "label": "\tstart_position",
        "kind": 5,
        "importPath": "all files.c++.tests.turtle_graphics",
        "description": "all files.c++.tests.turtle_graphics",
        "peekOfCode": "\tstart_position = tt.pos()\n\ttt.pd()\n\ttt.begin_fill()\n\twhile True:\n\t\ttt.forward(size)\n\t\ttt.left(angle)\n\t\tif abs(tt.pos() - start_position) < 1:\n\t\t\tbreak\n\ttt.end_fill()\ntt.circle(100)",
        "detail": "all files.c++.tests.turtle_graphics",
        "documentation": {}
    }
]