
protected:
    bool OnUserCreate() override
    {
        // Show FPS Counter
        EnableFPSCounter(true);

m_map += "###################"
m_map += "#........#...###..#"
m_map += "#.#......#....#...#"
m_map += "#.......####......#"
m_map += "#.................#"
m_map += "#.................#"
m_map += "#...##............#"
m_map += "###################"

printf("Map Size: %d\n", m_map.size());

        // Map size
        m_nMapWidth     = 32;
        m_nMapHeight    = 32;

        // User window size
        m_nScreenWidth  = 320;
        m_nScreenHeight = 240;

        // Player position and player looking angle
        m_fPlayerX      = 8.0f;
        m_fPlayerY      = 8.0f;
        m_fPlayerAngle  = 0.0f;

        // Field of view = 90 degrees
        m_fFOV          = PI / 2.0f;

        // Max distance to wall
        m_fDepth        = 32.0f;

        // set Pixel Size
        m_fPixelSizeX = (float)ScreenWidth() / (float)m_nScreenWidth;
        m_fPixelSizeY = (float)ScreenHeight() / (float)m_nScreenHeight;

        // Player move and rotation speed
        m_fSpeed = 5.0f;

        // Set primitive type
        m_quads.setPrimitiveType(sf::Quads);

        // Setup QUADS location and size
        for (int y = 0; y < m_nScreenHeight; y++)
        {
            for (int x = 0; x < m_nScreenWidth; x++)
            {
                // Upscaled coordinates
                float sx = x * m_fPixelSizeX;
                float sy = y * m_fPixelSizeY;

                // Append vertices in a clock-wise or counter-clock-wise order
                m_quads.append(sf::Vertex(sf::Vector2f(sx, sy), sf::Color::Black));
                m_quads.append(sf::Vertex(sf::Vector2f(sx + m_fPixelSizeX, sy), sf::Color::Black));
                m_quads.append(sf::Vertex(sf::Vector2f(sx + m_fPixelSizeX, sy + m_fPixelSizeY), sf::Color::Black));
                m_quads.append(sf::Vertex(sf::Vector2f(sx, sy + m_fPixelSizeY), sf::Color::Black));
            }
        }

        return true;
    }